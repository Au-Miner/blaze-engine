// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blaze.proto

package org.blaze.protobuf;

public interface PhysicalPlanNodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:plan.protobuf.PhysicalPlanNode)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
   * @return Whether the debug field is set.
   */
  boolean hasDebug();
  /**
   * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
   * @return The debug.
   */
  org.blaze.protobuf.DebugExecNode getDebug();
  /**
   * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
   */
  org.blaze.protobuf.DebugExecNodeOrBuilder getDebugOrBuilder();

  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
   * @return Whether the shuffleWriter field is set.
   */
  boolean hasShuffleWriter();
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
   * @return The shuffleWriter.
   */
  org.blaze.protobuf.ShuffleWriterExecNode getShuffleWriter();
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
   */
  org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder getShuffleWriterOrBuilder();

  /**
   * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
   * @return Whether the ipcReader field is set.
   */
  boolean hasIpcReader();
  /**
   * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
   * @return The ipcReader.
   */
  org.blaze.protobuf.IpcReaderExecNode getIpcReader();
  /**
   * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
   */
  org.blaze.protobuf.IpcReaderExecNodeOrBuilder getIpcReaderOrBuilder();

  /**
   * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
   * @return Whether the ipcWriter field is set.
   */
  boolean hasIpcWriter();
  /**
   * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
   * @return The ipcWriter.
   */
  org.blaze.protobuf.IpcWriterExecNode getIpcWriter();
  /**
   * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
   */
  org.blaze.protobuf.IpcWriterExecNodeOrBuilder getIpcWriterOrBuilder();

  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
   * @return Whether the parquetScan field is set.
   */
  boolean hasParquetScan();
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
   * @return The parquetScan.
   */
  org.blaze.protobuf.ParquetScanExecNode getParquetScan();
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
   */
  org.blaze.protobuf.ParquetScanExecNodeOrBuilder getParquetScanOrBuilder();

  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
   * @return Whether the projection field is set.
   */
  boolean hasProjection();
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
   * @return The projection.
   */
  org.blaze.protobuf.ProjectionExecNode getProjection();
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
   */
  org.blaze.protobuf.ProjectionExecNodeOrBuilder getProjectionOrBuilder();

  /**
   * <code>.plan.protobuf.SortExecNode sort = 7;</code>
   * @return Whether the sort field is set.
   */
  boolean hasSort();
  /**
   * <code>.plan.protobuf.SortExecNode sort = 7;</code>
   * @return The sort.
   */
  org.blaze.protobuf.SortExecNode getSort();
  /**
   * <code>.plan.protobuf.SortExecNode sort = 7;</code>
   */
  org.blaze.protobuf.SortExecNodeOrBuilder getSortOrBuilder();

  /**
   * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
   * @return Whether the filter field is set.
   */
  boolean hasFilter();
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
   * @return The filter.
   */
  org.blaze.protobuf.FilterExecNode getFilter();
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
   */
  org.blaze.protobuf.FilterExecNodeOrBuilder getFilterOrBuilder();

  /**
   * <code>.plan.protobuf.UnionExecNode union = 9;</code>
   * @return Whether the union field is set.
   */
  boolean hasUnion();
  /**
   * <code>.plan.protobuf.UnionExecNode union = 9;</code>
   * @return The union.
   */
  org.blaze.protobuf.UnionExecNode getUnion();
  /**
   * <code>.plan.protobuf.UnionExecNode union = 9;</code>
   */
  org.blaze.protobuf.UnionExecNodeOrBuilder getUnionOrBuilder();

  /**
   * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
   * @return Whether the sortMergeJoin field is set.
   */
  boolean hasSortMergeJoin();
  /**
   * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
   * @return The sortMergeJoin.
   */
  org.blaze.protobuf.SortMergeJoinExecNode getSortMergeJoin();
  /**
   * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
   */
  org.blaze.protobuf.SortMergeJoinExecNodeOrBuilder getSortMergeJoinOrBuilder();

  /**
   * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
   * @return Whether the broadcastJoinBuildHashMap field is set.
   */
  boolean hasBroadcastJoinBuildHashMap();
  /**
   * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
   * @return The broadcastJoinBuildHashMap.
   */
  org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode getBroadcastJoinBuildHashMap();
  /**
   * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
   */
  org.blaze.protobuf.BroadcastJoinBuildHashMapExecNodeOrBuilder getBroadcastJoinBuildHashMapOrBuilder();

  /**
   * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
   * @return Whether the broadcastJoin field is set.
   */
  boolean hasBroadcastJoin();
  /**
   * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
   * @return The broadcastJoin.
   */
  org.blaze.protobuf.BroadcastJoinExecNode getBroadcastJoin();
  /**
   * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
   */
  org.blaze.protobuf.BroadcastJoinExecNodeOrBuilder getBroadcastJoinOrBuilder();

  /**
   * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
   * @return Whether the renameColumns field is set.
   */
  boolean hasRenameColumns();
  /**
   * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
   * @return The renameColumns.
   */
  org.blaze.protobuf.RenameColumnsExecNode getRenameColumns();
  /**
   * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
   */
  org.blaze.protobuf.RenameColumnsExecNodeOrBuilder getRenameColumnsOrBuilder();

  /**
   * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
   * @return Whether the emptyPartitions field is set.
   */
  boolean hasEmptyPartitions();
  /**
   * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
   * @return The emptyPartitions.
   */
  org.blaze.protobuf.EmptyPartitionsExecNode getEmptyPartitions();
  /**
   * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
   */
  org.blaze.protobuf.EmptyPartitionsExecNodeOrBuilder getEmptyPartitionsOrBuilder();

  /**
   * <code>.plan.protobuf.AggExecNode agg = 15;</code>
   * @return Whether the agg field is set.
   */
  boolean hasAgg();
  /**
   * <code>.plan.protobuf.AggExecNode agg = 15;</code>
   * @return The agg.
   */
  org.blaze.protobuf.AggExecNode getAgg();
  /**
   * <code>.plan.protobuf.AggExecNode agg = 15;</code>
   */
  org.blaze.protobuf.AggExecNodeOrBuilder getAggOrBuilder();

  /**
   * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
   * @return Whether the limit field is set.
   */
  boolean hasLimit();
  /**
   * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
   * @return The limit.
   */
  org.blaze.protobuf.LimitExecNode getLimit();
  /**
   * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
   */
  org.blaze.protobuf.LimitExecNodeOrBuilder getLimitOrBuilder();

  /**
   * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
   * @return Whether the ffiReader field is set.
   */
  boolean hasFfiReader();
  /**
   * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
   * @return The ffiReader.
   */
  org.blaze.protobuf.FFIReaderExecNode getFfiReader();
  /**
   * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
   */
  org.blaze.protobuf.FFIReaderExecNodeOrBuilder getFfiReaderOrBuilder();

  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
   * @return Whether the coalesceBatches field is set.
   */
  boolean hasCoalesceBatches();
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
   * @return The coalesceBatches.
   */
  org.blaze.protobuf.CoalesceBatchesExecNode getCoalesceBatches();
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
   */
  org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder getCoalesceBatchesOrBuilder();

  /**
   * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
   * @return Whether the expand field is set.
   */
  boolean hasExpand();
  /**
   * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
   * @return The expand.
   */
  org.blaze.protobuf.ExpandExecNode getExpand();
  /**
   * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
   */
  org.blaze.protobuf.ExpandExecNodeOrBuilder getExpandOrBuilder();

  /**
   * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
   * @return Whether the rssShuffleWriter field is set.
   */
  boolean hasRssShuffleWriter();
  /**
   * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
   * @return The rssShuffleWriter.
   */
  org.blaze.protobuf.RssShuffleWriterExecNode getRssShuffleWriter();
  /**
   * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
   */
  org.blaze.protobuf.RssShuffleWriterExecNodeOrBuilder getRssShuffleWriterOrBuilder();

  /**
   * <code>.plan.protobuf.WindowExecNode window = 21;</code>
   * @return Whether the window field is set.
   */
  boolean hasWindow();
  /**
   * <code>.plan.protobuf.WindowExecNode window = 21;</code>
   * @return The window.
   */
  org.blaze.protobuf.WindowExecNode getWindow();
  /**
   * <code>.plan.protobuf.WindowExecNode window = 21;</code>
   */
  org.blaze.protobuf.WindowExecNodeOrBuilder getWindowOrBuilder();

  /**
   * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
   * @return Whether the generate field is set.
   */
  boolean hasGenerate();
  /**
   * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
   * @return The generate.
   */
  org.blaze.protobuf.GenerateExecNode getGenerate();
  /**
   * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
   */
  org.blaze.protobuf.GenerateExecNodeOrBuilder getGenerateOrBuilder();

  /**
   * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
   * @return Whether the parquetSink field is set.
   */
  boolean hasParquetSink();
  /**
   * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
   * @return The parquetSink.
   */
  org.blaze.protobuf.ParquetSinkExecNode getParquetSink();
  /**
   * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
   */
  org.blaze.protobuf.ParquetSinkExecNodeOrBuilder getParquetSinkOrBuilder();

  public org.blaze.protobuf.PhysicalPlanNode.PhysicalPlanTypeCase getPhysicalPlanTypeCase();
}
