// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blaze.proto

package org.blaze.protobuf;

public interface PhysicalExprNodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:plan.protobuf.PhysicalExprNode)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
   * @return Whether the column field is set.
   */
  boolean hasColumn();
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
   * @return The column.
   */
  org.blaze.protobuf.PhysicalColumn getColumn();
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
   */
  org.blaze.protobuf.PhysicalColumnOrBuilder getColumnOrBuilder();

  /**
   * <code>.plan.protobuf.ScalarValue literal = 2;</code>
   * @return Whether the literal field is set.
   */
  boolean hasLiteral();
  /**
   * <code>.plan.protobuf.ScalarValue literal = 2;</code>
   * @return The literal.
   */
  org.blaze.protobuf.ScalarValue getLiteral();
  /**
   * <code>.plan.protobuf.ScalarValue literal = 2;</code>
   */
  org.blaze.protobuf.ScalarValueOrBuilder getLiteralOrBuilder();

  /**
   * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
   * @return Whether the boundReference field is set.
   */
  boolean hasBoundReference();
  /**
   * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
   * @return The boundReference.
   */
  org.blaze.protobuf.BoundReference getBoundReference();
  /**
   * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
   */
  org.blaze.protobuf.BoundReferenceOrBuilder getBoundReferenceOrBuilder();

  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
   * @return Whether the binaryExpr field is set.
   */
  boolean hasBinaryExpr();
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
   * @return The binaryExpr.
   */
  org.blaze.protobuf.PhysicalBinaryExprNode getBinaryExpr();
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
   */
  org.blaze.protobuf.PhysicalBinaryExprNodeOrBuilder getBinaryExprOrBuilder();

  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
   * @return Whether the aggExpr field is set.
   */
  boolean hasAggExpr();
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
   * @return The aggExpr.
   */
  org.blaze.protobuf.PhysicalAggExprNode getAggExpr();
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
   */
  org.blaze.protobuf.PhysicalAggExprNodeOrBuilder getAggExprOrBuilder();

  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
   * @return Whether the isNullExpr field is set.
   */
  boolean hasIsNullExpr();
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
   * @return The isNullExpr.
   */
  org.blaze.protobuf.PhysicalIsNull getIsNullExpr();
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
   */
  org.blaze.protobuf.PhysicalIsNullOrBuilder getIsNullExprOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
   * @return Whether the isNotNullExpr field is set.
   */
  boolean hasIsNotNullExpr();
  /**
   * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
   * @return The isNotNullExpr.
   */
  org.blaze.protobuf.PhysicalIsNotNull getIsNotNullExpr();
  /**
   * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
   */
  org.blaze.protobuf.PhysicalIsNotNullOrBuilder getIsNotNullExprOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
   * @return Whether the notExpr field is set.
   */
  boolean hasNotExpr();
  /**
   * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
   * @return The notExpr.
   */
  org.blaze.protobuf.PhysicalNot getNotExpr();
  /**
   * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
   */
  org.blaze.protobuf.PhysicalNotOrBuilder getNotExprOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
   * @return Whether the case field is set.
   */
  boolean hasCase();
  /**
   * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
   * @return The case.
   */
  org.blaze.protobuf.PhysicalCaseNode getCase();
  /**
   * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
   */
  org.blaze.protobuf.PhysicalCaseNodeOrBuilder getCaseOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
   * @return Whether the cast field is set.
   */
  boolean hasCast();
  /**
   * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
   * @return The cast.
   */
  org.blaze.protobuf.PhysicalCastNode getCast();
  /**
   * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
   */
  org.blaze.protobuf.PhysicalCastNodeOrBuilder getCastOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
   * @return Whether the sort field is set.
   */
  boolean hasSort();
  /**
   * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
   * @return The sort.
   */
  org.blaze.protobuf.PhysicalSortExprNode getSort();
  /**
   * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
   */
  org.blaze.protobuf.PhysicalSortExprNodeOrBuilder getSortOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
   * @return Whether the negative field is set.
   */
  boolean hasNegative();
  /**
   * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
   * @return The negative.
   */
  org.blaze.protobuf.PhysicalNegativeNode getNegative();
  /**
   * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
   */
  org.blaze.protobuf.PhysicalNegativeNodeOrBuilder getNegativeOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
   * @return Whether the inList field is set.
   */
  boolean hasInList();
  /**
   * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
   * @return The inList.
   */
  org.blaze.protobuf.PhysicalInListNode getInList();
  /**
   * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
   */
  org.blaze.protobuf.PhysicalInListNodeOrBuilder getInListOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
   * @return Whether the scalarFunction field is set.
   */
  boolean hasScalarFunction();
  /**
   * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
   * @return The scalarFunction.
   */
  org.blaze.protobuf.PhysicalScalarFunctionNode getScalarFunction();
  /**
   * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
   */
  org.blaze.protobuf.PhysicalScalarFunctionNodeOrBuilder getScalarFunctionOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
   * @return Whether the tryCast field is set.
   */
  boolean hasTryCast();
  /**
   * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
   * @return The tryCast.
   */
  org.blaze.protobuf.PhysicalTryCastNode getTryCast();
  /**
   * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
   */
  org.blaze.protobuf.PhysicalTryCastNodeOrBuilder getTryCastOrBuilder();

  /**
   * <pre>
   * like/not like
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
   * @return Whether the likeExpr field is set.
   */
  boolean hasLikeExpr();
  /**
   * <pre>
   * like/not like
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
   * @return The likeExpr.
   */
  org.blaze.protobuf.PhysicalLikeExprNode getLikeExpr();
  /**
   * <pre>
   * like/not like
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
   */
  org.blaze.protobuf.PhysicalLikeExprNodeOrBuilder getLikeExprOrBuilder();

  /**
   * <pre>
   * sc_and/or
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
   * @return Whether the scAndExpr field is set.
   */
  boolean hasScAndExpr();
  /**
   * <pre>
   * sc_and/or
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
   * @return The scAndExpr.
   */
  org.blaze.protobuf.PhysicalSCAndExprNode getScAndExpr();
  /**
   * <pre>
   * sc_and/or
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
   */
  org.blaze.protobuf.PhysicalSCAndExprNodeOrBuilder getScAndExprOrBuilder();

  /**
   * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
   * @return Whether the scOrExpr field is set.
   */
  boolean hasScOrExpr();
  /**
   * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
   * @return The scOrExpr.
   */
  org.blaze.protobuf.PhysicalSCOrExprNode getScOrExpr();
  /**
   * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
   */
  org.blaze.protobuf.PhysicalSCOrExprNodeOrBuilder getScOrExprOrBuilder();

  /**
   * <pre>
   * spark udf wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
   * @return Whether the sparkUdfWrapperExpr field is set.
   */
  boolean hasSparkUdfWrapperExpr();
  /**
   * <pre>
   * spark udf wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
   * @return The sparkUdfWrapperExpr.
   */
  org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode getSparkUdfWrapperExpr();
  /**
   * <pre>
   * spark udf wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
   */
  org.blaze.protobuf.PhysicalSparkUDFWrapperExprNodeOrBuilder getSparkUdfWrapperExprOrBuilder();

  /**
   * <pre>
   * spark scalar subquery wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
   * @return Whether the sparkScalarSubqueryWrapperExpr field is set.
   */
  boolean hasSparkScalarSubqueryWrapperExpr();
  /**
   * <pre>
   * spark scalar subquery wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
   * @return The sparkScalarSubqueryWrapperExpr.
   */
  org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode getSparkScalarSubqueryWrapperExpr();
  /**
   * <pre>
   * spark scalar subquery wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
   */
  org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNodeOrBuilder getSparkScalarSubqueryWrapperExprOrBuilder();

  /**
   * <pre>
   * GetIndexedField
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
   * @return Whether the getIndexedFieldExpr field is set.
   */
  boolean hasGetIndexedFieldExpr();
  /**
   * <pre>
   * GetIndexedField
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
   * @return The getIndexedFieldExpr.
   */
  org.blaze.protobuf.PhysicalGetIndexedFieldExprNode getGetIndexedFieldExpr();
  /**
   * <pre>
   * GetIndexedField
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
   */
  org.blaze.protobuf.PhysicalGetIndexedFieldExprNodeOrBuilder getGetIndexedFieldExprOrBuilder();

  /**
   * <pre>
   * GetMapValue
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
   * @return Whether the getMapValueExpr field is set.
   */
  boolean hasGetMapValueExpr();
  /**
   * <pre>
   * GetMapValue
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
   * @return The getMapValueExpr.
   */
  org.blaze.protobuf.PhysicalGetMapValueExprNode getGetMapValueExpr();
  /**
   * <pre>
   * GetMapValue
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
   */
  org.blaze.protobuf.PhysicalGetMapValueExprNodeOrBuilder getGetMapValueExprOrBuilder();

  /**
   * <pre>
   * CreateNamedStruct
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
   * @return Whether the namedStruct field is set.
   */
  boolean hasNamedStruct();
  /**
   * <pre>
   * CreateNamedStruct
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
   * @return The namedStruct.
   */
  org.blaze.protobuf.PhysicalNamedStructExprNode getNamedStruct();
  /**
   * <pre>
   * CreateNamedStruct
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
   */
  org.blaze.protobuf.PhysicalNamedStructExprNodeOrBuilder getNamedStructOrBuilder();

  /**
   * <pre>
   * string expressions
   * </pre>
   *
   * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
   * @return Whether the stringStartsWithExpr field is set.
   */
  boolean hasStringStartsWithExpr();
  /**
   * <pre>
   * string expressions
   * </pre>
   *
   * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
   * @return The stringStartsWithExpr.
   */
  org.blaze.protobuf.StringStartsWithExprNode getStringStartsWithExpr();
  /**
   * <pre>
   * string expressions
   * </pre>
   *
   * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
   */
  org.blaze.protobuf.StringStartsWithExprNodeOrBuilder getStringStartsWithExprOrBuilder();

  /**
   * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
   * @return Whether the stringEndsWithExpr field is set.
   */
  boolean hasStringEndsWithExpr();
  /**
   * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
   * @return The stringEndsWithExpr.
   */
  org.blaze.protobuf.StringEndsWithExprNode getStringEndsWithExpr();
  /**
   * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
   */
  org.blaze.protobuf.StringEndsWithExprNodeOrBuilder getStringEndsWithExprOrBuilder();

  /**
   * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
   * @return Whether the stringContainsExpr field is set.
   */
  boolean hasStringContainsExpr();
  /**
   * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
   * @return The stringContainsExpr.
   */
  org.blaze.protobuf.StringContainsExprNode getStringContainsExpr();
  /**
   * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
   */
  org.blaze.protobuf.StringContainsExprNodeOrBuilder getStringContainsExprOrBuilder();

  /**
   * <pre>
   * RowNum
   * </pre>
   *
   * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
   * @return Whether the rowNumExpr field is set.
   */
  boolean hasRowNumExpr();
  /**
   * <pre>
   * RowNum
   * </pre>
   *
   * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
   * @return The rowNumExpr.
   */
  org.blaze.protobuf.RowNumExprNode getRowNumExpr();
  /**
   * <pre>
   * RowNum
   * </pre>
   *
   * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
   */
  org.blaze.protobuf.RowNumExprNodeOrBuilder getRowNumExprOrBuilder();

  public org.blaze.protobuf.PhysicalExprNode.ExprTypeCase getExprTypeCase();
}
