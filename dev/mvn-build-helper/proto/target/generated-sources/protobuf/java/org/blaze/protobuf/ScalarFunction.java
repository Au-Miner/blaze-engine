// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blaze.proto

package org.blaze.protobuf;

/**
 * Protobuf enum {@code plan.protobuf.ScalarFunction}
 */
public enum ScalarFunction
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>Abs = 0;</code>
   */
  Abs(0),
  /**
   * <code>Acos = 1;</code>
   */
  Acos(1),
  /**
   * <code>Asin = 2;</code>
   */
  Asin(2),
  /**
   * <code>Atan = 3;</code>
   */
  Atan(3),
  /**
   * <code>Ascii = 4;</code>
   */
  Ascii(4),
  /**
   * <code>Ceil = 5;</code>
   */
  Ceil(5),
  /**
   * <code>Cos = 6;</code>
   */
  Cos(6),
  /**
   * <code>Digest = 7;</code>
   */
  Digest(7),
  /**
   * <code>Exp = 8;</code>
   */
  Exp(8),
  /**
   * <code>Floor = 9;</code>
   */
  Floor(9),
  /**
   * <code>Ln = 10;</code>
   */
  Ln(10),
  /**
   * <code>Log = 11;</code>
   */
  Log(11),
  /**
   * <code>Log10 = 12;</code>
   */
  Log10(12),
  /**
   * <code>Log2 = 13;</code>
   */
  Log2(13),
  /**
   * <code>Round = 14;</code>
   */
  Round(14),
  /**
   * <code>Signum = 15;</code>
   */
  Signum(15),
  /**
   * <code>Sin = 16;</code>
   */
  Sin(16),
  /**
   * <code>Sqrt = 17;</code>
   */
  Sqrt(17),
  /**
   * <code>Tan = 18;</code>
   */
  Tan(18),
  /**
   * <code>Trunc = 19;</code>
   */
  Trunc(19),
  /**
   * <code>Array = 20;</code>
   */
  Array(20),
  /**
   * <code>RegexpMatch = 21;</code>
   */
  RegexpMatch(21),
  /**
   * <code>BitLength = 22;</code>
   */
  BitLength(22),
  /**
   * <code>Btrim = 23;</code>
   */
  Btrim(23),
  /**
   * <code>CharacterLength = 24;</code>
   */
  CharacterLength(24),
  /**
   * <code>Chr = 25;</code>
   */
  Chr(25),
  /**
   * <code>Concat = 26;</code>
   */
  Concat(26),
  /**
   * <code>ConcatWithSeparator = 27;</code>
   */
  ConcatWithSeparator(27),
  /**
   * <code>DatePart = 28;</code>
   */
  DatePart(28),
  /**
   * <code>DateTrunc = 29;</code>
   */
  DateTrunc(29),
  /**
   * <code>InitCap = 30;</code>
   */
  InitCap(30),
  /**
   * <code>Left = 31;</code>
   */
  Left(31),
  /**
   * <code>Lpad = 32;</code>
   */
  Lpad(32),
  /**
   * <code>Lower = 33;</code>
   */
  Lower(33),
  /**
   * <code>Ltrim = 34;</code>
   */
  Ltrim(34),
  /**
   * <code>MD5 = 35;</code>
   */
  MD5(35),
  /**
   * <pre>
   * NullIf=36;
   * </pre>
   *
   * <code>OctetLength = 37;</code>
   */
  OctetLength(37),
  /**
   * <code>Random = 38;</code>
   */
  Random(38),
  /**
   * <code>RegexpReplace = 39;</code>
   */
  RegexpReplace(39),
  /**
   * <code>Repeat = 40;</code>
   */
  Repeat(40),
  /**
   * <code>Replace = 41;</code>
   */
  Replace(41),
  /**
   * <code>Reverse = 42;</code>
   */
  Reverse(42),
  /**
   * <code>Right = 43;</code>
   */
  Right(43),
  /**
   * <code>Rpad = 44;</code>
   */
  Rpad(44),
  /**
   * <code>Rtrim = 45;</code>
   */
  Rtrim(45),
  /**
   * <code>SHA224 = 46;</code>
   */
  SHA224(46),
  /**
   * <code>SHA256 = 47;</code>
   */
  SHA256(47),
  /**
   * <code>SHA384 = 48;</code>
   */
  SHA384(48),
  /**
   * <code>SHA512 = 49;</code>
   */
  SHA512(49),
  /**
   * <code>SplitPart = 50;</code>
   */
  SplitPart(50),
  /**
   * <code>StartsWith = 51;</code>
   */
  StartsWith(51),
  /**
   * <code>Strpos = 52;</code>
   */
  Strpos(52),
  /**
   * <code>Substr = 53;</code>
   */
  Substr(53),
  /**
   * <code>ToHex = 54;</code>
   */
  ToHex(54),
  /**
   * <code>ToTimestamp = 55;</code>
   */
  ToTimestamp(55),
  /**
   * <code>ToTimestampMillis = 56;</code>
   */
  ToTimestampMillis(56),
  /**
   * <code>ToTimestampMicros = 57;</code>
   */
  ToTimestampMicros(57),
  /**
   * <code>ToTimestampSeconds = 58;</code>
   */
  ToTimestampSeconds(58),
  /**
   * <code>Now = 59;</code>
   */
  Now(59),
  /**
   * <code>Translate = 60;</code>
   */
  Translate(60),
  /**
   * <code>Trim = 61;</code>
   */
  Trim(61),
  /**
   * <code>Upper = 62;</code>
   */
  Upper(62),
  /**
   * <code>Coalesce = 63;</code>
   */
  Coalesce(63),
  /**
   * <code>SparkExtFunctions = 10000;</code>
   */
  SparkExtFunctions(10000),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>Abs = 0;</code>
   */
  public static final int Abs_VALUE = 0;
  /**
   * <code>Acos = 1;</code>
   */
  public static final int Acos_VALUE = 1;
  /**
   * <code>Asin = 2;</code>
   */
  public static final int Asin_VALUE = 2;
  /**
   * <code>Atan = 3;</code>
   */
  public static final int Atan_VALUE = 3;
  /**
   * <code>Ascii = 4;</code>
   */
  public static final int Ascii_VALUE = 4;
  /**
   * <code>Ceil = 5;</code>
   */
  public static final int Ceil_VALUE = 5;
  /**
   * <code>Cos = 6;</code>
   */
  public static final int Cos_VALUE = 6;
  /**
   * <code>Digest = 7;</code>
   */
  public static final int Digest_VALUE = 7;
  /**
   * <code>Exp = 8;</code>
   */
  public static final int Exp_VALUE = 8;
  /**
   * <code>Floor = 9;</code>
   */
  public static final int Floor_VALUE = 9;
  /**
   * <code>Ln = 10;</code>
   */
  public static final int Ln_VALUE = 10;
  /**
   * <code>Log = 11;</code>
   */
  public static final int Log_VALUE = 11;
  /**
   * <code>Log10 = 12;</code>
   */
  public static final int Log10_VALUE = 12;
  /**
   * <code>Log2 = 13;</code>
   */
  public static final int Log2_VALUE = 13;
  /**
   * <code>Round = 14;</code>
   */
  public static final int Round_VALUE = 14;
  /**
   * <code>Signum = 15;</code>
   */
  public static final int Signum_VALUE = 15;
  /**
   * <code>Sin = 16;</code>
   */
  public static final int Sin_VALUE = 16;
  /**
   * <code>Sqrt = 17;</code>
   */
  public static final int Sqrt_VALUE = 17;
  /**
   * <code>Tan = 18;</code>
   */
  public static final int Tan_VALUE = 18;
  /**
   * <code>Trunc = 19;</code>
   */
  public static final int Trunc_VALUE = 19;
  /**
   * <code>Array = 20;</code>
   */
  public static final int Array_VALUE = 20;
  /**
   * <code>RegexpMatch = 21;</code>
   */
  public static final int RegexpMatch_VALUE = 21;
  /**
   * <code>BitLength = 22;</code>
   */
  public static final int BitLength_VALUE = 22;
  /**
   * <code>Btrim = 23;</code>
   */
  public static final int Btrim_VALUE = 23;
  /**
   * <code>CharacterLength = 24;</code>
   */
  public static final int CharacterLength_VALUE = 24;
  /**
   * <code>Chr = 25;</code>
   */
  public static final int Chr_VALUE = 25;
  /**
   * <code>Concat = 26;</code>
   */
  public static final int Concat_VALUE = 26;
  /**
   * <code>ConcatWithSeparator = 27;</code>
   */
  public static final int ConcatWithSeparator_VALUE = 27;
  /**
   * <code>DatePart = 28;</code>
   */
  public static final int DatePart_VALUE = 28;
  /**
   * <code>DateTrunc = 29;</code>
   */
  public static final int DateTrunc_VALUE = 29;
  /**
   * <code>InitCap = 30;</code>
   */
  public static final int InitCap_VALUE = 30;
  /**
   * <code>Left = 31;</code>
   */
  public static final int Left_VALUE = 31;
  /**
   * <code>Lpad = 32;</code>
   */
  public static final int Lpad_VALUE = 32;
  /**
   * <code>Lower = 33;</code>
   */
  public static final int Lower_VALUE = 33;
  /**
   * <code>Ltrim = 34;</code>
   */
  public static final int Ltrim_VALUE = 34;
  /**
   * <code>MD5 = 35;</code>
   */
  public static final int MD5_VALUE = 35;
  /**
   * <pre>
   * NullIf=36;
   * </pre>
   *
   * <code>OctetLength = 37;</code>
   */
  public static final int OctetLength_VALUE = 37;
  /**
   * <code>Random = 38;</code>
   */
  public static final int Random_VALUE = 38;
  /**
   * <code>RegexpReplace = 39;</code>
   */
  public static final int RegexpReplace_VALUE = 39;
  /**
   * <code>Repeat = 40;</code>
   */
  public static final int Repeat_VALUE = 40;
  /**
   * <code>Replace = 41;</code>
   */
  public static final int Replace_VALUE = 41;
  /**
   * <code>Reverse = 42;</code>
   */
  public static final int Reverse_VALUE = 42;
  /**
   * <code>Right = 43;</code>
   */
  public static final int Right_VALUE = 43;
  /**
   * <code>Rpad = 44;</code>
   */
  public static final int Rpad_VALUE = 44;
  /**
   * <code>Rtrim = 45;</code>
   */
  public static final int Rtrim_VALUE = 45;
  /**
   * <code>SHA224 = 46;</code>
   */
  public static final int SHA224_VALUE = 46;
  /**
   * <code>SHA256 = 47;</code>
   */
  public static final int SHA256_VALUE = 47;
  /**
   * <code>SHA384 = 48;</code>
   */
  public static final int SHA384_VALUE = 48;
  /**
   * <code>SHA512 = 49;</code>
   */
  public static final int SHA512_VALUE = 49;
  /**
   * <code>SplitPart = 50;</code>
   */
  public static final int SplitPart_VALUE = 50;
  /**
   * <code>StartsWith = 51;</code>
   */
  public static final int StartsWith_VALUE = 51;
  /**
   * <code>Strpos = 52;</code>
   */
  public static final int Strpos_VALUE = 52;
  /**
   * <code>Substr = 53;</code>
   */
  public static final int Substr_VALUE = 53;
  /**
   * <code>ToHex = 54;</code>
   */
  public static final int ToHex_VALUE = 54;
  /**
   * <code>ToTimestamp = 55;</code>
   */
  public static final int ToTimestamp_VALUE = 55;
  /**
   * <code>ToTimestampMillis = 56;</code>
   */
  public static final int ToTimestampMillis_VALUE = 56;
  /**
   * <code>ToTimestampMicros = 57;</code>
   */
  public static final int ToTimestampMicros_VALUE = 57;
  /**
   * <code>ToTimestampSeconds = 58;</code>
   */
  public static final int ToTimestampSeconds_VALUE = 58;
  /**
   * <code>Now = 59;</code>
   */
  public static final int Now_VALUE = 59;
  /**
   * <code>Translate = 60;</code>
   */
  public static final int Translate_VALUE = 60;
  /**
   * <code>Trim = 61;</code>
   */
  public static final int Trim_VALUE = 61;
  /**
   * <code>Upper = 62;</code>
   */
  public static final int Upper_VALUE = 62;
  /**
   * <code>Coalesce = 63;</code>
   */
  public static final int Coalesce_VALUE = 63;
  /**
   * <code>SparkExtFunctions = 10000;</code>
   */
  public static final int SparkExtFunctions_VALUE = 10000;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ScalarFunction valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ScalarFunction forNumber(int value) {
    switch (value) {
      case 0: return Abs;
      case 1: return Acos;
      case 2: return Asin;
      case 3: return Atan;
      case 4: return Ascii;
      case 5: return Ceil;
      case 6: return Cos;
      case 7: return Digest;
      case 8: return Exp;
      case 9: return Floor;
      case 10: return Ln;
      case 11: return Log;
      case 12: return Log10;
      case 13: return Log2;
      case 14: return Round;
      case 15: return Signum;
      case 16: return Sin;
      case 17: return Sqrt;
      case 18: return Tan;
      case 19: return Trunc;
      case 20: return Array;
      case 21: return RegexpMatch;
      case 22: return BitLength;
      case 23: return Btrim;
      case 24: return CharacterLength;
      case 25: return Chr;
      case 26: return Concat;
      case 27: return ConcatWithSeparator;
      case 28: return DatePart;
      case 29: return DateTrunc;
      case 30: return InitCap;
      case 31: return Left;
      case 32: return Lpad;
      case 33: return Lower;
      case 34: return Ltrim;
      case 35: return MD5;
      case 37: return OctetLength;
      case 38: return Random;
      case 39: return RegexpReplace;
      case 40: return Repeat;
      case 41: return Replace;
      case 42: return Reverse;
      case 43: return Right;
      case 44: return Rpad;
      case 45: return Rtrim;
      case 46: return SHA224;
      case 47: return SHA256;
      case 48: return SHA384;
      case 49: return SHA512;
      case 50: return SplitPart;
      case 51: return StartsWith;
      case 52: return Strpos;
      case 53: return Substr;
      case 54: return ToHex;
      case 55: return ToTimestamp;
      case 56: return ToTimestampMillis;
      case 57: return ToTimestampMicros;
      case 58: return ToTimestampSeconds;
      case 59: return Now;
      case 60: return Translate;
      case 61: return Trim;
      case 62: return Upper;
      case 63: return Coalesce;
      case 10000: return SparkExtFunctions;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ScalarFunction>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ScalarFunction> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ScalarFunction>() {
          public ScalarFunction findValueByNumber(int number) {
            return ScalarFunction.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.blaze.protobuf.BlazeProto.getDescriptor().getEnumTypes().get(3);
  }

  private static final ScalarFunction[] VALUES = values();

  public static ScalarFunction valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ScalarFunction(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:plan.protobuf.ScalarFunction)
}

