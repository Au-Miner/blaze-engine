// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blaze.proto

package org.blaze.protobuf;

/**
 * <pre>
 * physical expressions
 * </pre>
 *
 * Protobuf type {@code plan.protobuf.PhysicalExprNode}
 */
public final class PhysicalExprNode extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:plan.protobuf.PhysicalExprNode)
    PhysicalExprNodeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PhysicalExprNode.newBuilder() to construct.
  private PhysicalExprNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PhysicalExprNode() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PhysicalExprNode();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalExprNode_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalExprNode_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.blaze.protobuf.PhysicalExprNode.class, org.blaze.protobuf.PhysicalExprNode.Builder.class);
  }

  private int exprTypeCase_ = 0;
  private java.lang.Object exprType_;
  public enum ExprTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    COLUMN(1),
    LITERAL(2),
    BOUND_REFERENCE(3),
    BINARY_EXPR(4),
    AGG_EXPR(5),
    IS_NULL_EXPR(6),
    IS_NOT_NULL_EXPR(7),
    NOT_EXPR(8),
    CASE_(9),
    CAST(10),
    SORT(11),
    NEGATIVE(12),
    IN_LIST(13),
    SCALAR_FUNCTION(14),
    TRY_CAST(15),
    LIKE_EXPR(20),
    SC_AND_EXPR(3000),
    SC_OR_EXPR(3001),
    SPARK_UDF_WRAPPER_EXPR(10000),
    SPARK_SCALAR_SUBQUERY_WRAPPER_EXPR(10001),
    GET_INDEXED_FIELD_EXPR(10002),
    GET_MAP_VALUE_EXPR(10003),
    NAMED_STRUCT(11000),
    STRING_STARTS_WITH_EXPR(20000),
    STRING_ENDS_WITH_EXPR(20001),
    STRING_CONTAINS_EXPR(20002),
    ROW_NUM_EXPR(20100),
    EXPRTYPE_NOT_SET(0);
    private final int value;
    private ExprTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExprTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ExprTypeCase forNumber(int value) {
      switch (value) {
        case 1: return COLUMN;
        case 2: return LITERAL;
        case 3: return BOUND_REFERENCE;
        case 4: return BINARY_EXPR;
        case 5: return AGG_EXPR;
        case 6: return IS_NULL_EXPR;
        case 7: return IS_NOT_NULL_EXPR;
        case 8: return NOT_EXPR;
        case 9: return CASE_;
        case 10: return CAST;
        case 11: return SORT;
        case 12: return NEGATIVE;
        case 13: return IN_LIST;
        case 14: return SCALAR_FUNCTION;
        case 15: return TRY_CAST;
        case 20: return LIKE_EXPR;
        case 3000: return SC_AND_EXPR;
        case 3001: return SC_OR_EXPR;
        case 10000: return SPARK_UDF_WRAPPER_EXPR;
        case 10001: return SPARK_SCALAR_SUBQUERY_WRAPPER_EXPR;
        case 10002: return GET_INDEXED_FIELD_EXPR;
        case 10003: return GET_MAP_VALUE_EXPR;
        case 11000: return NAMED_STRUCT;
        case 20000: return STRING_STARTS_WITH_EXPR;
        case 20001: return STRING_ENDS_WITH_EXPR;
        case 20002: return STRING_CONTAINS_EXPR;
        case 20100: return ROW_NUM_EXPR;
        case 0: return EXPRTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ExprTypeCase
  getExprTypeCase() {
    return ExprTypeCase.forNumber(
        exprTypeCase_);
  }

  public static final int COLUMN_FIELD_NUMBER = 1;
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
   * @return Whether the column field is set.
   */
  @java.lang.Override
  public boolean hasColumn() {
    return exprTypeCase_ == 1;
  }
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
   * @return The column.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalColumn getColumn() {
    if (exprTypeCase_ == 1) {
       return (org.blaze.protobuf.PhysicalColumn) exprType_;
    }
    return org.blaze.protobuf.PhysicalColumn.getDefaultInstance();
  }
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalColumnOrBuilder getColumnOrBuilder() {
    if (exprTypeCase_ == 1) {
       return (org.blaze.protobuf.PhysicalColumn) exprType_;
    }
    return org.blaze.protobuf.PhysicalColumn.getDefaultInstance();
  }

  public static final int LITERAL_FIELD_NUMBER = 2;
  /**
   * <code>.plan.protobuf.ScalarValue literal = 2;</code>
   * @return Whether the literal field is set.
   */
  @java.lang.Override
  public boolean hasLiteral() {
    return exprTypeCase_ == 2;
  }
  /**
   * <code>.plan.protobuf.ScalarValue literal = 2;</code>
   * @return The literal.
   */
  @java.lang.Override
  public org.blaze.protobuf.ScalarValue getLiteral() {
    if (exprTypeCase_ == 2) {
       return (org.blaze.protobuf.ScalarValue) exprType_;
    }
    return org.blaze.protobuf.ScalarValue.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ScalarValue literal = 2;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ScalarValueOrBuilder getLiteralOrBuilder() {
    if (exprTypeCase_ == 2) {
       return (org.blaze.protobuf.ScalarValue) exprType_;
    }
    return org.blaze.protobuf.ScalarValue.getDefaultInstance();
  }

  public static final int BOUND_REFERENCE_FIELD_NUMBER = 3;
  /**
   * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
   * @return Whether the boundReference field is set.
   */
  @java.lang.Override
  public boolean hasBoundReference() {
    return exprTypeCase_ == 3;
  }
  /**
   * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
   * @return The boundReference.
   */
  @java.lang.Override
  public org.blaze.protobuf.BoundReference getBoundReference() {
    if (exprTypeCase_ == 3) {
       return (org.blaze.protobuf.BoundReference) exprType_;
    }
    return org.blaze.protobuf.BoundReference.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.BoundReferenceOrBuilder getBoundReferenceOrBuilder() {
    if (exprTypeCase_ == 3) {
       return (org.blaze.protobuf.BoundReference) exprType_;
    }
    return org.blaze.protobuf.BoundReference.getDefaultInstance();
  }

  public static final int BINARY_EXPR_FIELD_NUMBER = 4;
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
   * @return Whether the binaryExpr field is set.
   */
  @java.lang.Override
  public boolean hasBinaryExpr() {
    return exprTypeCase_ == 4;
  }
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
   * @return The binaryExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalBinaryExprNode getBinaryExpr() {
    if (exprTypeCase_ == 4) {
       return (org.blaze.protobuf.PhysicalBinaryExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalBinaryExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalBinaryExprNodeOrBuilder getBinaryExprOrBuilder() {
    if (exprTypeCase_ == 4) {
       return (org.blaze.protobuf.PhysicalBinaryExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalBinaryExprNode.getDefaultInstance();
  }

  public static final int AGG_EXPR_FIELD_NUMBER = 5;
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
   * @return Whether the aggExpr field is set.
   */
  @java.lang.Override
  public boolean hasAggExpr() {
    return exprTypeCase_ == 5;
  }
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
   * @return The aggExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalAggExprNode getAggExpr() {
    if (exprTypeCase_ == 5) {
       return (org.blaze.protobuf.PhysicalAggExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalAggExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalAggExprNodeOrBuilder getAggExprOrBuilder() {
    if (exprTypeCase_ == 5) {
       return (org.blaze.protobuf.PhysicalAggExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalAggExprNode.getDefaultInstance();
  }

  public static final int IS_NULL_EXPR_FIELD_NUMBER = 6;
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
   * @return Whether the isNullExpr field is set.
   */
  @java.lang.Override
  public boolean hasIsNullExpr() {
    return exprTypeCase_ == 6;
  }
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
   * @return The isNullExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalIsNull getIsNullExpr() {
    if (exprTypeCase_ == 6) {
       return (org.blaze.protobuf.PhysicalIsNull) exprType_;
    }
    return org.blaze.protobuf.PhysicalIsNull.getDefaultInstance();
  }
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalIsNullOrBuilder getIsNullExprOrBuilder() {
    if (exprTypeCase_ == 6) {
       return (org.blaze.protobuf.PhysicalIsNull) exprType_;
    }
    return org.blaze.protobuf.PhysicalIsNull.getDefaultInstance();
  }

  public static final int IS_NOT_NULL_EXPR_FIELD_NUMBER = 7;
  /**
   * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
   * @return Whether the isNotNullExpr field is set.
   */
  @java.lang.Override
  public boolean hasIsNotNullExpr() {
    return exprTypeCase_ == 7;
  }
  /**
   * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
   * @return The isNotNullExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalIsNotNull getIsNotNullExpr() {
    if (exprTypeCase_ == 7) {
       return (org.blaze.protobuf.PhysicalIsNotNull) exprType_;
    }
    return org.blaze.protobuf.PhysicalIsNotNull.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalIsNotNullOrBuilder getIsNotNullExprOrBuilder() {
    if (exprTypeCase_ == 7) {
       return (org.blaze.protobuf.PhysicalIsNotNull) exprType_;
    }
    return org.blaze.protobuf.PhysicalIsNotNull.getDefaultInstance();
  }

  public static final int NOT_EXPR_FIELD_NUMBER = 8;
  /**
   * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
   * @return Whether the notExpr field is set.
   */
  @java.lang.Override
  public boolean hasNotExpr() {
    return exprTypeCase_ == 8;
  }
  /**
   * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
   * @return The notExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalNot getNotExpr() {
    if (exprTypeCase_ == 8) {
       return (org.blaze.protobuf.PhysicalNot) exprType_;
    }
    return org.blaze.protobuf.PhysicalNot.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalNotOrBuilder getNotExprOrBuilder() {
    if (exprTypeCase_ == 8) {
       return (org.blaze.protobuf.PhysicalNot) exprType_;
    }
    return org.blaze.protobuf.PhysicalNot.getDefaultInstance();
  }

  public static final int CASE__FIELD_NUMBER = 9;
  /**
   * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
   * @return Whether the case field is set.
   */
  @java.lang.Override
  public boolean hasCase() {
    return exprTypeCase_ == 9;
  }
  /**
   * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
   * @return The case.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalCaseNode getCase() {
    if (exprTypeCase_ == 9) {
       return (org.blaze.protobuf.PhysicalCaseNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalCaseNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalCaseNodeOrBuilder getCaseOrBuilder() {
    if (exprTypeCase_ == 9) {
       return (org.blaze.protobuf.PhysicalCaseNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalCaseNode.getDefaultInstance();
  }

  public static final int CAST_FIELD_NUMBER = 10;
  /**
   * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
   * @return Whether the cast field is set.
   */
  @java.lang.Override
  public boolean hasCast() {
    return exprTypeCase_ == 10;
  }
  /**
   * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
   * @return The cast.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalCastNode getCast() {
    if (exprTypeCase_ == 10) {
       return (org.blaze.protobuf.PhysicalCastNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalCastNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalCastNodeOrBuilder getCastOrBuilder() {
    if (exprTypeCase_ == 10) {
       return (org.blaze.protobuf.PhysicalCastNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalCastNode.getDefaultInstance();
  }

  public static final int SORT_FIELD_NUMBER = 11;
  /**
   * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
   * @return Whether the sort field is set.
   */
  @java.lang.Override
  public boolean hasSort() {
    return exprTypeCase_ == 11;
  }
  /**
   * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
   * @return The sort.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSortExprNode getSort() {
    if (exprTypeCase_ == 11) {
       return (org.blaze.protobuf.PhysicalSortExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSortExprNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSortExprNodeOrBuilder getSortOrBuilder() {
    if (exprTypeCase_ == 11) {
       return (org.blaze.protobuf.PhysicalSortExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSortExprNode.getDefaultInstance();
  }

  public static final int NEGATIVE_FIELD_NUMBER = 12;
  /**
   * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
   * @return Whether the negative field is set.
   */
  @java.lang.Override
  public boolean hasNegative() {
    return exprTypeCase_ == 12;
  }
  /**
   * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
   * @return The negative.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalNegativeNode getNegative() {
    if (exprTypeCase_ == 12) {
       return (org.blaze.protobuf.PhysicalNegativeNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalNegativeNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalNegativeNodeOrBuilder getNegativeOrBuilder() {
    if (exprTypeCase_ == 12) {
       return (org.blaze.protobuf.PhysicalNegativeNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalNegativeNode.getDefaultInstance();
  }

  public static final int IN_LIST_FIELD_NUMBER = 13;
  /**
   * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
   * @return Whether the inList field is set.
   */
  @java.lang.Override
  public boolean hasInList() {
    return exprTypeCase_ == 13;
  }
  /**
   * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
   * @return The inList.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalInListNode getInList() {
    if (exprTypeCase_ == 13) {
       return (org.blaze.protobuf.PhysicalInListNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalInListNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalInListNodeOrBuilder getInListOrBuilder() {
    if (exprTypeCase_ == 13) {
       return (org.blaze.protobuf.PhysicalInListNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalInListNode.getDefaultInstance();
  }

  public static final int SCALAR_FUNCTION_FIELD_NUMBER = 14;
  /**
   * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
   * @return Whether the scalarFunction field is set.
   */
  @java.lang.Override
  public boolean hasScalarFunction() {
    return exprTypeCase_ == 14;
  }
  /**
   * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
   * @return The scalarFunction.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalScalarFunctionNode getScalarFunction() {
    if (exprTypeCase_ == 14) {
       return (org.blaze.protobuf.PhysicalScalarFunctionNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalScalarFunctionNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalScalarFunctionNodeOrBuilder getScalarFunctionOrBuilder() {
    if (exprTypeCase_ == 14) {
       return (org.blaze.protobuf.PhysicalScalarFunctionNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalScalarFunctionNode.getDefaultInstance();
  }

  public static final int TRY_CAST_FIELD_NUMBER = 15;
  /**
   * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
   * @return Whether the tryCast field is set.
   */
  @java.lang.Override
  public boolean hasTryCast() {
    return exprTypeCase_ == 15;
  }
  /**
   * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
   * @return The tryCast.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalTryCastNode getTryCast() {
    if (exprTypeCase_ == 15) {
       return (org.blaze.protobuf.PhysicalTryCastNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalTryCastNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalTryCastNodeOrBuilder getTryCastOrBuilder() {
    if (exprTypeCase_ == 15) {
       return (org.blaze.protobuf.PhysicalTryCastNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalTryCastNode.getDefaultInstance();
  }

  public static final int LIKE_EXPR_FIELD_NUMBER = 20;
  /**
   * <pre>
   * like/not like
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
   * @return Whether the likeExpr field is set.
   */
  @java.lang.Override
  public boolean hasLikeExpr() {
    return exprTypeCase_ == 20;
  }
  /**
   * <pre>
   * like/not like
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
   * @return The likeExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalLikeExprNode getLikeExpr() {
    if (exprTypeCase_ == 20) {
       return (org.blaze.protobuf.PhysicalLikeExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalLikeExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * like/not like
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalLikeExprNodeOrBuilder getLikeExprOrBuilder() {
    if (exprTypeCase_ == 20) {
       return (org.blaze.protobuf.PhysicalLikeExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalLikeExprNode.getDefaultInstance();
  }

  public static final int SC_AND_EXPR_FIELD_NUMBER = 3000;
  /**
   * <pre>
   * sc_and/or
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
   * @return Whether the scAndExpr field is set.
   */
  @java.lang.Override
  public boolean hasScAndExpr() {
    return exprTypeCase_ == 3000;
  }
  /**
   * <pre>
   * sc_and/or
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
   * @return The scAndExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSCAndExprNode getScAndExpr() {
    if (exprTypeCase_ == 3000) {
       return (org.blaze.protobuf.PhysicalSCAndExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSCAndExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * sc_and/or
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSCAndExprNodeOrBuilder getScAndExprOrBuilder() {
    if (exprTypeCase_ == 3000) {
       return (org.blaze.protobuf.PhysicalSCAndExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSCAndExprNode.getDefaultInstance();
  }

  public static final int SC_OR_EXPR_FIELD_NUMBER = 3001;
  /**
   * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
   * @return Whether the scOrExpr field is set.
   */
  @java.lang.Override
  public boolean hasScOrExpr() {
    return exprTypeCase_ == 3001;
  }
  /**
   * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
   * @return The scOrExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSCOrExprNode getScOrExpr() {
    if (exprTypeCase_ == 3001) {
       return (org.blaze.protobuf.PhysicalSCOrExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSCOrExprNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSCOrExprNodeOrBuilder getScOrExprOrBuilder() {
    if (exprTypeCase_ == 3001) {
       return (org.blaze.protobuf.PhysicalSCOrExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSCOrExprNode.getDefaultInstance();
  }

  public static final int SPARK_UDF_WRAPPER_EXPR_FIELD_NUMBER = 10000;
  /**
   * <pre>
   * spark udf wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
   * @return Whether the sparkUdfWrapperExpr field is set.
   */
  @java.lang.Override
  public boolean hasSparkUdfWrapperExpr() {
    return exprTypeCase_ == 10000;
  }
  /**
   * <pre>
   * spark udf wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
   * @return The sparkUdfWrapperExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode getSparkUdfWrapperExpr() {
    if (exprTypeCase_ == 10000) {
       return (org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * spark udf wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSparkUDFWrapperExprNodeOrBuilder getSparkUdfWrapperExprOrBuilder() {
    if (exprTypeCase_ == 10000) {
       return (org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.getDefaultInstance();
  }

  public static final int SPARK_SCALAR_SUBQUERY_WRAPPER_EXPR_FIELD_NUMBER = 10001;
  /**
   * <pre>
   * spark scalar subquery wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
   * @return Whether the sparkScalarSubqueryWrapperExpr field is set.
   */
  @java.lang.Override
  public boolean hasSparkScalarSubqueryWrapperExpr() {
    return exprTypeCase_ == 10001;
  }
  /**
   * <pre>
   * spark scalar subquery wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
   * @return The sparkScalarSubqueryWrapperExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode getSparkScalarSubqueryWrapperExpr() {
    if (exprTypeCase_ == 10001) {
       return (org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * spark scalar subquery wrapper
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNodeOrBuilder getSparkScalarSubqueryWrapperExprOrBuilder() {
    if (exprTypeCase_ == 10001) {
       return (org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.getDefaultInstance();
  }

  public static final int GET_INDEXED_FIELD_EXPR_FIELD_NUMBER = 10002;
  /**
   * <pre>
   * GetIndexedField
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
   * @return Whether the getIndexedFieldExpr field is set.
   */
  @java.lang.Override
  public boolean hasGetIndexedFieldExpr() {
    return exprTypeCase_ == 10002;
  }
  /**
   * <pre>
   * GetIndexedField
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
   * @return The getIndexedFieldExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalGetIndexedFieldExprNode getGetIndexedFieldExpr() {
    if (exprTypeCase_ == 10002) {
       return (org.blaze.protobuf.PhysicalGetIndexedFieldExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * GetIndexedField
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalGetIndexedFieldExprNodeOrBuilder getGetIndexedFieldExprOrBuilder() {
    if (exprTypeCase_ == 10002) {
       return (org.blaze.protobuf.PhysicalGetIndexedFieldExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.getDefaultInstance();
  }

  public static final int GET_MAP_VALUE_EXPR_FIELD_NUMBER = 10003;
  /**
   * <pre>
   * GetMapValue
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
   * @return Whether the getMapValueExpr field is set.
   */
  @java.lang.Override
  public boolean hasGetMapValueExpr() {
    return exprTypeCase_ == 10003;
  }
  /**
   * <pre>
   * GetMapValue
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
   * @return The getMapValueExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalGetMapValueExprNode getGetMapValueExpr() {
    if (exprTypeCase_ == 10003) {
       return (org.blaze.protobuf.PhysicalGetMapValueExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalGetMapValueExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * GetMapValue
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalGetMapValueExprNodeOrBuilder getGetMapValueExprOrBuilder() {
    if (exprTypeCase_ == 10003) {
       return (org.blaze.protobuf.PhysicalGetMapValueExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalGetMapValueExprNode.getDefaultInstance();
  }

  public static final int NAMED_STRUCT_FIELD_NUMBER = 11000;
  /**
   * <pre>
   * CreateNamedStruct
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
   * @return Whether the namedStruct field is set.
   */
  @java.lang.Override
  public boolean hasNamedStruct() {
    return exprTypeCase_ == 11000;
  }
  /**
   * <pre>
   * CreateNamedStruct
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
   * @return The namedStruct.
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalNamedStructExprNode getNamedStruct() {
    if (exprTypeCase_ == 11000) {
       return (org.blaze.protobuf.PhysicalNamedStructExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalNamedStructExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * CreateNamedStruct
   * </pre>
   *
   * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.PhysicalNamedStructExprNodeOrBuilder getNamedStructOrBuilder() {
    if (exprTypeCase_ == 11000) {
       return (org.blaze.protobuf.PhysicalNamedStructExprNode) exprType_;
    }
    return org.blaze.protobuf.PhysicalNamedStructExprNode.getDefaultInstance();
  }

  public static final int STRING_STARTS_WITH_EXPR_FIELD_NUMBER = 20000;
  /**
   * <pre>
   * string expressions
   * </pre>
   *
   * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
   * @return Whether the stringStartsWithExpr field is set.
   */
  @java.lang.Override
  public boolean hasStringStartsWithExpr() {
    return exprTypeCase_ == 20000;
  }
  /**
   * <pre>
   * string expressions
   * </pre>
   *
   * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
   * @return The stringStartsWithExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.StringStartsWithExprNode getStringStartsWithExpr() {
    if (exprTypeCase_ == 20000) {
       return (org.blaze.protobuf.StringStartsWithExprNode) exprType_;
    }
    return org.blaze.protobuf.StringStartsWithExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * string expressions
   * </pre>
   *
   * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.StringStartsWithExprNodeOrBuilder getStringStartsWithExprOrBuilder() {
    if (exprTypeCase_ == 20000) {
       return (org.blaze.protobuf.StringStartsWithExprNode) exprType_;
    }
    return org.blaze.protobuf.StringStartsWithExprNode.getDefaultInstance();
  }

  public static final int STRING_ENDS_WITH_EXPR_FIELD_NUMBER = 20001;
  /**
   * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
   * @return Whether the stringEndsWithExpr field is set.
   */
  @java.lang.Override
  public boolean hasStringEndsWithExpr() {
    return exprTypeCase_ == 20001;
  }
  /**
   * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
   * @return The stringEndsWithExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.StringEndsWithExprNode getStringEndsWithExpr() {
    if (exprTypeCase_ == 20001) {
       return (org.blaze.protobuf.StringEndsWithExprNode) exprType_;
    }
    return org.blaze.protobuf.StringEndsWithExprNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.StringEndsWithExprNodeOrBuilder getStringEndsWithExprOrBuilder() {
    if (exprTypeCase_ == 20001) {
       return (org.blaze.protobuf.StringEndsWithExprNode) exprType_;
    }
    return org.blaze.protobuf.StringEndsWithExprNode.getDefaultInstance();
  }

  public static final int STRING_CONTAINS_EXPR_FIELD_NUMBER = 20002;
  /**
   * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
   * @return Whether the stringContainsExpr field is set.
   */
  @java.lang.Override
  public boolean hasStringContainsExpr() {
    return exprTypeCase_ == 20002;
  }
  /**
   * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
   * @return The stringContainsExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.StringContainsExprNode getStringContainsExpr() {
    if (exprTypeCase_ == 20002) {
       return (org.blaze.protobuf.StringContainsExprNode) exprType_;
    }
    return org.blaze.protobuf.StringContainsExprNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.StringContainsExprNodeOrBuilder getStringContainsExprOrBuilder() {
    if (exprTypeCase_ == 20002) {
       return (org.blaze.protobuf.StringContainsExprNode) exprType_;
    }
    return org.blaze.protobuf.StringContainsExprNode.getDefaultInstance();
  }

  public static final int ROW_NUM_EXPR_FIELD_NUMBER = 20100;
  /**
   * <pre>
   * RowNum
   * </pre>
   *
   * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
   * @return Whether the rowNumExpr field is set.
   */
  @java.lang.Override
  public boolean hasRowNumExpr() {
    return exprTypeCase_ == 20100;
  }
  /**
   * <pre>
   * RowNum
   * </pre>
   *
   * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
   * @return The rowNumExpr.
   */
  @java.lang.Override
  public org.blaze.protobuf.RowNumExprNode getRowNumExpr() {
    if (exprTypeCase_ == 20100) {
       return (org.blaze.protobuf.RowNumExprNode) exprType_;
    }
    return org.blaze.protobuf.RowNumExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * RowNum
   * </pre>
   *
   * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.RowNumExprNodeOrBuilder getRowNumExprOrBuilder() {
    if (exprTypeCase_ == 20100) {
       return (org.blaze.protobuf.RowNumExprNode) exprType_;
    }
    return org.blaze.protobuf.RowNumExprNode.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (exprTypeCase_ == 1) {
      output.writeMessage(1, (org.blaze.protobuf.PhysicalColumn) exprType_);
    }
    if (exprTypeCase_ == 2) {
      output.writeMessage(2, (org.blaze.protobuf.ScalarValue) exprType_);
    }
    if (exprTypeCase_ == 3) {
      output.writeMessage(3, (org.blaze.protobuf.BoundReference) exprType_);
    }
    if (exprTypeCase_ == 4) {
      output.writeMessage(4, (org.blaze.protobuf.PhysicalBinaryExprNode) exprType_);
    }
    if (exprTypeCase_ == 5) {
      output.writeMessage(5, (org.blaze.protobuf.PhysicalAggExprNode) exprType_);
    }
    if (exprTypeCase_ == 6) {
      output.writeMessage(6, (org.blaze.protobuf.PhysicalIsNull) exprType_);
    }
    if (exprTypeCase_ == 7) {
      output.writeMessage(7, (org.blaze.protobuf.PhysicalIsNotNull) exprType_);
    }
    if (exprTypeCase_ == 8) {
      output.writeMessage(8, (org.blaze.protobuf.PhysicalNot) exprType_);
    }
    if (exprTypeCase_ == 9) {
      output.writeMessage(9, (org.blaze.protobuf.PhysicalCaseNode) exprType_);
    }
    if (exprTypeCase_ == 10) {
      output.writeMessage(10, (org.blaze.protobuf.PhysicalCastNode) exprType_);
    }
    if (exprTypeCase_ == 11) {
      output.writeMessage(11, (org.blaze.protobuf.PhysicalSortExprNode) exprType_);
    }
    if (exprTypeCase_ == 12) {
      output.writeMessage(12, (org.blaze.protobuf.PhysicalNegativeNode) exprType_);
    }
    if (exprTypeCase_ == 13) {
      output.writeMessage(13, (org.blaze.protobuf.PhysicalInListNode) exprType_);
    }
    if (exprTypeCase_ == 14) {
      output.writeMessage(14, (org.blaze.protobuf.PhysicalScalarFunctionNode) exprType_);
    }
    if (exprTypeCase_ == 15) {
      output.writeMessage(15, (org.blaze.protobuf.PhysicalTryCastNode) exprType_);
    }
    if (exprTypeCase_ == 20) {
      output.writeMessage(20, (org.blaze.protobuf.PhysicalLikeExprNode) exprType_);
    }
    if (exprTypeCase_ == 3000) {
      output.writeMessage(3000, (org.blaze.protobuf.PhysicalSCAndExprNode) exprType_);
    }
    if (exprTypeCase_ == 3001) {
      output.writeMessage(3001, (org.blaze.protobuf.PhysicalSCOrExprNode) exprType_);
    }
    if (exprTypeCase_ == 10000) {
      output.writeMessage(10000, (org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode) exprType_);
    }
    if (exprTypeCase_ == 10001) {
      output.writeMessage(10001, (org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode) exprType_);
    }
    if (exprTypeCase_ == 10002) {
      output.writeMessage(10002, (org.blaze.protobuf.PhysicalGetIndexedFieldExprNode) exprType_);
    }
    if (exprTypeCase_ == 10003) {
      output.writeMessage(10003, (org.blaze.protobuf.PhysicalGetMapValueExprNode) exprType_);
    }
    if (exprTypeCase_ == 11000) {
      output.writeMessage(11000, (org.blaze.protobuf.PhysicalNamedStructExprNode) exprType_);
    }
    if (exprTypeCase_ == 20000) {
      output.writeMessage(20000, (org.blaze.protobuf.StringStartsWithExprNode) exprType_);
    }
    if (exprTypeCase_ == 20001) {
      output.writeMessage(20001, (org.blaze.protobuf.StringEndsWithExprNode) exprType_);
    }
    if (exprTypeCase_ == 20002) {
      output.writeMessage(20002, (org.blaze.protobuf.StringContainsExprNode) exprType_);
    }
    if (exprTypeCase_ == 20100) {
      output.writeMessage(20100, (org.blaze.protobuf.RowNumExprNode) exprType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (exprTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.blaze.protobuf.PhysicalColumn) exprType_);
    }
    if (exprTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.blaze.protobuf.ScalarValue) exprType_);
    }
    if (exprTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.blaze.protobuf.BoundReference) exprType_);
    }
    if (exprTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.blaze.protobuf.PhysicalBinaryExprNode) exprType_);
    }
    if (exprTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.blaze.protobuf.PhysicalAggExprNode) exprType_);
    }
    if (exprTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.blaze.protobuf.PhysicalIsNull) exprType_);
    }
    if (exprTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.blaze.protobuf.PhysicalIsNotNull) exprType_);
    }
    if (exprTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.blaze.protobuf.PhysicalNot) exprType_);
    }
    if (exprTypeCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.blaze.protobuf.PhysicalCaseNode) exprType_);
    }
    if (exprTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (org.blaze.protobuf.PhysicalCastNode) exprType_);
    }
    if (exprTypeCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (org.blaze.protobuf.PhysicalSortExprNode) exprType_);
    }
    if (exprTypeCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (org.blaze.protobuf.PhysicalNegativeNode) exprType_);
    }
    if (exprTypeCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (org.blaze.protobuf.PhysicalInListNode) exprType_);
    }
    if (exprTypeCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (org.blaze.protobuf.PhysicalScalarFunctionNode) exprType_);
    }
    if (exprTypeCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (org.blaze.protobuf.PhysicalTryCastNode) exprType_);
    }
    if (exprTypeCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (org.blaze.protobuf.PhysicalLikeExprNode) exprType_);
    }
    if (exprTypeCase_ == 3000) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3000, (org.blaze.protobuf.PhysicalSCAndExprNode) exprType_);
    }
    if (exprTypeCase_ == 3001) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3001, (org.blaze.protobuf.PhysicalSCOrExprNode) exprType_);
    }
    if (exprTypeCase_ == 10000) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10000, (org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode) exprType_);
    }
    if (exprTypeCase_ == 10001) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10001, (org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode) exprType_);
    }
    if (exprTypeCase_ == 10002) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10002, (org.blaze.protobuf.PhysicalGetIndexedFieldExprNode) exprType_);
    }
    if (exprTypeCase_ == 10003) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10003, (org.blaze.protobuf.PhysicalGetMapValueExprNode) exprType_);
    }
    if (exprTypeCase_ == 11000) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11000, (org.blaze.protobuf.PhysicalNamedStructExprNode) exprType_);
    }
    if (exprTypeCase_ == 20000) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20000, (org.blaze.protobuf.StringStartsWithExprNode) exprType_);
    }
    if (exprTypeCase_ == 20001) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20001, (org.blaze.protobuf.StringEndsWithExprNode) exprType_);
    }
    if (exprTypeCase_ == 20002) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20002, (org.blaze.protobuf.StringContainsExprNode) exprType_);
    }
    if (exprTypeCase_ == 20100) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20100, (org.blaze.protobuf.RowNumExprNode) exprType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.blaze.protobuf.PhysicalExprNode)) {
      return super.equals(obj);
    }
    org.blaze.protobuf.PhysicalExprNode other = (org.blaze.protobuf.PhysicalExprNode) obj;

    if (!getExprTypeCase().equals(other.getExprTypeCase())) return false;
    switch (exprTypeCase_) {
      case 1:
        if (!getColumn()
            .equals(other.getColumn())) return false;
        break;
      case 2:
        if (!getLiteral()
            .equals(other.getLiteral())) return false;
        break;
      case 3:
        if (!getBoundReference()
            .equals(other.getBoundReference())) return false;
        break;
      case 4:
        if (!getBinaryExpr()
            .equals(other.getBinaryExpr())) return false;
        break;
      case 5:
        if (!getAggExpr()
            .equals(other.getAggExpr())) return false;
        break;
      case 6:
        if (!getIsNullExpr()
            .equals(other.getIsNullExpr())) return false;
        break;
      case 7:
        if (!getIsNotNullExpr()
            .equals(other.getIsNotNullExpr())) return false;
        break;
      case 8:
        if (!getNotExpr()
            .equals(other.getNotExpr())) return false;
        break;
      case 9:
        if (!getCase()
            .equals(other.getCase())) return false;
        break;
      case 10:
        if (!getCast()
            .equals(other.getCast())) return false;
        break;
      case 11:
        if (!getSort()
            .equals(other.getSort())) return false;
        break;
      case 12:
        if (!getNegative()
            .equals(other.getNegative())) return false;
        break;
      case 13:
        if (!getInList()
            .equals(other.getInList())) return false;
        break;
      case 14:
        if (!getScalarFunction()
            .equals(other.getScalarFunction())) return false;
        break;
      case 15:
        if (!getTryCast()
            .equals(other.getTryCast())) return false;
        break;
      case 20:
        if (!getLikeExpr()
            .equals(other.getLikeExpr())) return false;
        break;
      case 3000:
        if (!getScAndExpr()
            .equals(other.getScAndExpr())) return false;
        break;
      case 3001:
        if (!getScOrExpr()
            .equals(other.getScOrExpr())) return false;
        break;
      case 10000:
        if (!getSparkUdfWrapperExpr()
            .equals(other.getSparkUdfWrapperExpr())) return false;
        break;
      case 10001:
        if (!getSparkScalarSubqueryWrapperExpr()
            .equals(other.getSparkScalarSubqueryWrapperExpr())) return false;
        break;
      case 10002:
        if (!getGetIndexedFieldExpr()
            .equals(other.getGetIndexedFieldExpr())) return false;
        break;
      case 10003:
        if (!getGetMapValueExpr()
            .equals(other.getGetMapValueExpr())) return false;
        break;
      case 11000:
        if (!getNamedStruct()
            .equals(other.getNamedStruct())) return false;
        break;
      case 20000:
        if (!getStringStartsWithExpr()
            .equals(other.getStringStartsWithExpr())) return false;
        break;
      case 20001:
        if (!getStringEndsWithExpr()
            .equals(other.getStringEndsWithExpr())) return false;
        break;
      case 20002:
        if (!getStringContainsExpr()
            .equals(other.getStringContainsExpr())) return false;
        break;
      case 20100:
        if (!getRowNumExpr()
            .equals(other.getRowNumExpr())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (exprTypeCase_) {
      case 1:
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumn().hashCode();
        break;
      case 2:
        hash = (37 * hash) + LITERAL_FIELD_NUMBER;
        hash = (53 * hash) + getLiteral().hashCode();
        break;
      case 3:
        hash = (37 * hash) + BOUND_REFERENCE_FIELD_NUMBER;
        hash = (53 * hash) + getBoundReference().hashCode();
        break;
      case 4:
        hash = (37 * hash) + BINARY_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getBinaryExpr().hashCode();
        break;
      case 5:
        hash = (37 * hash) + AGG_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getAggExpr().hashCode();
        break;
      case 6:
        hash = (37 * hash) + IS_NULL_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getIsNullExpr().hashCode();
        break;
      case 7:
        hash = (37 * hash) + IS_NOT_NULL_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getIsNotNullExpr().hashCode();
        break;
      case 8:
        hash = (37 * hash) + NOT_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getNotExpr().hashCode();
        break;
      case 9:
        hash = (37 * hash) + CASE__FIELD_NUMBER;
        hash = (53 * hash) + getCase().hashCode();
        break;
      case 10:
        hash = (37 * hash) + CAST_FIELD_NUMBER;
        hash = (53 * hash) + getCast().hashCode();
        break;
      case 11:
        hash = (37 * hash) + SORT_FIELD_NUMBER;
        hash = (53 * hash) + getSort().hashCode();
        break;
      case 12:
        hash = (37 * hash) + NEGATIVE_FIELD_NUMBER;
        hash = (53 * hash) + getNegative().hashCode();
        break;
      case 13:
        hash = (37 * hash) + IN_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getInList().hashCode();
        break;
      case 14:
        hash = (37 * hash) + SCALAR_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getScalarFunction().hashCode();
        break;
      case 15:
        hash = (37 * hash) + TRY_CAST_FIELD_NUMBER;
        hash = (53 * hash) + getTryCast().hashCode();
        break;
      case 20:
        hash = (37 * hash) + LIKE_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getLikeExpr().hashCode();
        break;
      case 3000:
        hash = (37 * hash) + SC_AND_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getScAndExpr().hashCode();
        break;
      case 3001:
        hash = (37 * hash) + SC_OR_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getScOrExpr().hashCode();
        break;
      case 10000:
        hash = (37 * hash) + SPARK_UDF_WRAPPER_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getSparkUdfWrapperExpr().hashCode();
        break;
      case 10001:
        hash = (37 * hash) + SPARK_SCALAR_SUBQUERY_WRAPPER_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getSparkScalarSubqueryWrapperExpr().hashCode();
        break;
      case 10002:
        hash = (37 * hash) + GET_INDEXED_FIELD_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getGetIndexedFieldExpr().hashCode();
        break;
      case 10003:
        hash = (37 * hash) + GET_MAP_VALUE_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getGetMapValueExpr().hashCode();
        break;
      case 11000:
        hash = (37 * hash) + NAMED_STRUCT_FIELD_NUMBER;
        hash = (53 * hash) + getNamedStruct().hashCode();
        break;
      case 20000:
        hash = (37 * hash) + STRING_STARTS_WITH_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getStringStartsWithExpr().hashCode();
        break;
      case 20001:
        hash = (37 * hash) + STRING_ENDS_WITH_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getStringEndsWithExpr().hashCode();
        break;
      case 20002:
        hash = (37 * hash) + STRING_CONTAINS_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getStringContainsExpr().hashCode();
        break;
      case 20100:
        hash = (37 * hash) + ROW_NUM_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getRowNumExpr().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.blaze.protobuf.PhysicalExprNode parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.blaze.protobuf.PhysicalExprNode parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.blaze.protobuf.PhysicalExprNode prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * physical expressions
   * </pre>
   *
   * Protobuf type {@code plan.protobuf.PhysicalExprNode}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:plan.protobuf.PhysicalExprNode)
      org.blaze.protobuf.PhysicalExprNodeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalExprNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalExprNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.blaze.protobuf.PhysicalExprNode.class, org.blaze.protobuf.PhysicalExprNode.Builder.class);
    }

    // Construct using org.blaze.protobuf.PhysicalExprNode.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (columnBuilder_ != null) {
        columnBuilder_.clear();
      }
      if (literalBuilder_ != null) {
        literalBuilder_.clear();
      }
      if (boundReferenceBuilder_ != null) {
        boundReferenceBuilder_.clear();
      }
      if (binaryExprBuilder_ != null) {
        binaryExprBuilder_.clear();
      }
      if (aggExprBuilder_ != null) {
        aggExprBuilder_.clear();
      }
      if (isNullExprBuilder_ != null) {
        isNullExprBuilder_.clear();
      }
      if (isNotNullExprBuilder_ != null) {
        isNotNullExprBuilder_.clear();
      }
      if (notExprBuilder_ != null) {
        notExprBuilder_.clear();
      }
      if (caseBuilder_ != null) {
        caseBuilder_.clear();
      }
      if (castBuilder_ != null) {
        castBuilder_.clear();
      }
      if (sortBuilder_ != null) {
        sortBuilder_.clear();
      }
      if (negativeBuilder_ != null) {
        negativeBuilder_.clear();
      }
      if (inListBuilder_ != null) {
        inListBuilder_.clear();
      }
      if (scalarFunctionBuilder_ != null) {
        scalarFunctionBuilder_.clear();
      }
      if (tryCastBuilder_ != null) {
        tryCastBuilder_.clear();
      }
      if (likeExprBuilder_ != null) {
        likeExprBuilder_.clear();
      }
      if (scAndExprBuilder_ != null) {
        scAndExprBuilder_.clear();
      }
      if (scOrExprBuilder_ != null) {
        scOrExprBuilder_.clear();
      }
      if (sparkUdfWrapperExprBuilder_ != null) {
        sparkUdfWrapperExprBuilder_.clear();
      }
      if (sparkScalarSubqueryWrapperExprBuilder_ != null) {
        sparkScalarSubqueryWrapperExprBuilder_.clear();
      }
      if (getIndexedFieldExprBuilder_ != null) {
        getIndexedFieldExprBuilder_.clear();
      }
      if (getMapValueExprBuilder_ != null) {
        getMapValueExprBuilder_.clear();
      }
      if (namedStructBuilder_ != null) {
        namedStructBuilder_.clear();
      }
      if (stringStartsWithExprBuilder_ != null) {
        stringStartsWithExprBuilder_.clear();
      }
      if (stringEndsWithExprBuilder_ != null) {
        stringEndsWithExprBuilder_.clear();
      }
      if (stringContainsExprBuilder_ != null) {
        stringContainsExprBuilder_.clear();
      }
      if (rowNumExprBuilder_ != null) {
        rowNumExprBuilder_.clear();
      }
      exprTypeCase_ = 0;
      exprType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalExprNode_descriptor;
    }

    @java.lang.Override
    public org.blaze.protobuf.PhysicalExprNode getDefaultInstanceForType() {
      return org.blaze.protobuf.PhysicalExprNode.getDefaultInstance();
    }

    @java.lang.Override
    public org.blaze.protobuf.PhysicalExprNode build() {
      org.blaze.protobuf.PhysicalExprNode result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.blaze.protobuf.PhysicalExprNode buildPartial() {
      org.blaze.protobuf.PhysicalExprNode result = new org.blaze.protobuf.PhysicalExprNode(this);
      if (exprTypeCase_ == 1) {
        if (columnBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = columnBuilder_.build();
        }
      }
      if (exprTypeCase_ == 2) {
        if (literalBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = literalBuilder_.build();
        }
      }
      if (exprTypeCase_ == 3) {
        if (boundReferenceBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = boundReferenceBuilder_.build();
        }
      }
      if (exprTypeCase_ == 4) {
        if (binaryExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = binaryExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 5) {
        if (aggExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = aggExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 6) {
        if (isNullExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = isNullExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 7) {
        if (isNotNullExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = isNotNullExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 8) {
        if (notExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = notExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 9) {
        if (caseBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = caseBuilder_.build();
        }
      }
      if (exprTypeCase_ == 10) {
        if (castBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = castBuilder_.build();
        }
      }
      if (exprTypeCase_ == 11) {
        if (sortBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = sortBuilder_.build();
        }
      }
      if (exprTypeCase_ == 12) {
        if (negativeBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = negativeBuilder_.build();
        }
      }
      if (exprTypeCase_ == 13) {
        if (inListBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = inListBuilder_.build();
        }
      }
      if (exprTypeCase_ == 14) {
        if (scalarFunctionBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = scalarFunctionBuilder_.build();
        }
      }
      if (exprTypeCase_ == 15) {
        if (tryCastBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = tryCastBuilder_.build();
        }
      }
      if (exprTypeCase_ == 20) {
        if (likeExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = likeExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 3000) {
        if (scAndExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = scAndExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 3001) {
        if (scOrExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = scOrExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 10000) {
        if (sparkUdfWrapperExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = sparkUdfWrapperExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 10001) {
        if (sparkScalarSubqueryWrapperExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = sparkScalarSubqueryWrapperExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 10002) {
        if (getIndexedFieldExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = getIndexedFieldExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 10003) {
        if (getMapValueExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = getMapValueExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 11000) {
        if (namedStructBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = namedStructBuilder_.build();
        }
      }
      if (exprTypeCase_ == 20000) {
        if (stringStartsWithExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = stringStartsWithExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 20001) {
        if (stringEndsWithExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = stringEndsWithExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 20002) {
        if (stringContainsExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = stringContainsExprBuilder_.build();
        }
      }
      if (exprTypeCase_ == 20100) {
        if (rowNumExprBuilder_ == null) {
          result.exprType_ = exprType_;
        } else {
          result.exprType_ = rowNumExprBuilder_.build();
        }
      }
      result.exprTypeCase_ = exprTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.blaze.protobuf.PhysicalExprNode) {
        return mergeFrom((org.blaze.protobuf.PhysicalExprNode)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.blaze.protobuf.PhysicalExprNode other) {
      if (other == org.blaze.protobuf.PhysicalExprNode.getDefaultInstance()) return this;
      switch (other.getExprTypeCase()) {
        case COLUMN: {
          mergeColumn(other.getColumn());
          break;
        }
        case LITERAL: {
          mergeLiteral(other.getLiteral());
          break;
        }
        case BOUND_REFERENCE: {
          mergeBoundReference(other.getBoundReference());
          break;
        }
        case BINARY_EXPR: {
          mergeBinaryExpr(other.getBinaryExpr());
          break;
        }
        case AGG_EXPR: {
          mergeAggExpr(other.getAggExpr());
          break;
        }
        case IS_NULL_EXPR: {
          mergeIsNullExpr(other.getIsNullExpr());
          break;
        }
        case IS_NOT_NULL_EXPR: {
          mergeIsNotNullExpr(other.getIsNotNullExpr());
          break;
        }
        case NOT_EXPR: {
          mergeNotExpr(other.getNotExpr());
          break;
        }
        case CASE_: {
          mergeCase(other.getCase());
          break;
        }
        case CAST: {
          mergeCast(other.getCast());
          break;
        }
        case SORT: {
          mergeSort(other.getSort());
          break;
        }
        case NEGATIVE: {
          mergeNegative(other.getNegative());
          break;
        }
        case IN_LIST: {
          mergeInList(other.getInList());
          break;
        }
        case SCALAR_FUNCTION: {
          mergeScalarFunction(other.getScalarFunction());
          break;
        }
        case TRY_CAST: {
          mergeTryCast(other.getTryCast());
          break;
        }
        case LIKE_EXPR: {
          mergeLikeExpr(other.getLikeExpr());
          break;
        }
        case SC_AND_EXPR: {
          mergeScAndExpr(other.getScAndExpr());
          break;
        }
        case SC_OR_EXPR: {
          mergeScOrExpr(other.getScOrExpr());
          break;
        }
        case SPARK_UDF_WRAPPER_EXPR: {
          mergeSparkUdfWrapperExpr(other.getSparkUdfWrapperExpr());
          break;
        }
        case SPARK_SCALAR_SUBQUERY_WRAPPER_EXPR: {
          mergeSparkScalarSubqueryWrapperExpr(other.getSparkScalarSubqueryWrapperExpr());
          break;
        }
        case GET_INDEXED_FIELD_EXPR: {
          mergeGetIndexedFieldExpr(other.getGetIndexedFieldExpr());
          break;
        }
        case GET_MAP_VALUE_EXPR: {
          mergeGetMapValueExpr(other.getGetMapValueExpr());
          break;
        }
        case NAMED_STRUCT: {
          mergeNamedStruct(other.getNamedStruct());
          break;
        }
        case STRING_STARTS_WITH_EXPR: {
          mergeStringStartsWithExpr(other.getStringStartsWithExpr());
          break;
        }
        case STRING_ENDS_WITH_EXPR: {
          mergeStringEndsWithExpr(other.getStringEndsWithExpr());
          break;
        }
        case STRING_CONTAINS_EXPR: {
          mergeStringContainsExpr(other.getStringContainsExpr());
          break;
        }
        case ROW_NUM_EXPR: {
          mergeRowNumExpr(other.getRowNumExpr());
          break;
        }
        case EXPRTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getColumnFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getLiteralFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getBoundReferenceFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getBinaryExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getAggExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getIsNullExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getIsNotNullExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 7;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getNotExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 8;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getCaseFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 9;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getCastFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 10;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getSortFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 11;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getNegativeFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 12;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getInListFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 13;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getScalarFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 14;
              break;
            } // case 114
            case 122: {
              input.readMessage(
                  getTryCastFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 15;
              break;
            } // case 122
            case 162: {
              input.readMessage(
                  getLikeExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 20;
              break;
            } // case 162
            case 24002: {
              input.readMessage(
                  getScAndExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 3000;
              break;
            } // case 24002
            case 24010: {
              input.readMessage(
                  getScOrExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 3001;
              break;
            } // case 24010
            case 80002: {
              input.readMessage(
                  getSparkUdfWrapperExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 10000;
              break;
            } // case 80002
            case 80010: {
              input.readMessage(
                  getSparkScalarSubqueryWrapperExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 10001;
              break;
            } // case 80010
            case 80018: {
              input.readMessage(
                  getGetIndexedFieldExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 10002;
              break;
            } // case 80018
            case 80026: {
              input.readMessage(
                  getGetMapValueExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 10003;
              break;
            } // case 80026
            case 88002: {
              input.readMessage(
                  getNamedStructFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 11000;
              break;
            } // case 88002
            case 160002: {
              input.readMessage(
                  getStringStartsWithExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 20000;
              break;
            } // case 160002
            case 160010: {
              input.readMessage(
                  getStringEndsWithExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 20001;
              break;
            } // case 160010
            case 160018: {
              input.readMessage(
                  getStringContainsExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 20002;
              break;
            } // case 160018
            case 160802: {
              input.readMessage(
                  getRowNumExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 20100;
              break;
            } // case 160802
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int exprTypeCase_ = 0;
    private java.lang.Object exprType_;
    public ExprTypeCase
        getExprTypeCase() {
      return ExprTypeCase.forNumber(
          exprTypeCase_);
    }

    public Builder clearExprType() {
      exprTypeCase_ = 0;
      exprType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalColumn, org.blaze.protobuf.PhysicalColumn.Builder, org.blaze.protobuf.PhysicalColumnOrBuilder> columnBuilder_;
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
     * @return Whether the column field is set.
     */
    @java.lang.Override
    public boolean hasColumn() {
      return exprTypeCase_ == 1;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
     * @return The column.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalColumn getColumn() {
      if (columnBuilder_ == null) {
        if (exprTypeCase_ == 1) {
          return (org.blaze.protobuf.PhysicalColumn) exprType_;
        }
        return org.blaze.protobuf.PhysicalColumn.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 1) {
          return columnBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalColumn.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
     */
    public Builder setColumn(org.blaze.protobuf.PhysicalColumn value) {
      if (columnBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        columnBuilder_.setMessage(value);
      }
      exprTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
     */
    public Builder setColumn(
        org.blaze.protobuf.PhysicalColumn.Builder builderForValue) {
      if (columnBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        columnBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
     */
    public Builder mergeColumn(org.blaze.protobuf.PhysicalColumn value) {
      if (columnBuilder_ == null) {
        if (exprTypeCase_ == 1 &&
            exprType_ != org.blaze.protobuf.PhysicalColumn.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalColumn.newBuilder((org.blaze.protobuf.PhysicalColumn) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 1) {
          columnBuilder_.mergeFrom(value);
        } else {
          columnBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
     */
    public Builder clearColumn() {
      if (columnBuilder_ == null) {
        if (exprTypeCase_ == 1) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 1) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        columnBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
     */
    public org.blaze.protobuf.PhysicalColumn.Builder getColumnBuilder() {
      return getColumnFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalColumnOrBuilder getColumnOrBuilder() {
      if ((exprTypeCase_ == 1) && (columnBuilder_ != null)) {
        return columnBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 1) {
          return (org.blaze.protobuf.PhysicalColumn) exprType_;
        }
        return org.blaze.protobuf.PhysicalColumn.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalColumn column = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalColumn, org.blaze.protobuf.PhysicalColumn.Builder, org.blaze.protobuf.PhysicalColumnOrBuilder> 
        getColumnFieldBuilder() {
      if (columnBuilder_ == null) {
        if (!(exprTypeCase_ == 1)) {
          exprType_ = org.blaze.protobuf.PhysicalColumn.getDefaultInstance();
        }
        columnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalColumn, org.blaze.protobuf.PhysicalColumn.Builder, org.blaze.protobuf.PhysicalColumnOrBuilder>(
                (org.blaze.protobuf.PhysicalColumn) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 1;
      onChanged();;
      return columnBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ScalarValue, org.blaze.protobuf.ScalarValue.Builder, org.blaze.protobuf.ScalarValueOrBuilder> literalBuilder_;
    /**
     * <code>.plan.protobuf.ScalarValue literal = 2;</code>
     * @return Whether the literal field is set.
     */
    @java.lang.Override
    public boolean hasLiteral() {
      return exprTypeCase_ == 2;
    }
    /**
     * <code>.plan.protobuf.ScalarValue literal = 2;</code>
     * @return The literal.
     */
    @java.lang.Override
    public org.blaze.protobuf.ScalarValue getLiteral() {
      if (literalBuilder_ == null) {
        if (exprTypeCase_ == 2) {
          return (org.blaze.protobuf.ScalarValue) exprType_;
        }
        return org.blaze.protobuf.ScalarValue.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 2) {
          return literalBuilder_.getMessage();
        }
        return org.blaze.protobuf.ScalarValue.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ScalarValue literal = 2;</code>
     */
    public Builder setLiteral(org.blaze.protobuf.ScalarValue value) {
      if (literalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        literalBuilder_.setMessage(value);
      }
      exprTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.plan.protobuf.ScalarValue literal = 2;</code>
     */
    public Builder setLiteral(
        org.blaze.protobuf.ScalarValue.Builder builderForValue) {
      if (literalBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        literalBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.plan.protobuf.ScalarValue literal = 2;</code>
     */
    public Builder mergeLiteral(org.blaze.protobuf.ScalarValue value) {
      if (literalBuilder_ == null) {
        if (exprTypeCase_ == 2 &&
            exprType_ != org.blaze.protobuf.ScalarValue.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.ScalarValue.newBuilder((org.blaze.protobuf.ScalarValue) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 2) {
          literalBuilder_.mergeFrom(value);
        } else {
          literalBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.plan.protobuf.ScalarValue literal = 2;</code>
     */
    public Builder clearLiteral() {
      if (literalBuilder_ == null) {
        if (exprTypeCase_ == 2) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 2) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        literalBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ScalarValue literal = 2;</code>
     */
    public org.blaze.protobuf.ScalarValue.Builder getLiteralBuilder() {
      return getLiteralFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ScalarValue literal = 2;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ScalarValueOrBuilder getLiteralOrBuilder() {
      if ((exprTypeCase_ == 2) && (literalBuilder_ != null)) {
        return literalBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 2) {
          return (org.blaze.protobuf.ScalarValue) exprType_;
        }
        return org.blaze.protobuf.ScalarValue.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ScalarValue literal = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ScalarValue, org.blaze.protobuf.ScalarValue.Builder, org.blaze.protobuf.ScalarValueOrBuilder> 
        getLiteralFieldBuilder() {
      if (literalBuilder_ == null) {
        if (!(exprTypeCase_ == 2)) {
          exprType_ = org.blaze.protobuf.ScalarValue.getDefaultInstance();
        }
        literalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ScalarValue, org.blaze.protobuf.ScalarValue.Builder, org.blaze.protobuf.ScalarValueOrBuilder>(
                (org.blaze.protobuf.ScalarValue) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 2;
      onChanged();;
      return literalBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.BoundReference, org.blaze.protobuf.BoundReference.Builder, org.blaze.protobuf.BoundReferenceOrBuilder> boundReferenceBuilder_;
    /**
     * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
     * @return Whether the boundReference field is set.
     */
    @java.lang.Override
    public boolean hasBoundReference() {
      return exprTypeCase_ == 3;
    }
    /**
     * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
     * @return The boundReference.
     */
    @java.lang.Override
    public org.blaze.protobuf.BoundReference getBoundReference() {
      if (boundReferenceBuilder_ == null) {
        if (exprTypeCase_ == 3) {
          return (org.blaze.protobuf.BoundReference) exprType_;
        }
        return org.blaze.protobuf.BoundReference.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 3) {
          return boundReferenceBuilder_.getMessage();
        }
        return org.blaze.protobuf.BoundReference.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
     */
    public Builder setBoundReference(org.blaze.protobuf.BoundReference value) {
      if (boundReferenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        boundReferenceBuilder_.setMessage(value);
      }
      exprTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
     */
    public Builder setBoundReference(
        org.blaze.protobuf.BoundReference.Builder builderForValue) {
      if (boundReferenceBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        boundReferenceBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
     */
    public Builder mergeBoundReference(org.blaze.protobuf.BoundReference value) {
      if (boundReferenceBuilder_ == null) {
        if (exprTypeCase_ == 3 &&
            exprType_ != org.blaze.protobuf.BoundReference.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.BoundReference.newBuilder((org.blaze.protobuf.BoundReference) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 3) {
          boundReferenceBuilder_.mergeFrom(value);
        } else {
          boundReferenceBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
     */
    public Builder clearBoundReference() {
      if (boundReferenceBuilder_ == null) {
        if (exprTypeCase_ == 3) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 3) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        boundReferenceBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
     */
    public org.blaze.protobuf.BoundReference.Builder getBoundReferenceBuilder() {
      return getBoundReferenceFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.BoundReferenceOrBuilder getBoundReferenceOrBuilder() {
      if ((exprTypeCase_ == 3) && (boundReferenceBuilder_ != null)) {
        return boundReferenceBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 3) {
          return (org.blaze.protobuf.BoundReference) exprType_;
        }
        return org.blaze.protobuf.BoundReference.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.BoundReference bound_reference = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.BoundReference, org.blaze.protobuf.BoundReference.Builder, org.blaze.protobuf.BoundReferenceOrBuilder> 
        getBoundReferenceFieldBuilder() {
      if (boundReferenceBuilder_ == null) {
        if (!(exprTypeCase_ == 3)) {
          exprType_ = org.blaze.protobuf.BoundReference.getDefaultInstance();
        }
        boundReferenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.BoundReference, org.blaze.protobuf.BoundReference.Builder, org.blaze.protobuf.BoundReferenceOrBuilder>(
                (org.blaze.protobuf.BoundReference) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 3;
      onChanged();;
      return boundReferenceBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalBinaryExprNode, org.blaze.protobuf.PhysicalBinaryExprNode.Builder, org.blaze.protobuf.PhysicalBinaryExprNodeOrBuilder> binaryExprBuilder_;
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
     * @return Whether the binaryExpr field is set.
     */
    @java.lang.Override
    public boolean hasBinaryExpr() {
      return exprTypeCase_ == 4;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
     * @return The binaryExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalBinaryExprNode getBinaryExpr() {
      if (binaryExprBuilder_ == null) {
        if (exprTypeCase_ == 4) {
          return (org.blaze.protobuf.PhysicalBinaryExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalBinaryExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 4) {
          return binaryExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalBinaryExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
     */
    public Builder setBinaryExpr(org.blaze.protobuf.PhysicalBinaryExprNode value) {
      if (binaryExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        binaryExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
     */
    public Builder setBinaryExpr(
        org.blaze.protobuf.PhysicalBinaryExprNode.Builder builderForValue) {
      if (binaryExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        binaryExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
     */
    public Builder mergeBinaryExpr(org.blaze.protobuf.PhysicalBinaryExprNode value) {
      if (binaryExprBuilder_ == null) {
        if (exprTypeCase_ == 4 &&
            exprType_ != org.blaze.protobuf.PhysicalBinaryExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalBinaryExprNode.newBuilder((org.blaze.protobuf.PhysicalBinaryExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 4) {
          binaryExprBuilder_.mergeFrom(value);
        } else {
          binaryExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
     */
    public Builder clearBinaryExpr() {
      if (binaryExprBuilder_ == null) {
        if (exprTypeCase_ == 4) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 4) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        binaryExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
     */
    public org.blaze.protobuf.PhysicalBinaryExprNode.Builder getBinaryExprBuilder() {
      return getBinaryExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalBinaryExprNodeOrBuilder getBinaryExprOrBuilder() {
      if ((exprTypeCase_ == 4) && (binaryExprBuilder_ != null)) {
        return binaryExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 4) {
          return (org.blaze.protobuf.PhysicalBinaryExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalBinaryExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalBinaryExprNode binary_expr = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalBinaryExprNode, org.blaze.protobuf.PhysicalBinaryExprNode.Builder, org.blaze.protobuf.PhysicalBinaryExprNodeOrBuilder> 
        getBinaryExprFieldBuilder() {
      if (binaryExprBuilder_ == null) {
        if (!(exprTypeCase_ == 4)) {
          exprType_ = org.blaze.protobuf.PhysicalBinaryExprNode.getDefaultInstance();
        }
        binaryExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalBinaryExprNode, org.blaze.protobuf.PhysicalBinaryExprNode.Builder, org.blaze.protobuf.PhysicalBinaryExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalBinaryExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 4;
      onChanged();;
      return binaryExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalAggExprNode, org.blaze.protobuf.PhysicalAggExprNode.Builder, org.blaze.protobuf.PhysicalAggExprNodeOrBuilder> aggExprBuilder_;
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
     * @return Whether the aggExpr field is set.
     */
    @java.lang.Override
    public boolean hasAggExpr() {
      return exprTypeCase_ == 5;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
     * @return The aggExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalAggExprNode getAggExpr() {
      if (aggExprBuilder_ == null) {
        if (exprTypeCase_ == 5) {
          return (org.blaze.protobuf.PhysicalAggExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalAggExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 5) {
          return aggExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalAggExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
     */
    public Builder setAggExpr(org.blaze.protobuf.PhysicalAggExprNode value) {
      if (aggExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        aggExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
     */
    public Builder setAggExpr(
        org.blaze.protobuf.PhysicalAggExprNode.Builder builderForValue) {
      if (aggExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        aggExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
     */
    public Builder mergeAggExpr(org.blaze.protobuf.PhysicalAggExprNode value) {
      if (aggExprBuilder_ == null) {
        if (exprTypeCase_ == 5 &&
            exprType_ != org.blaze.protobuf.PhysicalAggExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalAggExprNode.newBuilder((org.blaze.protobuf.PhysicalAggExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 5) {
          aggExprBuilder_.mergeFrom(value);
        } else {
          aggExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
     */
    public Builder clearAggExpr() {
      if (aggExprBuilder_ == null) {
        if (exprTypeCase_ == 5) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 5) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        aggExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
     */
    public org.blaze.protobuf.PhysicalAggExprNode.Builder getAggExprBuilder() {
      return getAggExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalAggExprNodeOrBuilder getAggExprOrBuilder() {
      if ((exprTypeCase_ == 5) && (aggExprBuilder_ != null)) {
        return aggExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 5) {
          return (org.blaze.protobuf.PhysicalAggExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalAggExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalAggExprNode agg_expr = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalAggExprNode, org.blaze.protobuf.PhysicalAggExprNode.Builder, org.blaze.protobuf.PhysicalAggExprNodeOrBuilder> 
        getAggExprFieldBuilder() {
      if (aggExprBuilder_ == null) {
        if (!(exprTypeCase_ == 5)) {
          exprType_ = org.blaze.protobuf.PhysicalAggExprNode.getDefaultInstance();
        }
        aggExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalAggExprNode, org.blaze.protobuf.PhysicalAggExprNode.Builder, org.blaze.protobuf.PhysicalAggExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalAggExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 5;
      onChanged();;
      return aggExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalIsNull, org.blaze.protobuf.PhysicalIsNull.Builder, org.blaze.protobuf.PhysicalIsNullOrBuilder> isNullExprBuilder_;
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
     * @return Whether the isNullExpr field is set.
     */
    @java.lang.Override
    public boolean hasIsNullExpr() {
      return exprTypeCase_ == 6;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
     * @return The isNullExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalIsNull getIsNullExpr() {
      if (isNullExprBuilder_ == null) {
        if (exprTypeCase_ == 6) {
          return (org.blaze.protobuf.PhysicalIsNull) exprType_;
        }
        return org.blaze.protobuf.PhysicalIsNull.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 6) {
          return isNullExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalIsNull.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
     */
    public Builder setIsNullExpr(org.blaze.protobuf.PhysicalIsNull value) {
      if (isNullExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isNullExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
     */
    public Builder setIsNullExpr(
        org.blaze.protobuf.PhysicalIsNull.Builder builderForValue) {
      if (isNullExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isNullExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
     */
    public Builder mergeIsNullExpr(org.blaze.protobuf.PhysicalIsNull value) {
      if (isNullExprBuilder_ == null) {
        if (exprTypeCase_ == 6 &&
            exprType_ != org.blaze.protobuf.PhysicalIsNull.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalIsNull.newBuilder((org.blaze.protobuf.PhysicalIsNull) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 6) {
          isNullExprBuilder_.mergeFrom(value);
        } else {
          isNullExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
     */
    public Builder clearIsNullExpr() {
      if (isNullExprBuilder_ == null) {
        if (exprTypeCase_ == 6) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 6) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isNullExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
     */
    public org.blaze.protobuf.PhysicalIsNull.Builder getIsNullExprBuilder() {
      return getIsNullExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalIsNullOrBuilder getIsNullExprOrBuilder() {
      if ((exprTypeCase_ == 6) && (isNullExprBuilder_ != null)) {
        return isNullExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 6) {
          return (org.blaze.protobuf.PhysicalIsNull) exprType_;
        }
        return org.blaze.protobuf.PhysicalIsNull.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalIsNull is_null_expr = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalIsNull, org.blaze.protobuf.PhysicalIsNull.Builder, org.blaze.protobuf.PhysicalIsNullOrBuilder> 
        getIsNullExprFieldBuilder() {
      if (isNullExprBuilder_ == null) {
        if (!(exprTypeCase_ == 6)) {
          exprType_ = org.blaze.protobuf.PhysicalIsNull.getDefaultInstance();
        }
        isNullExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalIsNull, org.blaze.protobuf.PhysicalIsNull.Builder, org.blaze.protobuf.PhysicalIsNullOrBuilder>(
                (org.blaze.protobuf.PhysicalIsNull) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 6;
      onChanged();;
      return isNullExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalIsNotNull, org.blaze.protobuf.PhysicalIsNotNull.Builder, org.blaze.protobuf.PhysicalIsNotNullOrBuilder> isNotNullExprBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
     * @return Whether the isNotNullExpr field is set.
     */
    @java.lang.Override
    public boolean hasIsNotNullExpr() {
      return exprTypeCase_ == 7;
    }
    /**
     * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
     * @return The isNotNullExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalIsNotNull getIsNotNullExpr() {
      if (isNotNullExprBuilder_ == null) {
        if (exprTypeCase_ == 7) {
          return (org.blaze.protobuf.PhysicalIsNotNull) exprType_;
        }
        return org.blaze.protobuf.PhysicalIsNotNull.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 7) {
          return isNotNullExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalIsNotNull.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
     */
    public Builder setIsNotNullExpr(org.blaze.protobuf.PhysicalIsNotNull value) {
      if (isNotNullExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isNotNullExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
     */
    public Builder setIsNotNullExpr(
        org.blaze.protobuf.PhysicalIsNotNull.Builder builderForValue) {
      if (isNotNullExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isNotNullExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
     */
    public Builder mergeIsNotNullExpr(org.blaze.protobuf.PhysicalIsNotNull value) {
      if (isNotNullExprBuilder_ == null) {
        if (exprTypeCase_ == 7 &&
            exprType_ != org.blaze.protobuf.PhysicalIsNotNull.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalIsNotNull.newBuilder((org.blaze.protobuf.PhysicalIsNotNull) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 7) {
          isNotNullExprBuilder_.mergeFrom(value);
        } else {
          isNotNullExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
     */
    public Builder clearIsNotNullExpr() {
      if (isNotNullExprBuilder_ == null) {
        if (exprTypeCase_ == 7) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 7) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isNotNullExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
     */
    public org.blaze.protobuf.PhysicalIsNotNull.Builder getIsNotNullExprBuilder() {
      return getIsNotNullExprFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalIsNotNullOrBuilder getIsNotNullExprOrBuilder() {
      if ((exprTypeCase_ == 7) && (isNotNullExprBuilder_ != null)) {
        return isNotNullExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 7) {
          return (org.blaze.protobuf.PhysicalIsNotNull) exprType_;
        }
        return org.blaze.protobuf.PhysicalIsNotNull.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalIsNotNull is_not_null_expr = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalIsNotNull, org.blaze.protobuf.PhysicalIsNotNull.Builder, org.blaze.protobuf.PhysicalIsNotNullOrBuilder> 
        getIsNotNullExprFieldBuilder() {
      if (isNotNullExprBuilder_ == null) {
        if (!(exprTypeCase_ == 7)) {
          exprType_ = org.blaze.protobuf.PhysicalIsNotNull.getDefaultInstance();
        }
        isNotNullExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalIsNotNull, org.blaze.protobuf.PhysicalIsNotNull.Builder, org.blaze.protobuf.PhysicalIsNotNullOrBuilder>(
                (org.blaze.protobuf.PhysicalIsNotNull) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 7;
      onChanged();;
      return isNotNullExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalNot, org.blaze.protobuf.PhysicalNot.Builder, org.blaze.protobuf.PhysicalNotOrBuilder> notExprBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
     * @return Whether the notExpr field is set.
     */
    @java.lang.Override
    public boolean hasNotExpr() {
      return exprTypeCase_ == 8;
    }
    /**
     * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
     * @return The notExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalNot getNotExpr() {
      if (notExprBuilder_ == null) {
        if (exprTypeCase_ == 8) {
          return (org.blaze.protobuf.PhysicalNot) exprType_;
        }
        return org.blaze.protobuf.PhysicalNot.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 8) {
          return notExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalNot.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
     */
    public Builder setNotExpr(org.blaze.protobuf.PhysicalNot value) {
      if (notExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        notExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
     */
    public Builder setNotExpr(
        org.blaze.protobuf.PhysicalNot.Builder builderForValue) {
      if (notExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        notExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
     */
    public Builder mergeNotExpr(org.blaze.protobuf.PhysicalNot value) {
      if (notExprBuilder_ == null) {
        if (exprTypeCase_ == 8 &&
            exprType_ != org.blaze.protobuf.PhysicalNot.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalNot.newBuilder((org.blaze.protobuf.PhysicalNot) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 8) {
          notExprBuilder_.mergeFrom(value);
        } else {
          notExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
     */
    public Builder clearNotExpr() {
      if (notExprBuilder_ == null) {
        if (exprTypeCase_ == 8) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 8) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        notExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
     */
    public org.blaze.protobuf.PhysicalNot.Builder getNotExprBuilder() {
      return getNotExprFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalNotOrBuilder getNotExprOrBuilder() {
      if ((exprTypeCase_ == 8) && (notExprBuilder_ != null)) {
        return notExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 8) {
          return (org.blaze.protobuf.PhysicalNot) exprType_;
        }
        return org.blaze.protobuf.PhysicalNot.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalNot not_expr = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalNot, org.blaze.protobuf.PhysicalNot.Builder, org.blaze.protobuf.PhysicalNotOrBuilder> 
        getNotExprFieldBuilder() {
      if (notExprBuilder_ == null) {
        if (!(exprTypeCase_ == 8)) {
          exprType_ = org.blaze.protobuf.PhysicalNot.getDefaultInstance();
        }
        notExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalNot, org.blaze.protobuf.PhysicalNot.Builder, org.blaze.protobuf.PhysicalNotOrBuilder>(
                (org.blaze.protobuf.PhysicalNot) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 8;
      onChanged();;
      return notExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalCaseNode, org.blaze.protobuf.PhysicalCaseNode.Builder, org.blaze.protobuf.PhysicalCaseNodeOrBuilder> caseBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
     * @return Whether the case field is set.
     */
    @java.lang.Override
    public boolean hasCase() {
      return exprTypeCase_ == 9;
    }
    /**
     * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
     * @return The case.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalCaseNode getCase() {
      if (caseBuilder_ == null) {
        if (exprTypeCase_ == 9) {
          return (org.blaze.protobuf.PhysicalCaseNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalCaseNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 9) {
          return caseBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalCaseNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
     */
    public Builder setCase(org.blaze.protobuf.PhysicalCaseNode value) {
      if (caseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        caseBuilder_.setMessage(value);
      }
      exprTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
     */
    public Builder setCase(
        org.blaze.protobuf.PhysicalCaseNode.Builder builderForValue) {
      if (caseBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        caseBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
     */
    public Builder mergeCase(org.blaze.protobuf.PhysicalCaseNode value) {
      if (caseBuilder_ == null) {
        if (exprTypeCase_ == 9 &&
            exprType_ != org.blaze.protobuf.PhysicalCaseNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalCaseNode.newBuilder((org.blaze.protobuf.PhysicalCaseNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 9) {
          caseBuilder_.mergeFrom(value);
        } else {
          caseBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
     */
    public Builder clearCase() {
      if (caseBuilder_ == null) {
        if (exprTypeCase_ == 9) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 9) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        caseBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
     */
    public org.blaze.protobuf.PhysicalCaseNode.Builder getCaseBuilder() {
      return getCaseFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalCaseNodeOrBuilder getCaseOrBuilder() {
      if ((exprTypeCase_ == 9) && (caseBuilder_ != null)) {
        return caseBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 9) {
          return (org.blaze.protobuf.PhysicalCaseNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalCaseNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalCaseNode case_ = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalCaseNode, org.blaze.protobuf.PhysicalCaseNode.Builder, org.blaze.protobuf.PhysicalCaseNodeOrBuilder> 
        getCaseFieldBuilder() {
      if (caseBuilder_ == null) {
        if (!(exprTypeCase_ == 9)) {
          exprType_ = org.blaze.protobuf.PhysicalCaseNode.getDefaultInstance();
        }
        caseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalCaseNode, org.blaze.protobuf.PhysicalCaseNode.Builder, org.blaze.protobuf.PhysicalCaseNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalCaseNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 9;
      onChanged();;
      return caseBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalCastNode, org.blaze.protobuf.PhysicalCastNode.Builder, org.blaze.protobuf.PhysicalCastNodeOrBuilder> castBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
     * @return Whether the cast field is set.
     */
    @java.lang.Override
    public boolean hasCast() {
      return exprTypeCase_ == 10;
    }
    /**
     * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
     * @return The cast.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalCastNode getCast() {
      if (castBuilder_ == null) {
        if (exprTypeCase_ == 10) {
          return (org.blaze.protobuf.PhysicalCastNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalCastNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 10) {
          return castBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalCastNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
     */
    public Builder setCast(org.blaze.protobuf.PhysicalCastNode value) {
      if (castBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        castBuilder_.setMessage(value);
      }
      exprTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
     */
    public Builder setCast(
        org.blaze.protobuf.PhysicalCastNode.Builder builderForValue) {
      if (castBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        castBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
     */
    public Builder mergeCast(org.blaze.protobuf.PhysicalCastNode value) {
      if (castBuilder_ == null) {
        if (exprTypeCase_ == 10 &&
            exprType_ != org.blaze.protobuf.PhysicalCastNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalCastNode.newBuilder((org.blaze.protobuf.PhysicalCastNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 10) {
          castBuilder_.mergeFrom(value);
        } else {
          castBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
     */
    public Builder clearCast() {
      if (castBuilder_ == null) {
        if (exprTypeCase_ == 10) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 10) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        castBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
     */
    public org.blaze.protobuf.PhysicalCastNode.Builder getCastBuilder() {
      return getCastFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalCastNodeOrBuilder getCastOrBuilder() {
      if ((exprTypeCase_ == 10) && (castBuilder_ != null)) {
        return castBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 10) {
          return (org.blaze.protobuf.PhysicalCastNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalCastNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalCastNode cast = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalCastNode, org.blaze.protobuf.PhysicalCastNode.Builder, org.blaze.protobuf.PhysicalCastNodeOrBuilder> 
        getCastFieldBuilder() {
      if (castBuilder_ == null) {
        if (!(exprTypeCase_ == 10)) {
          exprType_ = org.blaze.protobuf.PhysicalCastNode.getDefaultInstance();
        }
        castBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalCastNode, org.blaze.protobuf.PhysicalCastNode.Builder, org.blaze.protobuf.PhysicalCastNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalCastNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 10;
      onChanged();;
      return castBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSortExprNode, org.blaze.protobuf.PhysicalSortExprNode.Builder, org.blaze.protobuf.PhysicalSortExprNodeOrBuilder> sortBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
     * @return Whether the sort field is set.
     */
    @java.lang.Override
    public boolean hasSort() {
      return exprTypeCase_ == 11;
    }
    /**
     * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
     * @return The sort.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSortExprNode getSort() {
      if (sortBuilder_ == null) {
        if (exprTypeCase_ == 11) {
          return (org.blaze.protobuf.PhysicalSortExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSortExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 11) {
          return sortBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalSortExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
     */
    public Builder setSort(org.blaze.protobuf.PhysicalSortExprNode value) {
      if (sortBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        sortBuilder_.setMessage(value);
      }
      exprTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
     */
    public Builder setSort(
        org.blaze.protobuf.PhysicalSortExprNode.Builder builderForValue) {
      if (sortBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        sortBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
     */
    public Builder mergeSort(org.blaze.protobuf.PhysicalSortExprNode value) {
      if (sortBuilder_ == null) {
        if (exprTypeCase_ == 11 &&
            exprType_ != org.blaze.protobuf.PhysicalSortExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalSortExprNode.newBuilder((org.blaze.protobuf.PhysicalSortExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 11) {
          sortBuilder_.mergeFrom(value);
        } else {
          sortBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
     */
    public Builder clearSort() {
      if (sortBuilder_ == null) {
        if (exprTypeCase_ == 11) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 11) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        sortBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
     */
    public org.blaze.protobuf.PhysicalSortExprNode.Builder getSortBuilder() {
      return getSortFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSortExprNodeOrBuilder getSortOrBuilder() {
      if ((exprTypeCase_ == 11) && (sortBuilder_ != null)) {
        return sortBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 11) {
          return (org.blaze.protobuf.PhysicalSortExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSortExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalSortExprNode sort = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSortExprNode, org.blaze.protobuf.PhysicalSortExprNode.Builder, org.blaze.protobuf.PhysicalSortExprNodeOrBuilder> 
        getSortFieldBuilder() {
      if (sortBuilder_ == null) {
        if (!(exprTypeCase_ == 11)) {
          exprType_ = org.blaze.protobuf.PhysicalSortExprNode.getDefaultInstance();
        }
        sortBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalSortExprNode, org.blaze.protobuf.PhysicalSortExprNode.Builder, org.blaze.protobuf.PhysicalSortExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalSortExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 11;
      onChanged();;
      return sortBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalNegativeNode, org.blaze.protobuf.PhysicalNegativeNode.Builder, org.blaze.protobuf.PhysicalNegativeNodeOrBuilder> negativeBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
     * @return Whether the negative field is set.
     */
    @java.lang.Override
    public boolean hasNegative() {
      return exprTypeCase_ == 12;
    }
    /**
     * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
     * @return The negative.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalNegativeNode getNegative() {
      if (negativeBuilder_ == null) {
        if (exprTypeCase_ == 12) {
          return (org.blaze.protobuf.PhysicalNegativeNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalNegativeNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 12) {
          return negativeBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalNegativeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
     */
    public Builder setNegative(org.blaze.protobuf.PhysicalNegativeNode value) {
      if (negativeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        negativeBuilder_.setMessage(value);
      }
      exprTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
     */
    public Builder setNegative(
        org.blaze.protobuf.PhysicalNegativeNode.Builder builderForValue) {
      if (negativeBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        negativeBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
     */
    public Builder mergeNegative(org.blaze.protobuf.PhysicalNegativeNode value) {
      if (negativeBuilder_ == null) {
        if (exprTypeCase_ == 12 &&
            exprType_ != org.blaze.protobuf.PhysicalNegativeNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalNegativeNode.newBuilder((org.blaze.protobuf.PhysicalNegativeNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 12) {
          negativeBuilder_.mergeFrom(value);
        } else {
          negativeBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
     */
    public Builder clearNegative() {
      if (negativeBuilder_ == null) {
        if (exprTypeCase_ == 12) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 12) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        negativeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
     */
    public org.blaze.protobuf.PhysicalNegativeNode.Builder getNegativeBuilder() {
      return getNegativeFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalNegativeNodeOrBuilder getNegativeOrBuilder() {
      if ((exprTypeCase_ == 12) && (negativeBuilder_ != null)) {
        return negativeBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 12) {
          return (org.blaze.protobuf.PhysicalNegativeNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalNegativeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalNegativeNode negative = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalNegativeNode, org.blaze.protobuf.PhysicalNegativeNode.Builder, org.blaze.protobuf.PhysicalNegativeNodeOrBuilder> 
        getNegativeFieldBuilder() {
      if (negativeBuilder_ == null) {
        if (!(exprTypeCase_ == 12)) {
          exprType_ = org.blaze.protobuf.PhysicalNegativeNode.getDefaultInstance();
        }
        negativeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalNegativeNode, org.blaze.protobuf.PhysicalNegativeNode.Builder, org.blaze.protobuf.PhysicalNegativeNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalNegativeNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 12;
      onChanged();;
      return negativeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalInListNode, org.blaze.protobuf.PhysicalInListNode.Builder, org.blaze.protobuf.PhysicalInListNodeOrBuilder> inListBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
     * @return Whether the inList field is set.
     */
    @java.lang.Override
    public boolean hasInList() {
      return exprTypeCase_ == 13;
    }
    /**
     * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
     * @return The inList.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalInListNode getInList() {
      if (inListBuilder_ == null) {
        if (exprTypeCase_ == 13) {
          return (org.blaze.protobuf.PhysicalInListNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalInListNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 13) {
          return inListBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalInListNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
     */
    public Builder setInList(org.blaze.protobuf.PhysicalInListNode value) {
      if (inListBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        inListBuilder_.setMessage(value);
      }
      exprTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
     */
    public Builder setInList(
        org.blaze.protobuf.PhysicalInListNode.Builder builderForValue) {
      if (inListBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        inListBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
     */
    public Builder mergeInList(org.blaze.protobuf.PhysicalInListNode value) {
      if (inListBuilder_ == null) {
        if (exprTypeCase_ == 13 &&
            exprType_ != org.blaze.protobuf.PhysicalInListNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalInListNode.newBuilder((org.blaze.protobuf.PhysicalInListNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 13) {
          inListBuilder_.mergeFrom(value);
        } else {
          inListBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
     */
    public Builder clearInList() {
      if (inListBuilder_ == null) {
        if (exprTypeCase_ == 13) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 13) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        inListBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
     */
    public org.blaze.protobuf.PhysicalInListNode.Builder getInListBuilder() {
      return getInListFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalInListNodeOrBuilder getInListOrBuilder() {
      if ((exprTypeCase_ == 13) && (inListBuilder_ != null)) {
        return inListBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 13) {
          return (org.blaze.protobuf.PhysicalInListNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalInListNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalInListNode in_list = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalInListNode, org.blaze.protobuf.PhysicalInListNode.Builder, org.blaze.protobuf.PhysicalInListNodeOrBuilder> 
        getInListFieldBuilder() {
      if (inListBuilder_ == null) {
        if (!(exprTypeCase_ == 13)) {
          exprType_ = org.blaze.protobuf.PhysicalInListNode.getDefaultInstance();
        }
        inListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalInListNode, org.blaze.protobuf.PhysicalInListNode.Builder, org.blaze.protobuf.PhysicalInListNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalInListNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 13;
      onChanged();;
      return inListBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalScalarFunctionNode, org.blaze.protobuf.PhysicalScalarFunctionNode.Builder, org.blaze.protobuf.PhysicalScalarFunctionNodeOrBuilder> scalarFunctionBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
     * @return Whether the scalarFunction field is set.
     */
    @java.lang.Override
    public boolean hasScalarFunction() {
      return exprTypeCase_ == 14;
    }
    /**
     * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
     * @return The scalarFunction.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalScalarFunctionNode getScalarFunction() {
      if (scalarFunctionBuilder_ == null) {
        if (exprTypeCase_ == 14) {
          return (org.blaze.protobuf.PhysicalScalarFunctionNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalScalarFunctionNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 14) {
          return scalarFunctionBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalScalarFunctionNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
     */
    public Builder setScalarFunction(org.blaze.protobuf.PhysicalScalarFunctionNode value) {
      if (scalarFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        scalarFunctionBuilder_.setMessage(value);
      }
      exprTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
     */
    public Builder setScalarFunction(
        org.blaze.protobuf.PhysicalScalarFunctionNode.Builder builderForValue) {
      if (scalarFunctionBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        scalarFunctionBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
     */
    public Builder mergeScalarFunction(org.blaze.protobuf.PhysicalScalarFunctionNode value) {
      if (scalarFunctionBuilder_ == null) {
        if (exprTypeCase_ == 14 &&
            exprType_ != org.blaze.protobuf.PhysicalScalarFunctionNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalScalarFunctionNode.newBuilder((org.blaze.protobuf.PhysicalScalarFunctionNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 14) {
          scalarFunctionBuilder_.mergeFrom(value);
        } else {
          scalarFunctionBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
     */
    public Builder clearScalarFunction() {
      if (scalarFunctionBuilder_ == null) {
        if (exprTypeCase_ == 14) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 14) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        scalarFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
     */
    public org.blaze.protobuf.PhysicalScalarFunctionNode.Builder getScalarFunctionBuilder() {
      return getScalarFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalScalarFunctionNodeOrBuilder getScalarFunctionOrBuilder() {
      if ((exprTypeCase_ == 14) && (scalarFunctionBuilder_ != null)) {
        return scalarFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 14) {
          return (org.blaze.protobuf.PhysicalScalarFunctionNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalScalarFunctionNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalScalarFunctionNode scalar_function = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalScalarFunctionNode, org.blaze.protobuf.PhysicalScalarFunctionNode.Builder, org.blaze.protobuf.PhysicalScalarFunctionNodeOrBuilder> 
        getScalarFunctionFieldBuilder() {
      if (scalarFunctionBuilder_ == null) {
        if (!(exprTypeCase_ == 14)) {
          exprType_ = org.blaze.protobuf.PhysicalScalarFunctionNode.getDefaultInstance();
        }
        scalarFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalScalarFunctionNode, org.blaze.protobuf.PhysicalScalarFunctionNode.Builder, org.blaze.protobuf.PhysicalScalarFunctionNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalScalarFunctionNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 14;
      onChanged();;
      return scalarFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalTryCastNode, org.blaze.protobuf.PhysicalTryCastNode.Builder, org.blaze.protobuf.PhysicalTryCastNodeOrBuilder> tryCastBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
     * @return Whether the tryCast field is set.
     */
    @java.lang.Override
    public boolean hasTryCast() {
      return exprTypeCase_ == 15;
    }
    /**
     * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
     * @return The tryCast.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalTryCastNode getTryCast() {
      if (tryCastBuilder_ == null) {
        if (exprTypeCase_ == 15) {
          return (org.blaze.protobuf.PhysicalTryCastNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalTryCastNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 15) {
          return tryCastBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalTryCastNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
     */
    public Builder setTryCast(org.blaze.protobuf.PhysicalTryCastNode value) {
      if (tryCastBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        tryCastBuilder_.setMessage(value);
      }
      exprTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
     */
    public Builder setTryCast(
        org.blaze.protobuf.PhysicalTryCastNode.Builder builderForValue) {
      if (tryCastBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        tryCastBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
     */
    public Builder mergeTryCast(org.blaze.protobuf.PhysicalTryCastNode value) {
      if (tryCastBuilder_ == null) {
        if (exprTypeCase_ == 15 &&
            exprType_ != org.blaze.protobuf.PhysicalTryCastNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalTryCastNode.newBuilder((org.blaze.protobuf.PhysicalTryCastNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 15) {
          tryCastBuilder_.mergeFrom(value);
        } else {
          tryCastBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
     */
    public Builder clearTryCast() {
      if (tryCastBuilder_ == null) {
        if (exprTypeCase_ == 15) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 15) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        tryCastBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
     */
    public org.blaze.protobuf.PhysicalTryCastNode.Builder getTryCastBuilder() {
      return getTryCastFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalTryCastNodeOrBuilder getTryCastOrBuilder() {
      if ((exprTypeCase_ == 15) && (tryCastBuilder_ != null)) {
        return tryCastBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 15) {
          return (org.blaze.protobuf.PhysicalTryCastNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalTryCastNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalTryCastNode try_cast = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalTryCastNode, org.blaze.protobuf.PhysicalTryCastNode.Builder, org.blaze.protobuf.PhysicalTryCastNodeOrBuilder> 
        getTryCastFieldBuilder() {
      if (tryCastBuilder_ == null) {
        if (!(exprTypeCase_ == 15)) {
          exprType_ = org.blaze.protobuf.PhysicalTryCastNode.getDefaultInstance();
        }
        tryCastBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalTryCastNode, org.blaze.protobuf.PhysicalTryCastNode.Builder, org.blaze.protobuf.PhysicalTryCastNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalTryCastNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 15;
      onChanged();;
      return tryCastBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalLikeExprNode, org.blaze.protobuf.PhysicalLikeExprNode.Builder, org.blaze.protobuf.PhysicalLikeExprNodeOrBuilder> likeExprBuilder_;
    /**
     * <pre>
     * like/not like
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
     * @return Whether the likeExpr field is set.
     */
    @java.lang.Override
    public boolean hasLikeExpr() {
      return exprTypeCase_ == 20;
    }
    /**
     * <pre>
     * like/not like
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
     * @return The likeExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalLikeExprNode getLikeExpr() {
      if (likeExprBuilder_ == null) {
        if (exprTypeCase_ == 20) {
          return (org.blaze.protobuf.PhysicalLikeExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalLikeExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 20) {
          return likeExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalLikeExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * like/not like
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
     */
    public Builder setLikeExpr(org.blaze.protobuf.PhysicalLikeExprNode value) {
      if (likeExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        likeExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * like/not like
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
     */
    public Builder setLikeExpr(
        org.blaze.protobuf.PhysicalLikeExprNode.Builder builderForValue) {
      if (likeExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        likeExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * like/not like
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
     */
    public Builder mergeLikeExpr(org.blaze.protobuf.PhysicalLikeExprNode value) {
      if (likeExprBuilder_ == null) {
        if (exprTypeCase_ == 20 &&
            exprType_ != org.blaze.protobuf.PhysicalLikeExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalLikeExprNode.newBuilder((org.blaze.protobuf.PhysicalLikeExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 20) {
          likeExprBuilder_.mergeFrom(value);
        } else {
          likeExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * like/not like
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
     */
    public Builder clearLikeExpr() {
      if (likeExprBuilder_ == null) {
        if (exprTypeCase_ == 20) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 20) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        likeExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * like/not like
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
     */
    public org.blaze.protobuf.PhysicalLikeExprNode.Builder getLikeExprBuilder() {
      return getLikeExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * like/not like
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalLikeExprNodeOrBuilder getLikeExprOrBuilder() {
      if ((exprTypeCase_ == 20) && (likeExprBuilder_ != null)) {
        return likeExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 20) {
          return (org.blaze.protobuf.PhysicalLikeExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalLikeExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * like/not like
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalLikeExprNode like_expr = 20;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalLikeExprNode, org.blaze.protobuf.PhysicalLikeExprNode.Builder, org.blaze.protobuf.PhysicalLikeExprNodeOrBuilder> 
        getLikeExprFieldBuilder() {
      if (likeExprBuilder_ == null) {
        if (!(exprTypeCase_ == 20)) {
          exprType_ = org.blaze.protobuf.PhysicalLikeExprNode.getDefaultInstance();
        }
        likeExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalLikeExprNode, org.blaze.protobuf.PhysicalLikeExprNode.Builder, org.blaze.protobuf.PhysicalLikeExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalLikeExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 20;
      onChanged();;
      return likeExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSCAndExprNode, org.blaze.protobuf.PhysicalSCAndExprNode.Builder, org.blaze.protobuf.PhysicalSCAndExprNodeOrBuilder> scAndExprBuilder_;
    /**
     * <pre>
     * sc_and/or
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
     * @return Whether the scAndExpr field is set.
     */
    @java.lang.Override
    public boolean hasScAndExpr() {
      return exprTypeCase_ == 3000;
    }
    /**
     * <pre>
     * sc_and/or
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
     * @return The scAndExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSCAndExprNode getScAndExpr() {
      if (scAndExprBuilder_ == null) {
        if (exprTypeCase_ == 3000) {
          return (org.blaze.protobuf.PhysicalSCAndExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSCAndExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 3000) {
          return scAndExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalSCAndExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * sc_and/or
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
     */
    public Builder setScAndExpr(org.blaze.protobuf.PhysicalSCAndExprNode value) {
      if (scAndExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        scAndExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 3000;
      return this;
    }
    /**
     * <pre>
     * sc_and/or
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
     */
    public Builder setScAndExpr(
        org.blaze.protobuf.PhysicalSCAndExprNode.Builder builderForValue) {
      if (scAndExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        scAndExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 3000;
      return this;
    }
    /**
     * <pre>
     * sc_and/or
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
     */
    public Builder mergeScAndExpr(org.blaze.protobuf.PhysicalSCAndExprNode value) {
      if (scAndExprBuilder_ == null) {
        if (exprTypeCase_ == 3000 &&
            exprType_ != org.blaze.protobuf.PhysicalSCAndExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalSCAndExprNode.newBuilder((org.blaze.protobuf.PhysicalSCAndExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 3000) {
          scAndExprBuilder_.mergeFrom(value);
        } else {
          scAndExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 3000;
      return this;
    }
    /**
     * <pre>
     * sc_and/or
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
     */
    public Builder clearScAndExpr() {
      if (scAndExprBuilder_ == null) {
        if (exprTypeCase_ == 3000) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 3000) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        scAndExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * sc_and/or
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
     */
    public org.blaze.protobuf.PhysicalSCAndExprNode.Builder getScAndExprBuilder() {
      return getScAndExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * sc_and/or
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSCAndExprNodeOrBuilder getScAndExprOrBuilder() {
      if ((exprTypeCase_ == 3000) && (scAndExprBuilder_ != null)) {
        return scAndExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 3000) {
          return (org.blaze.protobuf.PhysicalSCAndExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSCAndExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * sc_and/or
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSCAndExprNode sc_and_expr = 3000;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSCAndExprNode, org.blaze.protobuf.PhysicalSCAndExprNode.Builder, org.blaze.protobuf.PhysicalSCAndExprNodeOrBuilder> 
        getScAndExprFieldBuilder() {
      if (scAndExprBuilder_ == null) {
        if (!(exprTypeCase_ == 3000)) {
          exprType_ = org.blaze.protobuf.PhysicalSCAndExprNode.getDefaultInstance();
        }
        scAndExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalSCAndExprNode, org.blaze.protobuf.PhysicalSCAndExprNode.Builder, org.blaze.protobuf.PhysicalSCAndExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalSCAndExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 3000;
      onChanged();;
      return scAndExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSCOrExprNode, org.blaze.protobuf.PhysicalSCOrExprNode.Builder, org.blaze.protobuf.PhysicalSCOrExprNodeOrBuilder> scOrExprBuilder_;
    /**
     * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
     * @return Whether the scOrExpr field is set.
     */
    @java.lang.Override
    public boolean hasScOrExpr() {
      return exprTypeCase_ == 3001;
    }
    /**
     * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
     * @return The scOrExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSCOrExprNode getScOrExpr() {
      if (scOrExprBuilder_ == null) {
        if (exprTypeCase_ == 3001) {
          return (org.blaze.protobuf.PhysicalSCOrExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSCOrExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 3001) {
          return scOrExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalSCOrExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
     */
    public Builder setScOrExpr(org.blaze.protobuf.PhysicalSCOrExprNode value) {
      if (scOrExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        scOrExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 3001;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
     */
    public Builder setScOrExpr(
        org.blaze.protobuf.PhysicalSCOrExprNode.Builder builderForValue) {
      if (scOrExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        scOrExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 3001;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
     */
    public Builder mergeScOrExpr(org.blaze.protobuf.PhysicalSCOrExprNode value) {
      if (scOrExprBuilder_ == null) {
        if (exprTypeCase_ == 3001 &&
            exprType_ != org.blaze.protobuf.PhysicalSCOrExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalSCOrExprNode.newBuilder((org.blaze.protobuf.PhysicalSCOrExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 3001) {
          scOrExprBuilder_.mergeFrom(value);
        } else {
          scOrExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 3001;
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
     */
    public Builder clearScOrExpr() {
      if (scOrExprBuilder_ == null) {
        if (exprTypeCase_ == 3001) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 3001) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        scOrExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
     */
    public org.blaze.protobuf.PhysicalSCOrExprNode.Builder getScOrExprBuilder() {
      return getScOrExprFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSCOrExprNodeOrBuilder getScOrExprOrBuilder() {
      if ((exprTypeCase_ == 3001) && (scOrExprBuilder_ != null)) {
        return scOrExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 3001) {
          return (org.blaze.protobuf.PhysicalSCOrExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSCOrExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.PhysicalSCOrExprNode sc_or_expr = 3001;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSCOrExprNode, org.blaze.protobuf.PhysicalSCOrExprNode.Builder, org.blaze.protobuf.PhysicalSCOrExprNodeOrBuilder> 
        getScOrExprFieldBuilder() {
      if (scOrExprBuilder_ == null) {
        if (!(exprTypeCase_ == 3001)) {
          exprType_ = org.blaze.protobuf.PhysicalSCOrExprNode.getDefaultInstance();
        }
        scOrExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalSCOrExprNode, org.blaze.protobuf.PhysicalSCOrExprNode.Builder, org.blaze.protobuf.PhysicalSCOrExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalSCOrExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 3001;
      onChanged();;
      return scOrExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode, org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.Builder, org.blaze.protobuf.PhysicalSparkUDFWrapperExprNodeOrBuilder> sparkUdfWrapperExprBuilder_;
    /**
     * <pre>
     * spark udf wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
     * @return Whether the sparkUdfWrapperExpr field is set.
     */
    @java.lang.Override
    public boolean hasSparkUdfWrapperExpr() {
      return exprTypeCase_ == 10000;
    }
    /**
     * <pre>
     * spark udf wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
     * @return The sparkUdfWrapperExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode getSparkUdfWrapperExpr() {
      if (sparkUdfWrapperExprBuilder_ == null) {
        if (exprTypeCase_ == 10000) {
          return (org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 10000) {
          return sparkUdfWrapperExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * spark udf wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
     */
    public Builder setSparkUdfWrapperExpr(org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode value) {
      if (sparkUdfWrapperExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        sparkUdfWrapperExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 10000;
      return this;
    }
    /**
     * <pre>
     * spark udf wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
     */
    public Builder setSparkUdfWrapperExpr(
        org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.Builder builderForValue) {
      if (sparkUdfWrapperExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        sparkUdfWrapperExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 10000;
      return this;
    }
    /**
     * <pre>
     * spark udf wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
     */
    public Builder mergeSparkUdfWrapperExpr(org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode value) {
      if (sparkUdfWrapperExprBuilder_ == null) {
        if (exprTypeCase_ == 10000 &&
            exprType_ != org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.newBuilder((org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 10000) {
          sparkUdfWrapperExprBuilder_.mergeFrom(value);
        } else {
          sparkUdfWrapperExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 10000;
      return this;
    }
    /**
     * <pre>
     * spark udf wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
     */
    public Builder clearSparkUdfWrapperExpr() {
      if (sparkUdfWrapperExprBuilder_ == null) {
        if (exprTypeCase_ == 10000) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 10000) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        sparkUdfWrapperExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * spark udf wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
     */
    public org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.Builder getSparkUdfWrapperExprBuilder() {
      return getSparkUdfWrapperExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * spark udf wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSparkUDFWrapperExprNodeOrBuilder getSparkUdfWrapperExprOrBuilder() {
      if ((exprTypeCase_ == 10000) && (sparkUdfWrapperExprBuilder_ != null)) {
        return sparkUdfWrapperExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 10000) {
          return (org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * spark udf wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkUDFWrapperExprNode spark_udf_wrapper_expr = 10000;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode, org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.Builder, org.blaze.protobuf.PhysicalSparkUDFWrapperExprNodeOrBuilder> 
        getSparkUdfWrapperExprFieldBuilder() {
      if (sparkUdfWrapperExprBuilder_ == null) {
        if (!(exprTypeCase_ == 10000)) {
          exprType_ = org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.getDefaultInstance();
        }
        sparkUdfWrapperExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode, org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode.Builder, org.blaze.protobuf.PhysicalSparkUDFWrapperExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalSparkUDFWrapperExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 10000;
      onChanged();;
      return sparkUdfWrapperExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode, org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.Builder, org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNodeOrBuilder> sparkScalarSubqueryWrapperExprBuilder_;
    /**
     * <pre>
     * spark scalar subquery wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
     * @return Whether the sparkScalarSubqueryWrapperExpr field is set.
     */
    @java.lang.Override
    public boolean hasSparkScalarSubqueryWrapperExpr() {
      return exprTypeCase_ == 10001;
    }
    /**
     * <pre>
     * spark scalar subquery wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
     * @return The sparkScalarSubqueryWrapperExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode getSparkScalarSubqueryWrapperExpr() {
      if (sparkScalarSubqueryWrapperExprBuilder_ == null) {
        if (exprTypeCase_ == 10001) {
          return (org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 10001) {
          return sparkScalarSubqueryWrapperExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * spark scalar subquery wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
     */
    public Builder setSparkScalarSubqueryWrapperExpr(org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode value) {
      if (sparkScalarSubqueryWrapperExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        sparkScalarSubqueryWrapperExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 10001;
      return this;
    }
    /**
     * <pre>
     * spark scalar subquery wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
     */
    public Builder setSparkScalarSubqueryWrapperExpr(
        org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.Builder builderForValue) {
      if (sparkScalarSubqueryWrapperExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        sparkScalarSubqueryWrapperExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 10001;
      return this;
    }
    /**
     * <pre>
     * spark scalar subquery wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
     */
    public Builder mergeSparkScalarSubqueryWrapperExpr(org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode value) {
      if (sparkScalarSubqueryWrapperExprBuilder_ == null) {
        if (exprTypeCase_ == 10001 &&
            exprType_ != org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.newBuilder((org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 10001) {
          sparkScalarSubqueryWrapperExprBuilder_.mergeFrom(value);
        } else {
          sparkScalarSubqueryWrapperExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 10001;
      return this;
    }
    /**
     * <pre>
     * spark scalar subquery wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
     */
    public Builder clearSparkScalarSubqueryWrapperExpr() {
      if (sparkScalarSubqueryWrapperExprBuilder_ == null) {
        if (exprTypeCase_ == 10001) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 10001) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        sparkScalarSubqueryWrapperExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * spark scalar subquery wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
     */
    public org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.Builder getSparkScalarSubqueryWrapperExprBuilder() {
      return getSparkScalarSubqueryWrapperExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * spark scalar subquery wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNodeOrBuilder getSparkScalarSubqueryWrapperExprOrBuilder() {
      if ((exprTypeCase_ == 10001) && (sparkScalarSubqueryWrapperExprBuilder_ != null)) {
        return sparkScalarSubqueryWrapperExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 10001) {
          return (org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * spark scalar subquery wrapper
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode spark_scalar_subquery_wrapper_expr = 10001;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode, org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.Builder, org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNodeOrBuilder> 
        getSparkScalarSubqueryWrapperExprFieldBuilder() {
      if (sparkScalarSubqueryWrapperExprBuilder_ == null) {
        if (!(exprTypeCase_ == 10001)) {
          exprType_ = org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.getDefaultInstance();
        }
        sparkScalarSubqueryWrapperExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode, org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode.Builder, org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalSparkScalarSubqueryWrapperExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 10001;
      onChanged();;
      return sparkScalarSubqueryWrapperExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalGetIndexedFieldExprNode, org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.Builder, org.blaze.protobuf.PhysicalGetIndexedFieldExprNodeOrBuilder> getIndexedFieldExprBuilder_;
    /**
     * <pre>
     * GetIndexedField
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
     * @return Whether the getIndexedFieldExpr field is set.
     */
    @java.lang.Override
    public boolean hasGetIndexedFieldExpr() {
      return exprTypeCase_ == 10002;
    }
    /**
     * <pre>
     * GetIndexedField
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
     * @return The getIndexedFieldExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalGetIndexedFieldExprNode getGetIndexedFieldExpr() {
      if (getIndexedFieldExprBuilder_ == null) {
        if (exprTypeCase_ == 10002) {
          return (org.blaze.protobuf.PhysicalGetIndexedFieldExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 10002) {
          return getIndexedFieldExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * GetIndexedField
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
     */
    public Builder setGetIndexedFieldExpr(org.blaze.protobuf.PhysicalGetIndexedFieldExprNode value) {
      if (getIndexedFieldExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        getIndexedFieldExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 10002;
      return this;
    }
    /**
     * <pre>
     * GetIndexedField
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
     */
    public Builder setGetIndexedFieldExpr(
        org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.Builder builderForValue) {
      if (getIndexedFieldExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        getIndexedFieldExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 10002;
      return this;
    }
    /**
     * <pre>
     * GetIndexedField
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
     */
    public Builder mergeGetIndexedFieldExpr(org.blaze.protobuf.PhysicalGetIndexedFieldExprNode value) {
      if (getIndexedFieldExprBuilder_ == null) {
        if (exprTypeCase_ == 10002 &&
            exprType_ != org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.newBuilder((org.blaze.protobuf.PhysicalGetIndexedFieldExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 10002) {
          getIndexedFieldExprBuilder_.mergeFrom(value);
        } else {
          getIndexedFieldExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 10002;
      return this;
    }
    /**
     * <pre>
     * GetIndexedField
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
     */
    public Builder clearGetIndexedFieldExpr() {
      if (getIndexedFieldExprBuilder_ == null) {
        if (exprTypeCase_ == 10002) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 10002) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        getIndexedFieldExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * GetIndexedField
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
     */
    public org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.Builder getGetIndexedFieldExprBuilder() {
      return getGetIndexedFieldExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * GetIndexedField
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalGetIndexedFieldExprNodeOrBuilder getGetIndexedFieldExprOrBuilder() {
      if ((exprTypeCase_ == 10002) && (getIndexedFieldExprBuilder_ != null)) {
        return getIndexedFieldExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 10002) {
          return (org.blaze.protobuf.PhysicalGetIndexedFieldExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * GetIndexedField
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetIndexedFieldExprNode get_indexed_field_expr = 10002;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalGetIndexedFieldExprNode, org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.Builder, org.blaze.protobuf.PhysicalGetIndexedFieldExprNodeOrBuilder> 
        getGetIndexedFieldExprFieldBuilder() {
      if (getIndexedFieldExprBuilder_ == null) {
        if (!(exprTypeCase_ == 10002)) {
          exprType_ = org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.getDefaultInstance();
        }
        getIndexedFieldExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalGetIndexedFieldExprNode, org.blaze.protobuf.PhysicalGetIndexedFieldExprNode.Builder, org.blaze.protobuf.PhysicalGetIndexedFieldExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalGetIndexedFieldExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 10002;
      onChanged();;
      return getIndexedFieldExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalGetMapValueExprNode, org.blaze.protobuf.PhysicalGetMapValueExprNode.Builder, org.blaze.protobuf.PhysicalGetMapValueExprNodeOrBuilder> getMapValueExprBuilder_;
    /**
     * <pre>
     * GetMapValue
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
     * @return Whether the getMapValueExpr field is set.
     */
    @java.lang.Override
    public boolean hasGetMapValueExpr() {
      return exprTypeCase_ == 10003;
    }
    /**
     * <pre>
     * GetMapValue
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
     * @return The getMapValueExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalGetMapValueExprNode getGetMapValueExpr() {
      if (getMapValueExprBuilder_ == null) {
        if (exprTypeCase_ == 10003) {
          return (org.blaze.protobuf.PhysicalGetMapValueExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalGetMapValueExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 10003) {
          return getMapValueExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalGetMapValueExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * GetMapValue
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
     */
    public Builder setGetMapValueExpr(org.blaze.protobuf.PhysicalGetMapValueExprNode value) {
      if (getMapValueExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        getMapValueExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 10003;
      return this;
    }
    /**
     * <pre>
     * GetMapValue
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
     */
    public Builder setGetMapValueExpr(
        org.blaze.protobuf.PhysicalGetMapValueExprNode.Builder builderForValue) {
      if (getMapValueExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        getMapValueExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 10003;
      return this;
    }
    /**
     * <pre>
     * GetMapValue
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
     */
    public Builder mergeGetMapValueExpr(org.blaze.protobuf.PhysicalGetMapValueExprNode value) {
      if (getMapValueExprBuilder_ == null) {
        if (exprTypeCase_ == 10003 &&
            exprType_ != org.blaze.protobuf.PhysicalGetMapValueExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalGetMapValueExprNode.newBuilder((org.blaze.protobuf.PhysicalGetMapValueExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 10003) {
          getMapValueExprBuilder_.mergeFrom(value);
        } else {
          getMapValueExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 10003;
      return this;
    }
    /**
     * <pre>
     * GetMapValue
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
     */
    public Builder clearGetMapValueExpr() {
      if (getMapValueExprBuilder_ == null) {
        if (exprTypeCase_ == 10003) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 10003) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        getMapValueExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * GetMapValue
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
     */
    public org.blaze.protobuf.PhysicalGetMapValueExprNode.Builder getGetMapValueExprBuilder() {
      return getGetMapValueExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * GetMapValue
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalGetMapValueExprNodeOrBuilder getGetMapValueExprOrBuilder() {
      if ((exprTypeCase_ == 10003) && (getMapValueExprBuilder_ != null)) {
        return getMapValueExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 10003) {
          return (org.blaze.protobuf.PhysicalGetMapValueExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalGetMapValueExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * GetMapValue
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalGetMapValueExprNode get_map_value_expr = 10003;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalGetMapValueExprNode, org.blaze.protobuf.PhysicalGetMapValueExprNode.Builder, org.blaze.protobuf.PhysicalGetMapValueExprNodeOrBuilder> 
        getGetMapValueExprFieldBuilder() {
      if (getMapValueExprBuilder_ == null) {
        if (!(exprTypeCase_ == 10003)) {
          exprType_ = org.blaze.protobuf.PhysicalGetMapValueExprNode.getDefaultInstance();
        }
        getMapValueExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalGetMapValueExprNode, org.blaze.protobuf.PhysicalGetMapValueExprNode.Builder, org.blaze.protobuf.PhysicalGetMapValueExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalGetMapValueExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 10003;
      onChanged();;
      return getMapValueExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalNamedStructExprNode, org.blaze.protobuf.PhysicalNamedStructExprNode.Builder, org.blaze.protobuf.PhysicalNamedStructExprNodeOrBuilder> namedStructBuilder_;
    /**
     * <pre>
     * CreateNamedStruct
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
     * @return Whether the namedStruct field is set.
     */
    @java.lang.Override
    public boolean hasNamedStruct() {
      return exprTypeCase_ == 11000;
    }
    /**
     * <pre>
     * CreateNamedStruct
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
     * @return The namedStruct.
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalNamedStructExprNode getNamedStruct() {
      if (namedStructBuilder_ == null) {
        if (exprTypeCase_ == 11000) {
          return (org.blaze.protobuf.PhysicalNamedStructExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalNamedStructExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 11000) {
          return namedStructBuilder_.getMessage();
        }
        return org.blaze.protobuf.PhysicalNamedStructExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * CreateNamedStruct
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
     */
    public Builder setNamedStruct(org.blaze.protobuf.PhysicalNamedStructExprNode value) {
      if (namedStructBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        namedStructBuilder_.setMessage(value);
      }
      exprTypeCase_ = 11000;
      return this;
    }
    /**
     * <pre>
     * CreateNamedStruct
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
     */
    public Builder setNamedStruct(
        org.blaze.protobuf.PhysicalNamedStructExprNode.Builder builderForValue) {
      if (namedStructBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        namedStructBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 11000;
      return this;
    }
    /**
     * <pre>
     * CreateNamedStruct
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
     */
    public Builder mergeNamedStruct(org.blaze.protobuf.PhysicalNamedStructExprNode value) {
      if (namedStructBuilder_ == null) {
        if (exprTypeCase_ == 11000 &&
            exprType_ != org.blaze.protobuf.PhysicalNamedStructExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.PhysicalNamedStructExprNode.newBuilder((org.blaze.protobuf.PhysicalNamedStructExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 11000) {
          namedStructBuilder_.mergeFrom(value);
        } else {
          namedStructBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 11000;
      return this;
    }
    /**
     * <pre>
     * CreateNamedStruct
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
     */
    public Builder clearNamedStruct() {
      if (namedStructBuilder_ == null) {
        if (exprTypeCase_ == 11000) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 11000) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        namedStructBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * CreateNamedStruct
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
     */
    public org.blaze.protobuf.PhysicalNamedStructExprNode.Builder getNamedStructBuilder() {
      return getNamedStructFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * CreateNamedStruct
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.PhysicalNamedStructExprNodeOrBuilder getNamedStructOrBuilder() {
      if ((exprTypeCase_ == 11000) && (namedStructBuilder_ != null)) {
        return namedStructBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 11000) {
          return (org.blaze.protobuf.PhysicalNamedStructExprNode) exprType_;
        }
        return org.blaze.protobuf.PhysicalNamedStructExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * CreateNamedStruct
     * </pre>
     *
     * <code>.plan.protobuf.PhysicalNamedStructExprNode named_struct = 11000;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.PhysicalNamedStructExprNode, org.blaze.protobuf.PhysicalNamedStructExprNode.Builder, org.blaze.protobuf.PhysicalNamedStructExprNodeOrBuilder> 
        getNamedStructFieldBuilder() {
      if (namedStructBuilder_ == null) {
        if (!(exprTypeCase_ == 11000)) {
          exprType_ = org.blaze.protobuf.PhysicalNamedStructExprNode.getDefaultInstance();
        }
        namedStructBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.PhysicalNamedStructExprNode, org.blaze.protobuf.PhysicalNamedStructExprNode.Builder, org.blaze.protobuf.PhysicalNamedStructExprNodeOrBuilder>(
                (org.blaze.protobuf.PhysicalNamedStructExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 11000;
      onChanged();;
      return namedStructBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.StringStartsWithExprNode, org.blaze.protobuf.StringStartsWithExprNode.Builder, org.blaze.protobuf.StringStartsWithExprNodeOrBuilder> stringStartsWithExprBuilder_;
    /**
     * <pre>
     * string expressions
     * </pre>
     *
     * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
     * @return Whether the stringStartsWithExpr field is set.
     */
    @java.lang.Override
    public boolean hasStringStartsWithExpr() {
      return exprTypeCase_ == 20000;
    }
    /**
     * <pre>
     * string expressions
     * </pre>
     *
     * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
     * @return The stringStartsWithExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.StringStartsWithExprNode getStringStartsWithExpr() {
      if (stringStartsWithExprBuilder_ == null) {
        if (exprTypeCase_ == 20000) {
          return (org.blaze.protobuf.StringStartsWithExprNode) exprType_;
        }
        return org.blaze.protobuf.StringStartsWithExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 20000) {
          return stringStartsWithExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.StringStartsWithExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * string expressions
     * </pre>
     *
     * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
     */
    public Builder setStringStartsWithExpr(org.blaze.protobuf.StringStartsWithExprNode value) {
      if (stringStartsWithExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        stringStartsWithExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 20000;
      return this;
    }
    /**
     * <pre>
     * string expressions
     * </pre>
     *
     * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
     */
    public Builder setStringStartsWithExpr(
        org.blaze.protobuf.StringStartsWithExprNode.Builder builderForValue) {
      if (stringStartsWithExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        stringStartsWithExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 20000;
      return this;
    }
    /**
     * <pre>
     * string expressions
     * </pre>
     *
     * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
     */
    public Builder mergeStringStartsWithExpr(org.blaze.protobuf.StringStartsWithExprNode value) {
      if (stringStartsWithExprBuilder_ == null) {
        if (exprTypeCase_ == 20000 &&
            exprType_ != org.blaze.protobuf.StringStartsWithExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.StringStartsWithExprNode.newBuilder((org.blaze.protobuf.StringStartsWithExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 20000) {
          stringStartsWithExprBuilder_.mergeFrom(value);
        } else {
          stringStartsWithExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 20000;
      return this;
    }
    /**
     * <pre>
     * string expressions
     * </pre>
     *
     * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
     */
    public Builder clearStringStartsWithExpr() {
      if (stringStartsWithExprBuilder_ == null) {
        if (exprTypeCase_ == 20000) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 20000) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        stringStartsWithExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * string expressions
     * </pre>
     *
     * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
     */
    public org.blaze.protobuf.StringStartsWithExprNode.Builder getStringStartsWithExprBuilder() {
      return getStringStartsWithExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * string expressions
     * </pre>
     *
     * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.StringStartsWithExprNodeOrBuilder getStringStartsWithExprOrBuilder() {
      if ((exprTypeCase_ == 20000) && (stringStartsWithExprBuilder_ != null)) {
        return stringStartsWithExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 20000) {
          return (org.blaze.protobuf.StringStartsWithExprNode) exprType_;
        }
        return org.blaze.protobuf.StringStartsWithExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * string expressions
     * </pre>
     *
     * <code>.plan.protobuf.StringStartsWithExprNode string_starts_with_expr = 20000;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.StringStartsWithExprNode, org.blaze.protobuf.StringStartsWithExprNode.Builder, org.blaze.protobuf.StringStartsWithExprNodeOrBuilder> 
        getStringStartsWithExprFieldBuilder() {
      if (stringStartsWithExprBuilder_ == null) {
        if (!(exprTypeCase_ == 20000)) {
          exprType_ = org.blaze.protobuf.StringStartsWithExprNode.getDefaultInstance();
        }
        stringStartsWithExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.StringStartsWithExprNode, org.blaze.protobuf.StringStartsWithExprNode.Builder, org.blaze.protobuf.StringStartsWithExprNodeOrBuilder>(
                (org.blaze.protobuf.StringStartsWithExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 20000;
      onChanged();;
      return stringStartsWithExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.StringEndsWithExprNode, org.blaze.protobuf.StringEndsWithExprNode.Builder, org.blaze.protobuf.StringEndsWithExprNodeOrBuilder> stringEndsWithExprBuilder_;
    /**
     * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
     * @return Whether the stringEndsWithExpr field is set.
     */
    @java.lang.Override
    public boolean hasStringEndsWithExpr() {
      return exprTypeCase_ == 20001;
    }
    /**
     * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
     * @return The stringEndsWithExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.StringEndsWithExprNode getStringEndsWithExpr() {
      if (stringEndsWithExprBuilder_ == null) {
        if (exprTypeCase_ == 20001) {
          return (org.blaze.protobuf.StringEndsWithExprNode) exprType_;
        }
        return org.blaze.protobuf.StringEndsWithExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 20001) {
          return stringEndsWithExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.StringEndsWithExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
     */
    public Builder setStringEndsWithExpr(org.blaze.protobuf.StringEndsWithExprNode value) {
      if (stringEndsWithExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        stringEndsWithExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 20001;
      return this;
    }
    /**
     * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
     */
    public Builder setStringEndsWithExpr(
        org.blaze.protobuf.StringEndsWithExprNode.Builder builderForValue) {
      if (stringEndsWithExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        stringEndsWithExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 20001;
      return this;
    }
    /**
     * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
     */
    public Builder mergeStringEndsWithExpr(org.blaze.protobuf.StringEndsWithExprNode value) {
      if (stringEndsWithExprBuilder_ == null) {
        if (exprTypeCase_ == 20001 &&
            exprType_ != org.blaze.protobuf.StringEndsWithExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.StringEndsWithExprNode.newBuilder((org.blaze.protobuf.StringEndsWithExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 20001) {
          stringEndsWithExprBuilder_.mergeFrom(value);
        } else {
          stringEndsWithExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 20001;
      return this;
    }
    /**
     * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
     */
    public Builder clearStringEndsWithExpr() {
      if (stringEndsWithExprBuilder_ == null) {
        if (exprTypeCase_ == 20001) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 20001) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        stringEndsWithExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
     */
    public org.blaze.protobuf.StringEndsWithExprNode.Builder getStringEndsWithExprBuilder() {
      return getStringEndsWithExprFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.StringEndsWithExprNodeOrBuilder getStringEndsWithExprOrBuilder() {
      if ((exprTypeCase_ == 20001) && (stringEndsWithExprBuilder_ != null)) {
        return stringEndsWithExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 20001) {
          return (org.blaze.protobuf.StringEndsWithExprNode) exprType_;
        }
        return org.blaze.protobuf.StringEndsWithExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.StringEndsWithExprNode string_ends_with_expr = 20001;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.StringEndsWithExprNode, org.blaze.protobuf.StringEndsWithExprNode.Builder, org.blaze.protobuf.StringEndsWithExprNodeOrBuilder> 
        getStringEndsWithExprFieldBuilder() {
      if (stringEndsWithExprBuilder_ == null) {
        if (!(exprTypeCase_ == 20001)) {
          exprType_ = org.blaze.protobuf.StringEndsWithExprNode.getDefaultInstance();
        }
        stringEndsWithExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.StringEndsWithExprNode, org.blaze.protobuf.StringEndsWithExprNode.Builder, org.blaze.protobuf.StringEndsWithExprNodeOrBuilder>(
                (org.blaze.protobuf.StringEndsWithExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 20001;
      onChanged();;
      return stringEndsWithExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.StringContainsExprNode, org.blaze.protobuf.StringContainsExprNode.Builder, org.blaze.protobuf.StringContainsExprNodeOrBuilder> stringContainsExprBuilder_;
    /**
     * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
     * @return Whether the stringContainsExpr field is set.
     */
    @java.lang.Override
    public boolean hasStringContainsExpr() {
      return exprTypeCase_ == 20002;
    }
    /**
     * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
     * @return The stringContainsExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.StringContainsExprNode getStringContainsExpr() {
      if (stringContainsExprBuilder_ == null) {
        if (exprTypeCase_ == 20002) {
          return (org.blaze.protobuf.StringContainsExprNode) exprType_;
        }
        return org.blaze.protobuf.StringContainsExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 20002) {
          return stringContainsExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.StringContainsExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
     */
    public Builder setStringContainsExpr(org.blaze.protobuf.StringContainsExprNode value) {
      if (stringContainsExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        stringContainsExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 20002;
      return this;
    }
    /**
     * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
     */
    public Builder setStringContainsExpr(
        org.blaze.protobuf.StringContainsExprNode.Builder builderForValue) {
      if (stringContainsExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        stringContainsExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 20002;
      return this;
    }
    /**
     * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
     */
    public Builder mergeStringContainsExpr(org.blaze.protobuf.StringContainsExprNode value) {
      if (stringContainsExprBuilder_ == null) {
        if (exprTypeCase_ == 20002 &&
            exprType_ != org.blaze.protobuf.StringContainsExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.StringContainsExprNode.newBuilder((org.blaze.protobuf.StringContainsExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 20002) {
          stringContainsExprBuilder_.mergeFrom(value);
        } else {
          stringContainsExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 20002;
      return this;
    }
    /**
     * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
     */
    public Builder clearStringContainsExpr() {
      if (stringContainsExprBuilder_ == null) {
        if (exprTypeCase_ == 20002) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 20002) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        stringContainsExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
     */
    public org.blaze.protobuf.StringContainsExprNode.Builder getStringContainsExprBuilder() {
      return getStringContainsExprFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.StringContainsExprNodeOrBuilder getStringContainsExprOrBuilder() {
      if ((exprTypeCase_ == 20002) && (stringContainsExprBuilder_ != null)) {
        return stringContainsExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 20002) {
          return (org.blaze.protobuf.StringContainsExprNode) exprType_;
        }
        return org.blaze.protobuf.StringContainsExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.StringContainsExprNode string_contains_expr = 20002;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.StringContainsExprNode, org.blaze.protobuf.StringContainsExprNode.Builder, org.blaze.protobuf.StringContainsExprNodeOrBuilder> 
        getStringContainsExprFieldBuilder() {
      if (stringContainsExprBuilder_ == null) {
        if (!(exprTypeCase_ == 20002)) {
          exprType_ = org.blaze.protobuf.StringContainsExprNode.getDefaultInstance();
        }
        stringContainsExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.StringContainsExprNode, org.blaze.protobuf.StringContainsExprNode.Builder, org.blaze.protobuf.StringContainsExprNodeOrBuilder>(
                (org.blaze.protobuf.StringContainsExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 20002;
      onChanged();;
      return stringContainsExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.RowNumExprNode, org.blaze.protobuf.RowNumExprNode.Builder, org.blaze.protobuf.RowNumExprNodeOrBuilder> rowNumExprBuilder_;
    /**
     * <pre>
     * RowNum
     * </pre>
     *
     * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
     * @return Whether the rowNumExpr field is set.
     */
    @java.lang.Override
    public boolean hasRowNumExpr() {
      return exprTypeCase_ == 20100;
    }
    /**
     * <pre>
     * RowNum
     * </pre>
     *
     * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
     * @return The rowNumExpr.
     */
    @java.lang.Override
    public org.blaze.protobuf.RowNumExprNode getRowNumExpr() {
      if (rowNumExprBuilder_ == null) {
        if (exprTypeCase_ == 20100) {
          return (org.blaze.protobuf.RowNumExprNode) exprType_;
        }
        return org.blaze.protobuf.RowNumExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 20100) {
          return rowNumExprBuilder_.getMessage();
        }
        return org.blaze.protobuf.RowNumExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * RowNum
     * </pre>
     *
     * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
     */
    public Builder setRowNumExpr(org.blaze.protobuf.RowNumExprNode value) {
      if (rowNumExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        rowNumExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 20100;
      return this;
    }
    /**
     * <pre>
     * RowNum
     * </pre>
     *
     * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
     */
    public Builder setRowNumExpr(
        org.blaze.protobuf.RowNumExprNode.Builder builderForValue) {
      if (rowNumExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        rowNumExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 20100;
      return this;
    }
    /**
     * <pre>
     * RowNum
     * </pre>
     *
     * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
     */
    public Builder mergeRowNumExpr(org.blaze.protobuf.RowNumExprNode value) {
      if (rowNumExprBuilder_ == null) {
        if (exprTypeCase_ == 20100 &&
            exprType_ != org.blaze.protobuf.RowNumExprNode.getDefaultInstance()) {
          exprType_ = org.blaze.protobuf.RowNumExprNode.newBuilder((org.blaze.protobuf.RowNumExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 20100) {
          rowNumExprBuilder_.mergeFrom(value);
        } else {
          rowNumExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 20100;
      return this;
    }
    /**
     * <pre>
     * RowNum
     * </pre>
     *
     * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
     */
    public Builder clearRowNumExpr() {
      if (rowNumExprBuilder_ == null) {
        if (exprTypeCase_ == 20100) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 20100) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        rowNumExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * RowNum
     * </pre>
     *
     * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
     */
    public org.blaze.protobuf.RowNumExprNode.Builder getRowNumExprBuilder() {
      return getRowNumExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * RowNum
     * </pre>
     *
     * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.RowNumExprNodeOrBuilder getRowNumExprOrBuilder() {
      if ((exprTypeCase_ == 20100) && (rowNumExprBuilder_ != null)) {
        return rowNumExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 20100) {
          return (org.blaze.protobuf.RowNumExprNode) exprType_;
        }
        return org.blaze.protobuf.RowNumExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * RowNum
     * </pre>
     *
     * <code>.plan.protobuf.RowNumExprNode row_num_expr = 20100;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.RowNumExprNode, org.blaze.protobuf.RowNumExprNode.Builder, org.blaze.protobuf.RowNumExprNodeOrBuilder> 
        getRowNumExprFieldBuilder() {
      if (rowNumExprBuilder_ == null) {
        if (!(exprTypeCase_ == 20100)) {
          exprType_ = org.blaze.protobuf.RowNumExprNode.getDefaultInstance();
        }
        rowNumExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.RowNumExprNode, org.blaze.protobuf.RowNumExprNode.Builder, org.blaze.protobuf.RowNumExprNodeOrBuilder>(
                (org.blaze.protobuf.RowNumExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 20100;
      onChanged();;
      return rowNumExprBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:plan.protobuf.PhysicalExprNode)
  }

  // @@protoc_insertion_point(class_scope:plan.protobuf.PhysicalExprNode)
  private static final org.blaze.protobuf.PhysicalExprNode DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.blaze.protobuf.PhysicalExprNode();
  }

  public static org.blaze.protobuf.PhysicalExprNode getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PhysicalExprNode>
      PARSER = new com.google.protobuf.AbstractParser<PhysicalExprNode>() {
    @java.lang.Override
    public PhysicalExprNode parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<PhysicalExprNode> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PhysicalExprNode> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.blaze.protobuf.PhysicalExprNode getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

