// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blaze.proto

package org.blaze.protobuf;

/**
 * <pre>
 * PhysicalPlanNode is a nested type
 * </pre>
 *
 * Protobuf type {@code plan.protobuf.PhysicalPlanNode}
 */
public final class PhysicalPlanNode extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:plan.protobuf.PhysicalPlanNode)
    PhysicalPlanNodeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PhysicalPlanNode.newBuilder() to construct.
  private PhysicalPlanNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PhysicalPlanNode() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PhysicalPlanNode();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.blaze.protobuf.PhysicalPlanNode.class, org.blaze.protobuf.PhysicalPlanNode.Builder.class);
  }

  private int physicalPlanTypeCase_ = 0;
  private java.lang.Object physicalPlanType_;
  public enum PhysicalPlanTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    DEBUG(1),
    SHUFFLE_WRITER(2),
    IPC_READER(3),
    IPC_WRITER(4),
    PARQUET_SCAN(5),
    PROJECTION(6),
    SORT(7),
    FILTER(8),
    UNION(9),
    SORT_MERGE_JOIN(10),
    BROADCAST_JOIN_BUILD_HASH_MAP(11),
    BROADCAST_JOIN(12),
    RENAME_COLUMNS(13),
    EMPTY_PARTITIONS(14),
    AGG(15),
    LIMIT(16),
    FFI_READER(17),
    COALESCE_BATCHES(18),
    EXPAND(19),
    RSS_SHUFFLE_WRITER(20),
    WINDOW(21),
    GENERATE(22),
    PARQUET_SINK(23),
    PHYSICALPLANTYPE_NOT_SET(0);
    private final int value;
    private PhysicalPlanTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PhysicalPlanTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static PhysicalPlanTypeCase forNumber(int value) {
      switch (value) {
        case 1: return DEBUG;
        case 2: return SHUFFLE_WRITER;
        case 3: return IPC_READER;
        case 4: return IPC_WRITER;
        case 5: return PARQUET_SCAN;
        case 6: return PROJECTION;
        case 7: return SORT;
        case 8: return FILTER;
        case 9: return UNION;
        case 10: return SORT_MERGE_JOIN;
        case 11: return BROADCAST_JOIN_BUILD_HASH_MAP;
        case 12: return BROADCAST_JOIN;
        case 13: return RENAME_COLUMNS;
        case 14: return EMPTY_PARTITIONS;
        case 15: return AGG;
        case 16: return LIMIT;
        case 17: return FFI_READER;
        case 18: return COALESCE_BATCHES;
        case 19: return EXPAND;
        case 20: return RSS_SHUFFLE_WRITER;
        case 21: return WINDOW;
        case 22: return GENERATE;
        case 23: return PARQUET_SINK;
        case 0: return PHYSICALPLANTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PhysicalPlanTypeCase
  getPhysicalPlanTypeCase() {
    return PhysicalPlanTypeCase.forNumber(
        physicalPlanTypeCase_);
  }

  public static final int DEBUG_FIELD_NUMBER = 1;
  /**
   * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
   * @return Whether the debug field is set.
   */
  @java.lang.Override
  public boolean hasDebug() {
    return physicalPlanTypeCase_ == 1;
  }
  /**
   * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
   * @return The debug.
   */
  @java.lang.Override
  public org.blaze.protobuf.DebugExecNode getDebug() {
    if (physicalPlanTypeCase_ == 1) {
       return (org.blaze.protobuf.DebugExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.DebugExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.DebugExecNodeOrBuilder getDebugOrBuilder() {
    if (physicalPlanTypeCase_ == 1) {
       return (org.blaze.protobuf.DebugExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.DebugExecNode.getDefaultInstance();
  }

  public static final int SHUFFLE_WRITER_FIELD_NUMBER = 2;
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
   * @return Whether the shuffleWriter field is set.
   */
  @java.lang.Override
  public boolean hasShuffleWriter() {
    return physicalPlanTypeCase_ == 2;
  }
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
   * @return The shuffleWriter.
   */
  @java.lang.Override
  public org.blaze.protobuf.ShuffleWriterExecNode getShuffleWriter() {
    if (physicalPlanTypeCase_ == 2) {
       return (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder getShuffleWriterOrBuilder() {
    if (physicalPlanTypeCase_ == 2) {
       return (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
  }

  public static final int IPC_READER_FIELD_NUMBER = 3;
  /**
   * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
   * @return Whether the ipcReader field is set.
   */
  @java.lang.Override
  public boolean hasIpcReader() {
    return physicalPlanTypeCase_ == 3;
  }
  /**
   * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
   * @return The ipcReader.
   */
  @java.lang.Override
  public org.blaze.protobuf.IpcReaderExecNode getIpcReader() {
    if (physicalPlanTypeCase_ == 3) {
       return (org.blaze.protobuf.IpcReaderExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.IpcReaderExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.IpcReaderExecNodeOrBuilder getIpcReaderOrBuilder() {
    if (physicalPlanTypeCase_ == 3) {
       return (org.blaze.protobuf.IpcReaderExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.IpcReaderExecNode.getDefaultInstance();
  }

  public static final int IPC_WRITER_FIELD_NUMBER = 4;
  /**
   * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
   * @return Whether the ipcWriter field is set.
   */
  @java.lang.Override
  public boolean hasIpcWriter() {
    return physicalPlanTypeCase_ == 4;
  }
  /**
   * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
   * @return The ipcWriter.
   */
  @java.lang.Override
  public org.blaze.protobuf.IpcWriterExecNode getIpcWriter() {
    if (physicalPlanTypeCase_ == 4) {
       return (org.blaze.protobuf.IpcWriterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.IpcWriterExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.IpcWriterExecNodeOrBuilder getIpcWriterOrBuilder() {
    if (physicalPlanTypeCase_ == 4) {
       return (org.blaze.protobuf.IpcWriterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.IpcWriterExecNode.getDefaultInstance();
  }

  public static final int PARQUET_SCAN_FIELD_NUMBER = 5;
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
   * @return Whether the parquetScan field is set.
   */
  @java.lang.Override
  public boolean hasParquetScan() {
    return physicalPlanTypeCase_ == 5;
  }
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
   * @return The parquetScan.
   */
  @java.lang.Override
  public org.blaze.protobuf.ParquetScanExecNode getParquetScan() {
    if (physicalPlanTypeCase_ == 5) {
       return (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ParquetScanExecNodeOrBuilder getParquetScanOrBuilder() {
    if (physicalPlanTypeCase_ == 5) {
       return (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
  }

  public static final int PROJECTION_FIELD_NUMBER = 6;
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
   * @return Whether the projection field is set.
   */
  @java.lang.Override
  public boolean hasProjection() {
    return physicalPlanTypeCase_ == 6;
  }
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
   * @return The projection.
   */
  @java.lang.Override
  public org.blaze.protobuf.ProjectionExecNode getProjection() {
    if (physicalPlanTypeCase_ == 6) {
       return (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ProjectionExecNodeOrBuilder getProjectionOrBuilder() {
    if (physicalPlanTypeCase_ == 6) {
       return (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
  }

  public static final int SORT_FIELD_NUMBER = 7;
  /**
   * <code>.plan.protobuf.SortExecNode sort = 7;</code>
   * @return Whether the sort field is set.
   */
  @java.lang.Override
  public boolean hasSort() {
    return physicalPlanTypeCase_ == 7;
  }
  /**
   * <code>.plan.protobuf.SortExecNode sort = 7;</code>
   * @return The sort.
   */
  @java.lang.Override
  public org.blaze.protobuf.SortExecNode getSort() {
    if (physicalPlanTypeCase_ == 7) {
       return (org.blaze.protobuf.SortExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.SortExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.SortExecNode sort = 7;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.SortExecNodeOrBuilder getSortOrBuilder() {
    if (physicalPlanTypeCase_ == 7) {
       return (org.blaze.protobuf.SortExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.SortExecNode.getDefaultInstance();
  }

  public static final int FILTER_FIELD_NUMBER = 8;
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
   * @return Whether the filter field is set.
   */
  @java.lang.Override
  public boolean hasFilter() {
    return physicalPlanTypeCase_ == 8;
  }
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
   * @return The filter.
   */
  @java.lang.Override
  public org.blaze.protobuf.FilterExecNode getFilter() {
    if (physicalPlanTypeCase_ == 8) {
       return (org.blaze.protobuf.FilterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.FilterExecNodeOrBuilder getFilterOrBuilder() {
    if (physicalPlanTypeCase_ == 8) {
       return (org.blaze.protobuf.FilterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
  }

  public static final int UNION_FIELD_NUMBER = 9;
  /**
   * <code>.plan.protobuf.UnionExecNode union = 9;</code>
   * @return Whether the union field is set.
   */
  @java.lang.Override
  public boolean hasUnion() {
    return physicalPlanTypeCase_ == 9;
  }
  /**
   * <code>.plan.protobuf.UnionExecNode union = 9;</code>
   * @return The union.
   */
  @java.lang.Override
  public org.blaze.protobuf.UnionExecNode getUnion() {
    if (physicalPlanTypeCase_ == 9) {
       return (org.blaze.protobuf.UnionExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.UnionExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.UnionExecNode union = 9;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.UnionExecNodeOrBuilder getUnionOrBuilder() {
    if (physicalPlanTypeCase_ == 9) {
       return (org.blaze.protobuf.UnionExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.UnionExecNode.getDefaultInstance();
  }

  public static final int SORT_MERGE_JOIN_FIELD_NUMBER = 10;
  /**
   * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
   * @return Whether the sortMergeJoin field is set.
   */
  @java.lang.Override
  public boolean hasSortMergeJoin() {
    return physicalPlanTypeCase_ == 10;
  }
  /**
   * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
   * @return The sortMergeJoin.
   */
  @java.lang.Override
  public org.blaze.protobuf.SortMergeJoinExecNode getSortMergeJoin() {
    if (physicalPlanTypeCase_ == 10) {
       return (org.blaze.protobuf.SortMergeJoinExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.SortMergeJoinExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.SortMergeJoinExecNodeOrBuilder getSortMergeJoinOrBuilder() {
    if (physicalPlanTypeCase_ == 10) {
       return (org.blaze.protobuf.SortMergeJoinExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.SortMergeJoinExecNode.getDefaultInstance();
  }

  public static final int BROADCAST_JOIN_BUILD_HASH_MAP_FIELD_NUMBER = 11;
  /**
   * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
   * @return Whether the broadcastJoinBuildHashMap field is set.
   */
  @java.lang.Override
  public boolean hasBroadcastJoinBuildHashMap() {
    return physicalPlanTypeCase_ == 11;
  }
  /**
   * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
   * @return The broadcastJoinBuildHashMap.
   */
  @java.lang.Override
  public org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode getBroadcastJoinBuildHashMap() {
    if (physicalPlanTypeCase_ == 11) {
       return (org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.BroadcastJoinBuildHashMapExecNodeOrBuilder getBroadcastJoinBuildHashMapOrBuilder() {
    if (physicalPlanTypeCase_ == 11) {
       return (org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.getDefaultInstance();
  }

  public static final int BROADCAST_JOIN_FIELD_NUMBER = 12;
  /**
   * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
   * @return Whether the broadcastJoin field is set.
   */
  @java.lang.Override
  public boolean hasBroadcastJoin() {
    return physicalPlanTypeCase_ == 12;
  }
  /**
   * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
   * @return The broadcastJoin.
   */
  @java.lang.Override
  public org.blaze.protobuf.BroadcastJoinExecNode getBroadcastJoin() {
    if (physicalPlanTypeCase_ == 12) {
       return (org.blaze.protobuf.BroadcastJoinExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.BroadcastJoinExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.BroadcastJoinExecNodeOrBuilder getBroadcastJoinOrBuilder() {
    if (physicalPlanTypeCase_ == 12) {
       return (org.blaze.protobuf.BroadcastJoinExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.BroadcastJoinExecNode.getDefaultInstance();
  }

  public static final int RENAME_COLUMNS_FIELD_NUMBER = 13;
  /**
   * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
   * @return Whether the renameColumns field is set.
   */
  @java.lang.Override
  public boolean hasRenameColumns() {
    return physicalPlanTypeCase_ == 13;
  }
  /**
   * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
   * @return The renameColumns.
   */
  @java.lang.Override
  public org.blaze.protobuf.RenameColumnsExecNode getRenameColumns() {
    if (physicalPlanTypeCase_ == 13) {
       return (org.blaze.protobuf.RenameColumnsExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.RenameColumnsExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.RenameColumnsExecNodeOrBuilder getRenameColumnsOrBuilder() {
    if (physicalPlanTypeCase_ == 13) {
       return (org.blaze.protobuf.RenameColumnsExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.RenameColumnsExecNode.getDefaultInstance();
  }

  public static final int EMPTY_PARTITIONS_FIELD_NUMBER = 14;
  /**
   * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
   * @return Whether the emptyPartitions field is set.
   */
  @java.lang.Override
  public boolean hasEmptyPartitions() {
    return physicalPlanTypeCase_ == 14;
  }
  /**
   * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
   * @return The emptyPartitions.
   */
  @java.lang.Override
  public org.blaze.protobuf.EmptyPartitionsExecNode getEmptyPartitions() {
    if (physicalPlanTypeCase_ == 14) {
       return (org.blaze.protobuf.EmptyPartitionsExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.EmptyPartitionsExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.EmptyPartitionsExecNodeOrBuilder getEmptyPartitionsOrBuilder() {
    if (physicalPlanTypeCase_ == 14) {
       return (org.blaze.protobuf.EmptyPartitionsExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.EmptyPartitionsExecNode.getDefaultInstance();
  }

  public static final int AGG_FIELD_NUMBER = 15;
  /**
   * <code>.plan.protobuf.AggExecNode agg = 15;</code>
   * @return Whether the agg field is set.
   */
  @java.lang.Override
  public boolean hasAgg() {
    return physicalPlanTypeCase_ == 15;
  }
  /**
   * <code>.plan.protobuf.AggExecNode agg = 15;</code>
   * @return The agg.
   */
  @java.lang.Override
  public org.blaze.protobuf.AggExecNode getAgg() {
    if (physicalPlanTypeCase_ == 15) {
       return (org.blaze.protobuf.AggExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.AggExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.AggExecNode agg = 15;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.AggExecNodeOrBuilder getAggOrBuilder() {
    if (physicalPlanTypeCase_ == 15) {
       return (org.blaze.protobuf.AggExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.AggExecNode.getDefaultInstance();
  }

  public static final int LIMIT_FIELD_NUMBER = 16;
  /**
   * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
   * @return Whether the limit field is set.
   */
  @java.lang.Override
  public boolean hasLimit() {
    return physicalPlanTypeCase_ == 16;
  }
  /**
   * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
   * @return The limit.
   */
  @java.lang.Override
  public org.blaze.protobuf.LimitExecNode getLimit() {
    if (physicalPlanTypeCase_ == 16) {
       return (org.blaze.protobuf.LimitExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.LimitExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.LimitExecNodeOrBuilder getLimitOrBuilder() {
    if (physicalPlanTypeCase_ == 16) {
       return (org.blaze.protobuf.LimitExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.LimitExecNode.getDefaultInstance();
  }

  public static final int FFI_READER_FIELD_NUMBER = 17;
  /**
   * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
   * @return Whether the ffiReader field is set.
   */
  @java.lang.Override
  public boolean hasFfiReader() {
    return physicalPlanTypeCase_ == 17;
  }
  /**
   * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
   * @return The ffiReader.
   */
  @java.lang.Override
  public org.blaze.protobuf.FFIReaderExecNode getFfiReader() {
    if (physicalPlanTypeCase_ == 17) {
       return (org.blaze.protobuf.FFIReaderExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.FFIReaderExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.FFIReaderExecNodeOrBuilder getFfiReaderOrBuilder() {
    if (physicalPlanTypeCase_ == 17) {
       return (org.blaze.protobuf.FFIReaderExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.FFIReaderExecNode.getDefaultInstance();
  }

  public static final int COALESCE_BATCHES_FIELD_NUMBER = 18;
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
   * @return Whether the coalesceBatches field is set.
   */
  @java.lang.Override
  public boolean hasCoalesceBatches() {
    return physicalPlanTypeCase_ == 18;
  }
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
   * @return The coalesceBatches.
   */
  @java.lang.Override
  public org.blaze.protobuf.CoalesceBatchesExecNode getCoalesceBatches() {
    if (physicalPlanTypeCase_ == 18) {
       return (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder getCoalesceBatchesOrBuilder() {
    if (physicalPlanTypeCase_ == 18) {
       return (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
  }

  public static final int EXPAND_FIELD_NUMBER = 19;
  /**
   * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
   * @return Whether the expand field is set.
   */
  @java.lang.Override
  public boolean hasExpand() {
    return physicalPlanTypeCase_ == 19;
  }
  /**
   * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
   * @return The expand.
   */
  @java.lang.Override
  public org.blaze.protobuf.ExpandExecNode getExpand() {
    if (physicalPlanTypeCase_ == 19) {
       return (org.blaze.protobuf.ExpandExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ExpandExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ExpandExecNodeOrBuilder getExpandOrBuilder() {
    if (physicalPlanTypeCase_ == 19) {
       return (org.blaze.protobuf.ExpandExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ExpandExecNode.getDefaultInstance();
  }

  public static final int RSS_SHUFFLE_WRITER_FIELD_NUMBER = 20;
  /**
   * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
   * @return Whether the rssShuffleWriter field is set.
   */
  @java.lang.Override
  public boolean hasRssShuffleWriter() {
    return physicalPlanTypeCase_ == 20;
  }
  /**
   * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
   * @return The rssShuffleWriter.
   */
  @java.lang.Override
  public org.blaze.protobuf.RssShuffleWriterExecNode getRssShuffleWriter() {
    if (physicalPlanTypeCase_ == 20) {
       return (org.blaze.protobuf.RssShuffleWriterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.RssShuffleWriterExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.RssShuffleWriterExecNodeOrBuilder getRssShuffleWriterOrBuilder() {
    if (physicalPlanTypeCase_ == 20) {
       return (org.blaze.protobuf.RssShuffleWriterExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.RssShuffleWriterExecNode.getDefaultInstance();
  }

  public static final int WINDOW_FIELD_NUMBER = 21;
  /**
   * <code>.plan.protobuf.WindowExecNode window = 21;</code>
   * @return Whether the window field is set.
   */
  @java.lang.Override
  public boolean hasWindow() {
    return physicalPlanTypeCase_ == 21;
  }
  /**
   * <code>.plan.protobuf.WindowExecNode window = 21;</code>
   * @return The window.
   */
  @java.lang.Override
  public org.blaze.protobuf.WindowExecNode getWindow() {
    if (physicalPlanTypeCase_ == 21) {
       return (org.blaze.protobuf.WindowExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.WindowExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.WindowExecNode window = 21;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.WindowExecNodeOrBuilder getWindowOrBuilder() {
    if (physicalPlanTypeCase_ == 21) {
       return (org.blaze.protobuf.WindowExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.WindowExecNode.getDefaultInstance();
  }

  public static final int GENERATE_FIELD_NUMBER = 22;
  /**
   * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
   * @return Whether the generate field is set.
   */
  @java.lang.Override
  public boolean hasGenerate() {
    return physicalPlanTypeCase_ == 22;
  }
  /**
   * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
   * @return The generate.
   */
  @java.lang.Override
  public org.blaze.protobuf.GenerateExecNode getGenerate() {
    if (physicalPlanTypeCase_ == 22) {
       return (org.blaze.protobuf.GenerateExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.GenerateExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.GenerateExecNodeOrBuilder getGenerateOrBuilder() {
    if (physicalPlanTypeCase_ == 22) {
       return (org.blaze.protobuf.GenerateExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.GenerateExecNode.getDefaultInstance();
  }

  public static final int PARQUET_SINK_FIELD_NUMBER = 23;
  /**
   * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
   * @return Whether the parquetSink field is set.
   */
  @java.lang.Override
  public boolean hasParquetSink() {
    return physicalPlanTypeCase_ == 23;
  }
  /**
   * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
   * @return The parquetSink.
   */
  @java.lang.Override
  public org.blaze.protobuf.ParquetSinkExecNode getParquetSink() {
    if (physicalPlanTypeCase_ == 23) {
       return (org.blaze.protobuf.ParquetSinkExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ParquetSinkExecNode.getDefaultInstance();
  }
  /**
   * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
   */
  @java.lang.Override
  public org.blaze.protobuf.ParquetSinkExecNodeOrBuilder getParquetSinkOrBuilder() {
    if (physicalPlanTypeCase_ == 23) {
       return (org.blaze.protobuf.ParquetSinkExecNode) physicalPlanType_;
    }
    return org.blaze.protobuf.ParquetSinkExecNode.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (physicalPlanTypeCase_ == 1) {
      output.writeMessage(1, (org.blaze.protobuf.DebugExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 2) {
      output.writeMessage(2, (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 3) {
      output.writeMessage(3, (org.blaze.protobuf.IpcReaderExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 4) {
      output.writeMessage(4, (org.blaze.protobuf.IpcWriterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 5) {
      output.writeMessage(5, (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 6) {
      output.writeMessage(6, (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 7) {
      output.writeMessage(7, (org.blaze.protobuf.SortExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 8) {
      output.writeMessage(8, (org.blaze.protobuf.FilterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 9) {
      output.writeMessage(9, (org.blaze.protobuf.UnionExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 10) {
      output.writeMessage(10, (org.blaze.protobuf.SortMergeJoinExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 11) {
      output.writeMessage(11, (org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 12) {
      output.writeMessage(12, (org.blaze.protobuf.BroadcastJoinExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 13) {
      output.writeMessage(13, (org.blaze.protobuf.RenameColumnsExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 14) {
      output.writeMessage(14, (org.blaze.protobuf.EmptyPartitionsExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 15) {
      output.writeMessage(15, (org.blaze.protobuf.AggExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 16) {
      output.writeMessage(16, (org.blaze.protobuf.LimitExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 17) {
      output.writeMessage(17, (org.blaze.protobuf.FFIReaderExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 18) {
      output.writeMessage(18, (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 19) {
      output.writeMessage(19, (org.blaze.protobuf.ExpandExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 20) {
      output.writeMessage(20, (org.blaze.protobuf.RssShuffleWriterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 21) {
      output.writeMessage(21, (org.blaze.protobuf.WindowExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 22) {
      output.writeMessage(22, (org.blaze.protobuf.GenerateExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 23) {
      output.writeMessage(23, (org.blaze.protobuf.ParquetSinkExecNode) physicalPlanType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (physicalPlanTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.blaze.protobuf.DebugExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.blaze.protobuf.IpcReaderExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.blaze.protobuf.IpcWriterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.blaze.protobuf.SortExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.blaze.protobuf.FilterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.blaze.protobuf.UnionExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (org.blaze.protobuf.SortMergeJoinExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (org.blaze.protobuf.BroadcastJoinExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (org.blaze.protobuf.RenameColumnsExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (org.blaze.protobuf.EmptyPartitionsExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (org.blaze.protobuf.AggExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (org.blaze.protobuf.LimitExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (org.blaze.protobuf.FFIReaderExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 18) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 19) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, (org.blaze.protobuf.ExpandExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (org.blaze.protobuf.RssShuffleWriterExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 21) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, (org.blaze.protobuf.WindowExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 22) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, (org.blaze.protobuf.GenerateExecNode) physicalPlanType_);
    }
    if (physicalPlanTypeCase_ == 23) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, (org.blaze.protobuf.ParquetSinkExecNode) physicalPlanType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.blaze.protobuf.PhysicalPlanNode)) {
      return super.equals(obj);
    }
    org.blaze.protobuf.PhysicalPlanNode other = (org.blaze.protobuf.PhysicalPlanNode) obj;

    if (!getPhysicalPlanTypeCase().equals(other.getPhysicalPlanTypeCase())) return false;
    switch (physicalPlanTypeCase_) {
      case 1:
        if (!getDebug()
            .equals(other.getDebug())) return false;
        break;
      case 2:
        if (!getShuffleWriter()
            .equals(other.getShuffleWriter())) return false;
        break;
      case 3:
        if (!getIpcReader()
            .equals(other.getIpcReader())) return false;
        break;
      case 4:
        if (!getIpcWriter()
            .equals(other.getIpcWriter())) return false;
        break;
      case 5:
        if (!getParquetScan()
            .equals(other.getParquetScan())) return false;
        break;
      case 6:
        if (!getProjection()
            .equals(other.getProjection())) return false;
        break;
      case 7:
        if (!getSort()
            .equals(other.getSort())) return false;
        break;
      case 8:
        if (!getFilter()
            .equals(other.getFilter())) return false;
        break;
      case 9:
        if (!getUnion()
            .equals(other.getUnion())) return false;
        break;
      case 10:
        if (!getSortMergeJoin()
            .equals(other.getSortMergeJoin())) return false;
        break;
      case 11:
        if (!getBroadcastJoinBuildHashMap()
            .equals(other.getBroadcastJoinBuildHashMap())) return false;
        break;
      case 12:
        if (!getBroadcastJoin()
            .equals(other.getBroadcastJoin())) return false;
        break;
      case 13:
        if (!getRenameColumns()
            .equals(other.getRenameColumns())) return false;
        break;
      case 14:
        if (!getEmptyPartitions()
            .equals(other.getEmptyPartitions())) return false;
        break;
      case 15:
        if (!getAgg()
            .equals(other.getAgg())) return false;
        break;
      case 16:
        if (!getLimit()
            .equals(other.getLimit())) return false;
        break;
      case 17:
        if (!getFfiReader()
            .equals(other.getFfiReader())) return false;
        break;
      case 18:
        if (!getCoalesceBatches()
            .equals(other.getCoalesceBatches())) return false;
        break;
      case 19:
        if (!getExpand()
            .equals(other.getExpand())) return false;
        break;
      case 20:
        if (!getRssShuffleWriter()
            .equals(other.getRssShuffleWriter())) return false;
        break;
      case 21:
        if (!getWindow()
            .equals(other.getWindow())) return false;
        break;
      case 22:
        if (!getGenerate()
            .equals(other.getGenerate())) return false;
        break;
      case 23:
        if (!getParquetSink()
            .equals(other.getParquetSink())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (physicalPlanTypeCase_) {
      case 1:
        hash = (37 * hash) + DEBUG_FIELD_NUMBER;
        hash = (53 * hash) + getDebug().hashCode();
        break;
      case 2:
        hash = (37 * hash) + SHUFFLE_WRITER_FIELD_NUMBER;
        hash = (53 * hash) + getShuffleWriter().hashCode();
        break;
      case 3:
        hash = (37 * hash) + IPC_READER_FIELD_NUMBER;
        hash = (53 * hash) + getIpcReader().hashCode();
        break;
      case 4:
        hash = (37 * hash) + IPC_WRITER_FIELD_NUMBER;
        hash = (53 * hash) + getIpcWriter().hashCode();
        break;
      case 5:
        hash = (37 * hash) + PARQUET_SCAN_FIELD_NUMBER;
        hash = (53 * hash) + getParquetScan().hashCode();
        break;
      case 6:
        hash = (37 * hash) + PROJECTION_FIELD_NUMBER;
        hash = (53 * hash) + getProjection().hashCode();
        break;
      case 7:
        hash = (37 * hash) + SORT_FIELD_NUMBER;
        hash = (53 * hash) + getSort().hashCode();
        break;
      case 8:
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
        break;
      case 9:
        hash = (37 * hash) + UNION_FIELD_NUMBER;
        hash = (53 * hash) + getUnion().hashCode();
        break;
      case 10:
        hash = (37 * hash) + SORT_MERGE_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getSortMergeJoin().hashCode();
        break;
      case 11:
        hash = (37 * hash) + BROADCAST_JOIN_BUILD_HASH_MAP_FIELD_NUMBER;
        hash = (53 * hash) + getBroadcastJoinBuildHashMap().hashCode();
        break;
      case 12:
        hash = (37 * hash) + BROADCAST_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getBroadcastJoin().hashCode();
        break;
      case 13:
        hash = (37 * hash) + RENAME_COLUMNS_FIELD_NUMBER;
        hash = (53 * hash) + getRenameColumns().hashCode();
        break;
      case 14:
        hash = (37 * hash) + EMPTY_PARTITIONS_FIELD_NUMBER;
        hash = (53 * hash) + getEmptyPartitions().hashCode();
        break;
      case 15:
        hash = (37 * hash) + AGG_FIELD_NUMBER;
        hash = (53 * hash) + getAgg().hashCode();
        break;
      case 16:
        hash = (37 * hash) + LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getLimit().hashCode();
        break;
      case 17:
        hash = (37 * hash) + FFI_READER_FIELD_NUMBER;
        hash = (53 * hash) + getFfiReader().hashCode();
        break;
      case 18:
        hash = (37 * hash) + COALESCE_BATCHES_FIELD_NUMBER;
        hash = (53 * hash) + getCoalesceBatches().hashCode();
        break;
      case 19:
        hash = (37 * hash) + EXPAND_FIELD_NUMBER;
        hash = (53 * hash) + getExpand().hashCode();
        break;
      case 20:
        hash = (37 * hash) + RSS_SHUFFLE_WRITER_FIELD_NUMBER;
        hash = (53 * hash) + getRssShuffleWriter().hashCode();
        break;
      case 21:
        hash = (37 * hash) + WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getWindow().hashCode();
        break;
      case 22:
        hash = (37 * hash) + GENERATE_FIELD_NUMBER;
        hash = (53 * hash) + getGenerate().hashCode();
        break;
      case 23:
        hash = (37 * hash) + PARQUET_SINK_FIELD_NUMBER;
        hash = (53 * hash) + getParquetSink().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.blaze.protobuf.PhysicalPlanNode parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.blaze.protobuf.PhysicalPlanNode prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * PhysicalPlanNode is a nested type
   * </pre>
   *
   * Protobuf type {@code plan.protobuf.PhysicalPlanNode}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:plan.protobuf.PhysicalPlanNode)
      org.blaze.protobuf.PhysicalPlanNodeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.blaze.protobuf.PhysicalPlanNode.class, org.blaze.protobuf.PhysicalPlanNode.Builder.class);
    }

    // Construct using org.blaze.protobuf.PhysicalPlanNode.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (debugBuilder_ != null) {
        debugBuilder_.clear();
      }
      if (shuffleWriterBuilder_ != null) {
        shuffleWriterBuilder_.clear();
      }
      if (ipcReaderBuilder_ != null) {
        ipcReaderBuilder_.clear();
      }
      if (ipcWriterBuilder_ != null) {
        ipcWriterBuilder_.clear();
      }
      if (parquetScanBuilder_ != null) {
        parquetScanBuilder_.clear();
      }
      if (projectionBuilder_ != null) {
        projectionBuilder_.clear();
      }
      if (sortBuilder_ != null) {
        sortBuilder_.clear();
      }
      if (filterBuilder_ != null) {
        filterBuilder_.clear();
      }
      if (unionBuilder_ != null) {
        unionBuilder_.clear();
      }
      if (sortMergeJoinBuilder_ != null) {
        sortMergeJoinBuilder_.clear();
      }
      if (broadcastJoinBuildHashMapBuilder_ != null) {
        broadcastJoinBuildHashMapBuilder_.clear();
      }
      if (broadcastJoinBuilder_ != null) {
        broadcastJoinBuilder_.clear();
      }
      if (renameColumnsBuilder_ != null) {
        renameColumnsBuilder_.clear();
      }
      if (emptyPartitionsBuilder_ != null) {
        emptyPartitionsBuilder_.clear();
      }
      if (aggBuilder_ != null) {
        aggBuilder_.clear();
      }
      if (limitBuilder_ != null) {
        limitBuilder_.clear();
      }
      if (ffiReaderBuilder_ != null) {
        ffiReaderBuilder_.clear();
      }
      if (coalesceBatchesBuilder_ != null) {
        coalesceBatchesBuilder_.clear();
      }
      if (expandBuilder_ != null) {
        expandBuilder_.clear();
      }
      if (rssShuffleWriterBuilder_ != null) {
        rssShuffleWriterBuilder_.clear();
      }
      if (windowBuilder_ != null) {
        windowBuilder_.clear();
      }
      if (generateBuilder_ != null) {
        generateBuilder_.clear();
      }
      if (parquetSinkBuilder_ != null) {
        parquetSinkBuilder_.clear();
      }
      physicalPlanTypeCase_ = 0;
      physicalPlanType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.blaze.protobuf.BlazeProto.internal_static_plan_protobuf_PhysicalPlanNode_descriptor;
    }

    @java.lang.Override
    public org.blaze.protobuf.PhysicalPlanNode getDefaultInstanceForType() {
      return org.blaze.protobuf.PhysicalPlanNode.getDefaultInstance();
    }

    @java.lang.Override
    public org.blaze.protobuf.PhysicalPlanNode build() {
      org.blaze.protobuf.PhysicalPlanNode result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.blaze.protobuf.PhysicalPlanNode buildPartial() {
      org.blaze.protobuf.PhysicalPlanNode result = new org.blaze.protobuf.PhysicalPlanNode(this);
      if (physicalPlanTypeCase_ == 1) {
        if (debugBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = debugBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 2) {
        if (shuffleWriterBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = shuffleWriterBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 3) {
        if (ipcReaderBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = ipcReaderBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 4) {
        if (ipcWriterBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = ipcWriterBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 5) {
        if (parquetScanBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = parquetScanBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 6) {
        if (projectionBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = projectionBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 7) {
        if (sortBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = sortBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 8) {
        if (filterBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = filterBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 9) {
        if (unionBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = unionBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 10) {
        if (sortMergeJoinBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = sortMergeJoinBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 11) {
        if (broadcastJoinBuildHashMapBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = broadcastJoinBuildHashMapBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 12) {
        if (broadcastJoinBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = broadcastJoinBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 13) {
        if (renameColumnsBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = renameColumnsBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 14) {
        if (emptyPartitionsBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = emptyPartitionsBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 15) {
        if (aggBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = aggBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 16) {
        if (limitBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = limitBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 17) {
        if (ffiReaderBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = ffiReaderBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 18) {
        if (coalesceBatchesBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = coalesceBatchesBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 19) {
        if (expandBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = expandBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 20) {
        if (rssShuffleWriterBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = rssShuffleWriterBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 21) {
        if (windowBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = windowBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 22) {
        if (generateBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = generateBuilder_.build();
        }
      }
      if (physicalPlanTypeCase_ == 23) {
        if (parquetSinkBuilder_ == null) {
          result.physicalPlanType_ = physicalPlanType_;
        } else {
          result.physicalPlanType_ = parquetSinkBuilder_.build();
        }
      }
      result.physicalPlanTypeCase_ = physicalPlanTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.blaze.protobuf.PhysicalPlanNode) {
        return mergeFrom((org.blaze.protobuf.PhysicalPlanNode)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.blaze.protobuf.PhysicalPlanNode other) {
      if (other == org.blaze.protobuf.PhysicalPlanNode.getDefaultInstance()) return this;
      switch (other.getPhysicalPlanTypeCase()) {
        case DEBUG: {
          mergeDebug(other.getDebug());
          break;
        }
        case SHUFFLE_WRITER: {
          mergeShuffleWriter(other.getShuffleWriter());
          break;
        }
        case IPC_READER: {
          mergeIpcReader(other.getIpcReader());
          break;
        }
        case IPC_WRITER: {
          mergeIpcWriter(other.getIpcWriter());
          break;
        }
        case PARQUET_SCAN: {
          mergeParquetScan(other.getParquetScan());
          break;
        }
        case PROJECTION: {
          mergeProjection(other.getProjection());
          break;
        }
        case SORT: {
          mergeSort(other.getSort());
          break;
        }
        case FILTER: {
          mergeFilter(other.getFilter());
          break;
        }
        case UNION: {
          mergeUnion(other.getUnion());
          break;
        }
        case SORT_MERGE_JOIN: {
          mergeSortMergeJoin(other.getSortMergeJoin());
          break;
        }
        case BROADCAST_JOIN_BUILD_HASH_MAP: {
          mergeBroadcastJoinBuildHashMap(other.getBroadcastJoinBuildHashMap());
          break;
        }
        case BROADCAST_JOIN: {
          mergeBroadcastJoin(other.getBroadcastJoin());
          break;
        }
        case RENAME_COLUMNS: {
          mergeRenameColumns(other.getRenameColumns());
          break;
        }
        case EMPTY_PARTITIONS: {
          mergeEmptyPartitions(other.getEmptyPartitions());
          break;
        }
        case AGG: {
          mergeAgg(other.getAgg());
          break;
        }
        case LIMIT: {
          mergeLimit(other.getLimit());
          break;
        }
        case FFI_READER: {
          mergeFfiReader(other.getFfiReader());
          break;
        }
        case COALESCE_BATCHES: {
          mergeCoalesceBatches(other.getCoalesceBatches());
          break;
        }
        case EXPAND: {
          mergeExpand(other.getExpand());
          break;
        }
        case RSS_SHUFFLE_WRITER: {
          mergeRssShuffleWriter(other.getRssShuffleWriter());
          break;
        }
        case WINDOW: {
          mergeWindow(other.getWindow());
          break;
        }
        case GENERATE: {
          mergeGenerate(other.getGenerate());
          break;
        }
        case PARQUET_SINK: {
          mergeParquetSink(other.getParquetSink());
          break;
        }
        case PHYSICALPLANTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getDebugFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getShuffleWriterFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getIpcReaderFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getIpcWriterFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getParquetScanFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getProjectionFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getSortFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 7;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getFilterFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 8;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getUnionFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 9;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getSortMergeJoinFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 10;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getBroadcastJoinBuildHashMapFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 11;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getBroadcastJoinFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 12;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getRenameColumnsFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 13;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getEmptyPartitionsFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 14;
              break;
            } // case 114
            case 122: {
              input.readMessage(
                  getAggFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 15;
              break;
            } // case 122
            case 130: {
              input.readMessage(
                  getLimitFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 16;
              break;
            } // case 130
            case 138: {
              input.readMessage(
                  getFfiReaderFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 17;
              break;
            } // case 138
            case 146: {
              input.readMessage(
                  getCoalesceBatchesFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 18;
              break;
            } // case 146
            case 154: {
              input.readMessage(
                  getExpandFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 19;
              break;
            } // case 154
            case 162: {
              input.readMessage(
                  getRssShuffleWriterFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 20;
              break;
            } // case 162
            case 170: {
              input.readMessage(
                  getWindowFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 21;
              break;
            } // case 170
            case 178: {
              input.readMessage(
                  getGenerateFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 22;
              break;
            } // case 178
            case 186: {
              input.readMessage(
                  getParquetSinkFieldBuilder().getBuilder(),
                  extensionRegistry);
              physicalPlanTypeCase_ = 23;
              break;
            } // case 186
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int physicalPlanTypeCase_ = 0;
    private java.lang.Object physicalPlanType_;
    public PhysicalPlanTypeCase
        getPhysicalPlanTypeCase() {
      return PhysicalPlanTypeCase.forNumber(
          physicalPlanTypeCase_);
    }

    public Builder clearPhysicalPlanType() {
      physicalPlanTypeCase_ = 0;
      physicalPlanType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.DebugExecNode, org.blaze.protobuf.DebugExecNode.Builder, org.blaze.protobuf.DebugExecNodeOrBuilder> debugBuilder_;
    /**
     * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
     * @return Whether the debug field is set.
     */
    @java.lang.Override
    public boolean hasDebug() {
      return physicalPlanTypeCase_ == 1;
    }
    /**
     * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
     * @return The debug.
     */
    @java.lang.Override
    public org.blaze.protobuf.DebugExecNode getDebug() {
      if (debugBuilder_ == null) {
        if (physicalPlanTypeCase_ == 1) {
          return (org.blaze.protobuf.DebugExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.DebugExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 1) {
          return debugBuilder_.getMessage();
        }
        return org.blaze.protobuf.DebugExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
     */
    public Builder setDebug(org.blaze.protobuf.DebugExecNode value) {
      if (debugBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        debugBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
     */
    public Builder setDebug(
        org.blaze.protobuf.DebugExecNode.Builder builderForValue) {
      if (debugBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        debugBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
     */
    public Builder mergeDebug(org.blaze.protobuf.DebugExecNode value) {
      if (debugBuilder_ == null) {
        if (physicalPlanTypeCase_ == 1 &&
            physicalPlanType_ != org.blaze.protobuf.DebugExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.DebugExecNode.newBuilder((org.blaze.protobuf.DebugExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 1) {
          debugBuilder_.mergeFrom(value);
        } else {
          debugBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
     */
    public Builder clearDebug() {
      if (debugBuilder_ == null) {
        if (physicalPlanTypeCase_ == 1) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 1) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        debugBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
     */
    public org.blaze.protobuf.DebugExecNode.Builder getDebugBuilder() {
      return getDebugFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.DebugExecNodeOrBuilder getDebugOrBuilder() {
      if ((physicalPlanTypeCase_ == 1) && (debugBuilder_ != null)) {
        return debugBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 1) {
          return (org.blaze.protobuf.DebugExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.DebugExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.DebugExecNode debug = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.DebugExecNode, org.blaze.protobuf.DebugExecNode.Builder, org.blaze.protobuf.DebugExecNodeOrBuilder> 
        getDebugFieldBuilder() {
      if (debugBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 1)) {
          physicalPlanType_ = org.blaze.protobuf.DebugExecNode.getDefaultInstance();
        }
        debugBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.DebugExecNode, org.blaze.protobuf.DebugExecNode.Builder, org.blaze.protobuf.DebugExecNodeOrBuilder>(
                (org.blaze.protobuf.DebugExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 1;
      onChanged();;
      return debugBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ShuffleWriterExecNode, org.blaze.protobuf.ShuffleWriterExecNode.Builder, org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder> shuffleWriterBuilder_;
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
     * @return Whether the shuffleWriter field is set.
     */
    @java.lang.Override
    public boolean hasShuffleWriter() {
      return physicalPlanTypeCase_ == 2;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
     * @return The shuffleWriter.
     */
    @java.lang.Override
    public org.blaze.protobuf.ShuffleWriterExecNode getShuffleWriter() {
      if (shuffleWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 2) {
          return (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 2) {
          return shuffleWriterBuilder_.getMessage();
        }
        return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
     */
    public Builder setShuffleWriter(org.blaze.protobuf.ShuffleWriterExecNode value) {
      if (shuffleWriterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        shuffleWriterBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
     */
    public Builder setShuffleWriter(
        org.blaze.protobuf.ShuffleWriterExecNode.Builder builderForValue) {
      if (shuffleWriterBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        shuffleWriterBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
     */
    public Builder mergeShuffleWriter(org.blaze.protobuf.ShuffleWriterExecNode value) {
      if (shuffleWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 2 &&
            physicalPlanType_ != org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.ShuffleWriterExecNode.newBuilder((org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 2) {
          shuffleWriterBuilder_.mergeFrom(value);
        } else {
          shuffleWriterBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
     */
    public Builder clearShuffleWriter() {
      if (shuffleWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 2) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 2) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        shuffleWriterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
     */
    public org.blaze.protobuf.ShuffleWriterExecNode.Builder getShuffleWriterBuilder() {
      return getShuffleWriterFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder getShuffleWriterOrBuilder() {
      if ((physicalPlanTypeCase_ == 2) && (shuffleWriterBuilder_ != null)) {
        return shuffleWriterBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 2) {
          return (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ShuffleWriterExecNode shuffle_writer = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ShuffleWriterExecNode, org.blaze.protobuf.ShuffleWriterExecNode.Builder, org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder> 
        getShuffleWriterFieldBuilder() {
      if (shuffleWriterBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 2)) {
          physicalPlanType_ = org.blaze.protobuf.ShuffleWriterExecNode.getDefaultInstance();
        }
        shuffleWriterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ShuffleWriterExecNode, org.blaze.protobuf.ShuffleWriterExecNode.Builder, org.blaze.protobuf.ShuffleWriterExecNodeOrBuilder>(
                (org.blaze.protobuf.ShuffleWriterExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 2;
      onChanged();;
      return shuffleWriterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.IpcReaderExecNode, org.blaze.protobuf.IpcReaderExecNode.Builder, org.blaze.protobuf.IpcReaderExecNodeOrBuilder> ipcReaderBuilder_;
    /**
     * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
     * @return Whether the ipcReader field is set.
     */
    @java.lang.Override
    public boolean hasIpcReader() {
      return physicalPlanTypeCase_ == 3;
    }
    /**
     * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
     * @return The ipcReader.
     */
    @java.lang.Override
    public org.blaze.protobuf.IpcReaderExecNode getIpcReader() {
      if (ipcReaderBuilder_ == null) {
        if (physicalPlanTypeCase_ == 3) {
          return (org.blaze.protobuf.IpcReaderExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.IpcReaderExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 3) {
          return ipcReaderBuilder_.getMessage();
        }
        return org.blaze.protobuf.IpcReaderExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
     */
    public Builder setIpcReader(org.blaze.protobuf.IpcReaderExecNode value) {
      if (ipcReaderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        ipcReaderBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
     */
    public Builder setIpcReader(
        org.blaze.protobuf.IpcReaderExecNode.Builder builderForValue) {
      if (ipcReaderBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        ipcReaderBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
     */
    public Builder mergeIpcReader(org.blaze.protobuf.IpcReaderExecNode value) {
      if (ipcReaderBuilder_ == null) {
        if (physicalPlanTypeCase_ == 3 &&
            physicalPlanType_ != org.blaze.protobuf.IpcReaderExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.IpcReaderExecNode.newBuilder((org.blaze.protobuf.IpcReaderExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 3) {
          ipcReaderBuilder_.mergeFrom(value);
        } else {
          ipcReaderBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
     */
    public Builder clearIpcReader() {
      if (ipcReaderBuilder_ == null) {
        if (physicalPlanTypeCase_ == 3) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 3) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        ipcReaderBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
     */
    public org.blaze.protobuf.IpcReaderExecNode.Builder getIpcReaderBuilder() {
      return getIpcReaderFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.IpcReaderExecNodeOrBuilder getIpcReaderOrBuilder() {
      if ((physicalPlanTypeCase_ == 3) && (ipcReaderBuilder_ != null)) {
        return ipcReaderBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 3) {
          return (org.blaze.protobuf.IpcReaderExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.IpcReaderExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.IpcReaderExecNode ipc_reader = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.IpcReaderExecNode, org.blaze.protobuf.IpcReaderExecNode.Builder, org.blaze.protobuf.IpcReaderExecNodeOrBuilder> 
        getIpcReaderFieldBuilder() {
      if (ipcReaderBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 3)) {
          physicalPlanType_ = org.blaze.protobuf.IpcReaderExecNode.getDefaultInstance();
        }
        ipcReaderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.IpcReaderExecNode, org.blaze.protobuf.IpcReaderExecNode.Builder, org.blaze.protobuf.IpcReaderExecNodeOrBuilder>(
                (org.blaze.protobuf.IpcReaderExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 3;
      onChanged();;
      return ipcReaderBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.IpcWriterExecNode, org.blaze.protobuf.IpcWriterExecNode.Builder, org.blaze.protobuf.IpcWriterExecNodeOrBuilder> ipcWriterBuilder_;
    /**
     * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
     * @return Whether the ipcWriter field is set.
     */
    @java.lang.Override
    public boolean hasIpcWriter() {
      return physicalPlanTypeCase_ == 4;
    }
    /**
     * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
     * @return The ipcWriter.
     */
    @java.lang.Override
    public org.blaze.protobuf.IpcWriterExecNode getIpcWriter() {
      if (ipcWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 4) {
          return (org.blaze.protobuf.IpcWriterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.IpcWriterExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 4) {
          return ipcWriterBuilder_.getMessage();
        }
        return org.blaze.protobuf.IpcWriterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
     */
    public Builder setIpcWriter(org.blaze.protobuf.IpcWriterExecNode value) {
      if (ipcWriterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        ipcWriterBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
     */
    public Builder setIpcWriter(
        org.blaze.protobuf.IpcWriterExecNode.Builder builderForValue) {
      if (ipcWriterBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        ipcWriterBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
     */
    public Builder mergeIpcWriter(org.blaze.protobuf.IpcWriterExecNode value) {
      if (ipcWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 4 &&
            physicalPlanType_ != org.blaze.protobuf.IpcWriterExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.IpcWriterExecNode.newBuilder((org.blaze.protobuf.IpcWriterExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 4) {
          ipcWriterBuilder_.mergeFrom(value);
        } else {
          ipcWriterBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
     */
    public Builder clearIpcWriter() {
      if (ipcWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 4) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 4) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        ipcWriterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
     */
    public org.blaze.protobuf.IpcWriterExecNode.Builder getIpcWriterBuilder() {
      return getIpcWriterFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.IpcWriterExecNodeOrBuilder getIpcWriterOrBuilder() {
      if ((physicalPlanTypeCase_ == 4) && (ipcWriterBuilder_ != null)) {
        return ipcWriterBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 4) {
          return (org.blaze.protobuf.IpcWriterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.IpcWriterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.IpcWriterExecNode ipc_writer = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.IpcWriterExecNode, org.blaze.protobuf.IpcWriterExecNode.Builder, org.blaze.protobuf.IpcWriterExecNodeOrBuilder> 
        getIpcWriterFieldBuilder() {
      if (ipcWriterBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 4)) {
          physicalPlanType_ = org.blaze.protobuf.IpcWriterExecNode.getDefaultInstance();
        }
        ipcWriterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.IpcWriterExecNode, org.blaze.protobuf.IpcWriterExecNode.Builder, org.blaze.protobuf.IpcWriterExecNodeOrBuilder>(
                (org.blaze.protobuf.IpcWriterExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 4;
      onChanged();;
      return ipcWriterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ParquetScanExecNode, org.blaze.protobuf.ParquetScanExecNode.Builder, org.blaze.protobuf.ParquetScanExecNodeOrBuilder> parquetScanBuilder_;
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
     * @return Whether the parquetScan field is set.
     */
    @java.lang.Override
    public boolean hasParquetScan() {
      return physicalPlanTypeCase_ == 5;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
     * @return The parquetScan.
     */
    @java.lang.Override
    public org.blaze.protobuf.ParquetScanExecNode getParquetScan() {
      if (parquetScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 5) {
          return (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 5) {
          return parquetScanBuilder_.getMessage();
        }
        return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
     */
    public Builder setParquetScan(org.blaze.protobuf.ParquetScanExecNode value) {
      if (parquetScanBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        parquetScanBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
     */
    public Builder setParquetScan(
        org.blaze.protobuf.ParquetScanExecNode.Builder builderForValue) {
      if (parquetScanBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        parquetScanBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
     */
    public Builder mergeParquetScan(org.blaze.protobuf.ParquetScanExecNode value) {
      if (parquetScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 5 &&
            physicalPlanType_ != org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.ParquetScanExecNode.newBuilder((org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 5) {
          parquetScanBuilder_.mergeFrom(value);
        } else {
          parquetScanBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
     */
    public Builder clearParquetScan() {
      if (parquetScanBuilder_ == null) {
        if (physicalPlanTypeCase_ == 5) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 5) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        parquetScanBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
     */
    public org.blaze.protobuf.ParquetScanExecNode.Builder getParquetScanBuilder() {
      return getParquetScanFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ParquetScanExecNodeOrBuilder getParquetScanOrBuilder() {
      if ((physicalPlanTypeCase_ == 5) && (parquetScanBuilder_ != null)) {
        return parquetScanBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 5) {
          return (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ParquetScanExecNode parquet_scan = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ParquetScanExecNode, org.blaze.protobuf.ParquetScanExecNode.Builder, org.blaze.protobuf.ParquetScanExecNodeOrBuilder> 
        getParquetScanFieldBuilder() {
      if (parquetScanBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 5)) {
          physicalPlanType_ = org.blaze.protobuf.ParquetScanExecNode.getDefaultInstance();
        }
        parquetScanBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ParquetScanExecNode, org.blaze.protobuf.ParquetScanExecNode.Builder, org.blaze.protobuf.ParquetScanExecNodeOrBuilder>(
                (org.blaze.protobuf.ParquetScanExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 5;
      onChanged();;
      return parquetScanBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ProjectionExecNode, org.blaze.protobuf.ProjectionExecNode.Builder, org.blaze.protobuf.ProjectionExecNodeOrBuilder> projectionBuilder_;
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
     * @return Whether the projection field is set.
     */
    @java.lang.Override
    public boolean hasProjection() {
      return physicalPlanTypeCase_ == 6;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
     * @return The projection.
     */
    @java.lang.Override
    public org.blaze.protobuf.ProjectionExecNode getProjection() {
      if (projectionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 6) {
          return (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 6) {
          return projectionBuilder_.getMessage();
        }
        return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
     */
    public Builder setProjection(org.blaze.protobuf.ProjectionExecNode value) {
      if (projectionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        projectionBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
     */
    public Builder setProjection(
        org.blaze.protobuf.ProjectionExecNode.Builder builderForValue) {
      if (projectionBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        projectionBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
     */
    public Builder mergeProjection(org.blaze.protobuf.ProjectionExecNode value) {
      if (projectionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 6 &&
            physicalPlanType_ != org.blaze.protobuf.ProjectionExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.ProjectionExecNode.newBuilder((org.blaze.protobuf.ProjectionExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 6) {
          projectionBuilder_.mergeFrom(value);
        } else {
          projectionBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
     */
    public Builder clearProjection() {
      if (projectionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 6) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 6) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        projectionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
     */
    public org.blaze.protobuf.ProjectionExecNode.Builder getProjectionBuilder() {
      return getProjectionFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ProjectionExecNodeOrBuilder getProjectionOrBuilder() {
      if ((physicalPlanTypeCase_ == 6) && (projectionBuilder_ != null)) {
        return projectionBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 6) {
          return (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ProjectionExecNode projection = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ProjectionExecNode, org.blaze.protobuf.ProjectionExecNode.Builder, org.blaze.protobuf.ProjectionExecNodeOrBuilder> 
        getProjectionFieldBuilder() {
      if (projectionBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 6)) {
          physicalPlanType_ = org.blaze.protobuf.ProjectionExecNode.getDefaultInstance();
        }
        projectionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ProjectionExecNode, org.blaze.protobuf.ProjectionExecNode.Builder, org.blaze.protobuf.ProjectionExecNodeOrBuilder>(
                (org.blaze.protobuf.ProjectionExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 6;
      onChanged();;
      return projectionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.SortExecNode, org.blaze.protobuf.SortExecNode.Builder, org.blaze.protobuf.SortExecNodeOrBuilder> sortBuilder_;
    /**
     * <code>.plan.protobuf.SortExecNode sort = 7;</code>
     * @return Whether the sort field is set.
     */
    @java.lang.Override
    public boolean hasSort() {
      return physicalPlanTypeCase_ == 7;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 7;</code>
     * @return The sort.
     */
    @java.lang.Override
    public org.blaze.protobuf.SortExecNode getSort() {
      if (sortBuilder_ == null) {
        if (physicalPlanTypeCase_ == 7) {
          return (org.blaze.protobuf.SortExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.SortExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 7) {
          return sortBuilder_.getMessage();
        }
        return org.blaze.protobuf.SortExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 7;</code>
     */
    public Builder setSort(org.blaze.protobuf.SortExecNode value) {
      if (sortBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        sortBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 7;</code>
     */
    public Builder setSort(
        org.blaze.protobuf.SortExecNode.Builder builderForValue) {
      if (sortBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        sortBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 7;</code>
     */
    public Builder mergeSort(org.blaze.protobuf.SortExecNode value) {
      if (sortBuilder_ == null) {
        if (physicalPlanTypeCase_ == 7 &&
            physicalPlanType_ != org.blaze.protobuf.SortExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.SortExecNode.newBuilder((org.blaze.protobuf.SortExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 7) {
          sortBuilder_.mergeFrom(value);
        } else {
          sortBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 7;</code>
     */
    public Builder clearSort() {
      if (sortBuilder_ == null) {
        if (physicalPlanTypeCase_ == 7) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 7) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        sortBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 7;</code>
     */
    public org.blaze.protobuf.SortExecNode.Builder getSortBuilder() {
      return getSortFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 7;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.SortExecNodeOrBuilder getSortOrBuilder() {
      if ((physicalPlanTypeCase_ == 7) && (sortBuilder_ != null)) {
        return sortBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 7) {
          return (org.blaze.protobuf.SortExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.SortExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.SortExecNode sort = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.SortExecNode, org.blaze.protobuf.SortExecNode.Builder, org.blaze.protobuf.SortExecNodeOrBuilder> 
        getSortFieldBuilder() {
      if (sortBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 7)) {
          physicalPlanType_ = org.blaze.protobuf.SortExecNode.getDefaultInstance();
        }
        sortBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.SortExecNode, org.blaze.protobuf.SortExecNode.Builder, org.blaze.protobuf.SortExecNodeOrBuilder>(
                (org.blaze.protobuf.SortExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 7;
      onChanged();;
      return sortBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.FilterExecNode, org.blaze.protobuf.FilterExecNode.Builder, org.blaze.protobuf.FilterExecNodeOrBuilder> filterBuilder_;
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
     * @return Whether the filter field is set.
     */
    @java.lang.Override
    public boolean hasFilter() {
      return physicalPlanTypeCase_ == 8;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
     * @return The filter.
     */
    @java.lang.Override
    public org.blaze.protobuf.FilterExecNode getFilter() {
      if (filterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 8) {
          return (org.blaze.protobuf.FilterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 8) {
          return filterBuilder_.getMessage();
        }
        return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
     */
    public Builder setFilter(org.blaze.protobuf.FilterExecNode value) {
      if (filterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        filterBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
     */
    public Builder setFilter(
        org.blaze.protobuf.FilterExecNode.Builder builderForValue) {
      if (filterBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        filterBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
     */
    public Builder mergeFilter(org.blaze.protobuf.FilterExecNode value) {
      if (filterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 8 &&
            physicalPlanType_ != org.blaze.protobuf.FilterExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.FilterExecNode.newBuilder((org.blaze.protobuf.FilterExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 8) {
          filterBuilder_.mergeFrom(value);
        } else {
          filterBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
     */
    public Builder clearFilter() {
      if (filterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 8) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 8) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        filterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
     */
    public org.blaze.protobuf.FilterExecNode.Builder getFilterBuilder() {
      return getFilterFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.FilterExecNodeOrBuilder getFilterOrBuilder() {
      if ((physicalPlanTypeCase_ == 8) && (filterBuilder_ != null)) {
        return filterBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 8) {
          return (org.blaze.protobuf.FilterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.FilterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.FilterExecNode filter = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.FilterExecNode, org.blaze.protobuf.FilterExecNode.Builder, org.blaze.protobuf.FilterExecNodeOrBuilder> 
        getFilterFieldBuilder() {
      if (filterBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 8)) {
          physicalPlanType_ = org.blaze.protobuf.FilterExecNode.getDefaultInstance();
        }
        filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.FilterExecNode, org.blaze.protobuf.FilterExecNode.Builder, org.blaze.protobuf.FilterExecNodeOrBuilder>(
                (org.blaze.protobuf.FilterExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 8;
      onChanged();;
      return filterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.UnionExecNode, org.blaze.protobuf.UnionExecNode.Builder, org.blaze.protobuf.UnionExecNodeOrBuilder> unionBuilder_;
    /**
     * <code>.plan.protobuf.UnionExecNode union = 9;</code>
     * @return Whether the union field is set.
     */
    @java.lang.Override
    public boolean hasUnion() {
      return physicalPlanTypeCase_ == 9;
    }
    /**
     * <code>.plan.protobuf.UnionExecNode union = 9;</code>
     * @return The union.
     */
    @java.lang.Override
    public org.blaze.protobuf.UnionExecNode getUnion() {
      if (unionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 9) {
          return (org.blaze.protobuf.UnionExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.UnionExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 9) {
          return unionBuilder_.getMessage();
        }
        return org.blaze.protobuf.UnionExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.UnionExecNode union = 9;</code>
     */
    public Builder setUnion(org.blaze.protobuf.UnionExecNode value) {
      if (unionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        unionBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.plan.protobuf.UnionExecNode union = 9;</code>
     */
    public Builder setUnion(
        org.blaze.protobuf.UnionExecNode.Builder builderForValue) {
      if (unionBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        unionBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.plan.protobuf.UnionExecNode union = 9;</code>
     */
    public Builder mergeUnion(org.blaze.protobuf.UnionExecNode value) {
      if (unionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 9 &&
            physicalPlanType_ != org.blaze.protobuf.UnionExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.UnionExecNode.newBuilder((org.blaze.protobuf.UnionExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 9) {
          unionBuilder_.mergeFrom(value);
        } else {
          unionBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.plan.protobuf.UnionExecNode union = 9;</code>
     */
    public Builder clearUnion() {
      if (unionBuilder_ == null) {
        if (physicalPlanTypeCase_ == 9) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 9) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        unionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.UnionExecNode union = 9;</code>
     */
    public org.blaze.protobuf.UnionExecNode.Builder getUnionBuilder() {
      return getUnionFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.UnionExecNode union = 9;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.UnionExecNodeOrBuilder getUnionOrBuilder() {
      if ((physicalPlanTypeCase_ == 9) && (unionBuilder_ != null)) {
        return unionBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 9) {
          return (org.blaze.protobuf.UnionExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.UnionExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.UnionExecNode union = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.UnionExecNode, org.blaze.protobuf.UnionExecNode.Builder, org.blaze.protobuf.UnionExecNodeOrBuilder> 
        getUnionFieldBuilder() {
      if (unionBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 9)) {
          physicalPlanType_ = org.blaze.protobuf.UnionExecNode.getDefaultInstance();
        }
        unionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.UnionExecNode, org.blaze.protobuf.UnionExecNode.Builder, org.blaze.protobuf.UnionExecNodeOrBuilder>(
                (org.blaze.protobuf.UnionExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 9;
      onChanged();;
      return unionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.SortMergeJoinExecNode, org.blaze.protobuf.SortMergeJoinExecNode.Builder, org.blaze.protobuf.SortMergeJoinExecNodeOrBuilder> sortMergeJoinBuilder_;
    /**
     * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
     * @return Whether the sortMergeJoin field is set.
     */
    @java.lang.Override
    public boolean hasSortMergeJoin() {
      return physicalPlanTypeCase_ == 10;
    }
    /**
     * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
     * @return The sortMergeJoin.
     */
    @java.lang.Override
    public org.blaze.protobuf.SortMergeJoinExecNode getSortMergeJoin() {
      if (sortMergeJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 10) {
          return (org.blaze.protobuf.SortMergeJoinExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.SortMergeJoinExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 10) {
          return sortMergeJoinBuilder_.getMessage();
        }
        return org.blaze.protobuf.SortMergeJoinExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
     */
    public Builder setSortMergeJoin(org.blaze.protobuf.SortMergeJoinExecNode value) {
      if (sortMergeJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        sortMergeJoinBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
     */
    public Builder setSortMergeJoin(
        org.blaze.protobuf.SortMergeJoinExecNode.Builder builderForValue) {
      if (sortMergeJoinBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        sortMergeJoinBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
     */
    public Builder mergeSortMergeJoin(org.blaze.protobuf.SortMergeJoinExecNode value) {
      if (sortMergeJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 10 &&
            physicalPlanType_ != org.blaze.protobuf.SortMergeJoinExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.SortMergeJoinExecNode.newBuilder((org.blaze.protobuf.SortMergeJoinExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 10) {
          sortMergeJoinBuilder_.mergeFrom(value);
        } else {
          sortMergeJoinBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
     */
    public Builder clearSortMergeJoin() {
      if (sortMergeJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 10) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 10) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        sortMergeJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
     */
    public org.blaze.protobuf.SortMergeJoinExecNode.Builder getSortMergeJoinBuilder() {
      return getSortMergeJoinFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.SortMergeJoinExecNodeOrBuilder getSortMergeJoinOrBuilder() {
      if ((physicalPlanTypeCase_ == 10) && (sortMergeJoinBuilder_ != null)) {
        return sortMergeJoinBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 10) {
          return (org.blaze.protobuf.SortMergeJoinExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.SortMergeJoinExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.SortMergeJoinExecNode sort_merge_join = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.SortMergeJoinExecNode, org.blaze.protobuf.SortMergeJoinExecNode.Builder, org.blaze.protobuf.SortMergeJoinExecNodeOrBuilder> 
        getSortMergeJoinFieldBuilder() {
      if (sortMergeJoinBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 10)) {
          physicalPlanType_ = org.blaze.protobuf.SortMergeJoinExecNode.getDefaultInstance();
        }
        sortMergeJoinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.SortMergeJoinExecNode, org.blaze.protobuf.SortMergeJoinExecNode.Builder, org.blaze.protobuf.SortMergeJoinExecNodeOrBuilder>(
                (org.blaze.protobuf.SortMergeJoinExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 10;
      onChanged();;
      return sortMergeJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode, org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.Builder, org.blaze.protobuf.BroadcastJoinBuildHashMapExecNodeOrBuilder> broadcastJoinBuildHashMapBuilder_;
    /**
     * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
     * @return Whether the broadcastJoinBuildHashMap field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastJoinBuildHashMap() {
      return physicalPlanTypeCase_ == 11;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
     * @return The broadcastJoinBuildHashMap.
     */
    @java.lang.Override
    public org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode getBroadcastJoinBuildHashMap() {
      if (broadcastJoinBuildHashMapBuilder_ == null) {
        if (physicalPlanTypeCase_ == 11) {
          return (org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 11) {
          return broadcastJoinBuildHashMapBuilder_.getMessage();
        }
        return org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
     */
    public Builder setBroadcastJoinBuildHashMap(org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode value) {
      if (broadcastJoinBuildHashMapBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        broadcastJoinBuildHashMapBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
     */
    public Builder setBroadcastJoinBuildHashMap(
        org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.Builder builderForValue) {
      if (broadcastJoinBuildHashMapBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        broadcastJoinBuildHashMapBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
     */
    public Builder mergeBroadcastJoinBuildHashMap(org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode value) {
      if (broadcastJoinBuildHashMapBuilder_ == null) {
        if (physicalPlanTypeCase_ == 11 &&
            physicalPlanType_ != org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.newBuilder((org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 11) {
          broadcastJoinBuildHashMapBuilder_.mergeFrom(value);
        } else {
          broadcastJoinBuildHashMapBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
     */
    public Builder clearBroadcastJoinBuildHashMap() {
      if (broadcastJoinBuildHashMapBuilder_ == null) {
        if (physicalPlanTypeCase_ == 11) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 11) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        broadcastJoinBuildHashMapBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
     */
    public org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.Builder getBroadcastJoinBuildHashMapBuilder() {
      return getBroadcastJoinBuildHashMapFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.BroadcastJoinBuildHashMapExecNodeOrBuilder getBroadcastJoinBuildHashMapOrBuilder() {
      if ((physicalPlanTypeCase_ == 11) && (broadcastJoinBuildHashMapBuilder_ != null)) {
        return broadcastJoinBuildHashMapBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 11) {
          return (org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinBuildHashMapExecNode broadcast_join_build_hash_map = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode, org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.Builder, org.blaze.protobuf.BroadcastJoinBuildHashMapExecNodeOrBuilder> 
        getBroadcastJoinBuildHashMapFieldBuilder() {
      if (broadcastJoinBuildHashMapBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 11)) {
          physicalPlanType_ = org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.getDefaultInstance();
        }
        broadcastJoinBuildHashMapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode, org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode.Builder, org.blaze.protobuf.BroadcastJoinBuildHashMapExecNodeOrBuilder>(
                (org.blaze.protobuf.BroadcastJoinBuildHashMapExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 11;
      onChanged();;
      return broadcastJoinBuildHashMapBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.BroadcastJoinExecNode, org.blaze.protobuf.BroadcastJoinExecNode.Builder, org.blaze.protobuf.BroadcastJoinExecNodeOrBuilder> broadcastJoinBuilder_;
    /**
     * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
     * @return Whether the broadcastJoin field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastJoin() {
      return physicalPlanTypeCase_ == 12;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
     * @return The broadcastJoin.
     */
    @java.lang.Override
    public org.blaze.protobuf.BroadcastJoinExecNode getBroadcastJoin() {
      if (broadcastJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 12) {
          return (org.blaze.protobuf.BroadcastJoinExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.BroadcastJoinExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 12) {
          return broadcastJoinBuilder_.getMessage();
        }
        return org.blaze.protobuf.BroadcastJoinExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
     */
    public Builder setBroadcastJoin(org.blaze.protobuf.BroadcastJoinExecNode value) {
      if (broadcastJoinBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        broadcastJoinBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
     */
    public Builder setBroadcastJoin(
        org.blaze.protobuf.BroadcastJoinExecNode.Builder builderForValue) {
      if (broadcastJoinBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        broadcastJoinBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
     */
    public Builder mergeBroadcastJoin(org.blaze.protobuf.BroadcastJoinExecNode value) {
      if (broadcastJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 12 &&
            physicalPlanType_ != org.blaze.protobuf.BroadcastJoinExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.BroadcastJoinExecNode.newBuilder((org.blaze.protobuf.BroadcastJoinExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 12) {
          broadcastJoinBuilder_.mergeFrom(value);
        } else {
          broadcastJoinBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
     */
    public Builder clearBroadcastJoin() {
      if (broadcastJoinBuilder_ == null) {
        if (physicalPlanTypeCase_ == 12) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 12) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        broadcastJoinBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
     */
    public org.blaze.protobuf.BroadcastJoinExecNode.Builder getBroadcastJoinBuilder() {
      return getBroadcastJoinFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.BroadcastJoinExecNodeOrBuilder getBroadcastJoinOrBuilder() {
      if ((physicalPlanTypeCase_ == 12) && (broadcastJoinBuilder_ != null)) {
        return broadcastJoinBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 12) {
          return (org.blaze.protobuf.BroadcastJoinExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.BroadcastJoinExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.BroadcastJoinExecNode broadcast_join = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.BroadcastJoinExecNode, org.blaze.protobuf.BroadcastJoinExecNode.Builder, org.blaze.protobuf.BroadcastJoinExecNodeOrBuilder> 
        getBroadcastJoinFieldBuilder() {
      if (broadcastJoinBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 12)) {
          physicalPlanType_ = org.blaze.protobuf.BroadcastJoinExecNode.getDefaultInstance();
        }
        broadcastJoinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.BroadcastJoinExecNode, org.blaze.protobuf.BroadcastJoinExecNode.Builder, org.blaze.protobuf.BroadcastJoinExecNodeOrBuilder>(
                (org.blaze.protobuf.BroadcastJoinExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 12;
      onChanged();;
      return broadcastJoinBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.RenameColumnsExecNode, org.blaze.protobuf.RenameColumnsExecNode.Builder, org.blaze.protobuf.RenameColumnsExecNodeOrBuilder> renameColumnsBuilder_;
    /**
     * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
     * @return Whether the renameColumns field is set.
     */
    @java.lang.Override
    public boolean hasRenameColumns() {
      return physicalPlanTypeCase_ == 13;
    }
    /**
     * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
     * @return The renameColumns.
     */
    @java.lang.Override
    public org.blaze.protobuf.RenameColumnsExecNode getRenameColumns() {
      if (renameColumnsBuilder_ == null) {
        if (physicalPlanTypeCase_ == 13) {
          return (org.blaze.protobuf.RenameColumnsExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.RenameColumnsExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 13) {
          return renameColumnsBuilder_.getMessage();
        }
        return org.blaze.protobuf.RenameColumnsExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
     */
    public Builder setRenameColumns(org.blaze.protobuf.RenameColumnsExecNode value) {
      if (renameColumnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        renameColumnsBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
     */
    public Builder setRenameColumns(
        org.blaze.protobuf.RenameColumnsExecNode.Builder builderForValue) {
      if (renameColumnsBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        renameColumnsBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
     */
    public Builder mergeRenameColumns(org.blaze.protobuf.RenameColumnsExecNode value) {
      if (renameColumnsBuilder_ == null) {
        if (physicalPlanTypeCase_ == 13 &&
            physicalPlanType_ != org.blaze.protobuf.RenameColumnsExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.RenameColumnsExecNode.newBuilder((org.blaze.protobuf.RenameColumnsExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 13) {
          renameColumnsBuilder_.mergeFrom(value);
        } else {
          renameColumnsBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
     */
    public Builder clearRenameColumns() {
      if (renameColumnsBuilder_ == null) {
        if (physicalPlanTypeCase_ == 13) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 13) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        renameColumnsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
     */
    public org.blaze.protobuf.RenameColumnsExecNode.Builder getRenameColumnsBuilder() {
      return getRenameColumnsFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.RenameColumnsExecNodeOrBuilder getRenameColumnsOrBuilder() {
      if ((physicalPlanTypeCase_ == 13) && (renameColumnsBuilder_ != null)) {
        return renameColumnsBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 13) {
          return (org.blaze.protobuf.RenameColumnsExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.RenameColumnsExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.RenameColumnsExecNode rename_columns = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.RenameColumnsExecNode, org.blaze.protobuf.RenameColumnsExecNode.Builder, org.blaze.protobuf.RenameColumnsExecNodeOrBuilder> 
        getRenameColumnsFieldBuilder() {
      if (renameColumnsBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 13)) {
          physicalPlanType_ = org.blaze.protobuf.RenameColumnsExecNode.getDefaultInstance();
        }
        renameColumnsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.RenameColumnsExecNode, org.blaze.protobuf.RenameColumnsExecNode.Builder, org.blaze.protobuf.RenameColumnsExecNodeOrBuilder>(
                (org.blaze.protobuf.RenameColumnsExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 13;
      onChanged();;
      return renameColumnsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.EmptyPartitionsExecNode, org.blaze.protobuf.EmptyPartitionsExecNode.Builder, org.blaze.protobuf.EmptyPartitionsExecNodeOrBuilder> emptyPartitionsBuilder_;
    /**
     * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
     * @return Whether the emptyPartitions field is set.
     */
    @java.lang.Override
    public boolean hasEmptyPartitions() {
      return physicalPlanTypeCase_ == 14;
    }
    /**
     * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
     * @return The emptyPartitions.
     */
    @java.lang.Override
    public org.blaze.protobuf.EmptyPartitionsExecNode getEmptyPartitions() {
      if (emptyPartitionsBuilder_ == null) {
        if (physicalPlanTypeCase_ == 14) {
          return (org.blaze.protobuf.EmptyPartitionsExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.EmptyPartitionsExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 14) {
          return emptyPartitionsBuilder_.getMessage();
        }
        return org.blaze.protobuf.EmptyPartitionsExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
     */
    public Builder setEmptyPartitions(org.blaze.protobuf.EmptyPartitionsExecNode value) {
      if (emptyPartitionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        emptyPartitionsBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
     */
    public Builder setEmptyPartitions(
        org.blaze.protobuf.EmptyPartitionsExecNode.Builder builderForValue) {
      if (emptyPartitionsBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        emptyPartitionsBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
     */
    public Builder mergeEmptyPartitions(org.blaze.protobuf.EmptyPartitionsExecNode value) {
      if (emptyPartitionsBuilder_ == null) {
        if (physicalPlanTypeCase_ == 14 &&
            physicalPlanType_ != org.blaze.protobuf.EmptyPartitionsExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.EmptyPartitionsExecNode.newBuilder((org.blaze.protobuf.EmptyPartitionsExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 14) {
          emptyPartitionsBuilder_.mergeFrom(value);
        } else {
          emptyPartitionsBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
     */
    public Builder clearEmptyPartitions() {
      if (emptyPartitionsBuilder_ == null) {
        if (physicalPlanTypeCase_ == 14) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 14) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        emptyPartitionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
     */
    public org.blaze.protobuf.EmptyPartitionsExecNode.Builder getEmptyPartitionsBuilder() {
      return getEmptyPartitionsFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.EmptyPartitionsExecNodeOrBuilder getEmptyPartitionsOrBuilder() {
      if ((physicalPlanTypeCase_ == 14) && (emptyPartitionsBuilder_ != null)) {
        return emptyPartitionsBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 14) {
          return (org.blaze.protobuf.EmptyPartitionsExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.EmptyPartitionsExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.EmptyPartitionsExecNode empty_partitions = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.EmptyPartitionsExecNode, org.blaze.protobuf.EmptyPartitionsExecNode.Builder, org.blaze.protobuf.EmptyPartitionsExecNodeOrBuilder> 
        getEmptyPartitionsFieldBuilder() {
      if (emptyPartitionsBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 14)) {
          physicalPlanType_ = org.blaze.protobuf.EmptyPartitionsExecNode.getDefaultInstance();
        }
        emptyPartitionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.EmptyPartitionsExecNode, org.blaze.protobuf.EmptyPartitionsExecNode.Builder, org.blaze.protobuf.EmptyPartitionsExecNodeOrBuilder>(
                (org.blaze.protobuf.EmptyPartitionsExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 14;
      onChanged();;
      return emptyPartitionsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.AggExecNode, org.blaze.protobuf.AggExecNode.Builder, org.blaze.protobuf.AggExecNodeOrBuilder> aggBuilder_;
    /**
     * <code>.plan.protobuf.AggExecNode agg = 15;</code>
     * @return Whether the agg field is set.
     */
    @java.lang.Override
    public boolean hasAgg() {
      return physicalPlanTypeCase_ == 15;
    }
    /**
     * <code>.plan.protobuf.AggExecNode agg = 15;</code>
     * @return The agg.
     */
    @java.lang.Override
    public org.blaze.protobuf.AggExecNode getAgg() {
      if (aggBuilder_ == null) {
        if (physicalPlanTypeCase_ == 15) {
          return (org.blaze.protobuf.AggExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.AggExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 15) {
          return aggBuilder_.getMessage();
        }
        return org.blaze.protobuf.AggExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.AggExecNode agg = 15;</code>
     */
    public Builder setAgg(org.blaze.protobuf.AggExecNode value) {
      if (aggBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        aggBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.plan.protobuf.AggExecNode agg = 15;</code>
     */
    public Builder setAgg(
        org.blaze.protobuf.AggExecNode.Builder builderForValue) {
      if (aggBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        aggBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.plan.protobuf.AggExecNode agg = 15;</code>
     */
    public Builder mergeAgg(org.blaze.protobuf.AggExecNode value) {
      if (aggBuilder_ == null) {
        if (physicalPlanTypeCase_ == 15 &&
            physicalPlanType_ != org.blaze.protobuf.AggExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.AggExecNode.newBuilder((org.blaze.protobuf.AggExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 15) {
          aggBuilder_.mergeFrom(value);
        } else {
          aggBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.plan.protobuf.AggExecNode agg = 15;</code>
     */
    public Builder clearAgg() {
      if (aggBuilder_ == null) {
        if (physicalPlanTypeCase_ == 15) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 15) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        aggBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.AggExecNode agg = 15;</code>
     */
    public org.blaze.protobuf.AggExecNode.Builder getAggBuilder() {
      return getAggFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.AggExecNode agg = 15;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.AggExecNodeOrBuilder getAggOrBuilder() {
      if ((physicalPlanTypeCase_ == 15) && (aggBuilder_ != null)) {
        return aggBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 15) {
          return (org.blaze.protobuf.AggExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.AggExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.AggExecNode agg = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.AggExecNode, org.blaze.protobuf.AggExecNode.Builder, org.blaze.protobuf.AggExecNodeOrBuilder> 
        getAggFieldBuilder() {
      if (aggBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 15)) {
          physicalPlanType_ = org.blaze.protobuf.AggExecNode.getDefaultInstance();
        }
        aggBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.AggExecNode, org.blaze.protobuf.AggExecNode.Builder, org.blaze.protobuf.AggExecNodeOrBuilder>(
                (org.blaze.protobuf.AggExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 15;
      onChanged();;
      return aggBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.LimitExecNode, org.blaze.protobuf.LimitExecNode.Builder, org.blaze.protobuf.LimitExecNodeOrBuilder> limitBuilder_;
    /**
     * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
     * @return Whether the limit field is set.
     */
    @java.lang.Override
    public boolean hasLimit() {
      return physicalPlanTypeCase_ == 16;
    }
    /**
     * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
     * @return The limit.
     */
    @java.lang.Override
    public org.blaze.protobuf.LimitExecNode getLimit() {
      if (limitBuilder_ == null) {
        if (physicalPlanTypeCase_ == 16) {
          return (org.blaze.protobuf.LimitExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.LimitExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 16) {
          return limitBuilder_.getMessage();
        }
        return org.blaze.protobuf.LimitExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
     */
    public Builder setLimit(org.blaze.protobuf.LimitExecNode value) {
      if (limitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        limitBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
     */
    public Builder setLimit(
        org.blaze.protobuf.LimitExecNode.Builder builderForValue) {
      if (limitBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        limitBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
     */
    public Builder mergeLimit(org.blaze.protobuf.LimitExecNode value) {
      if (limitBuilder_ == null) {
        if (physicalPlanTypeCase_ == 16 &&
            physicalPlanType_ != org.blaze.protobuf.LimitExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.LimitExecNode.newBuilder((org.blaze.protobuf.LimitExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 16) {
          limitBuilder_.mergeFrom(value);
        } else {
          limitBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
     */
    public Builder clearLimit() {
      if (limitBuilder_ == null) {
        if (physicalPlanTypeCase_ == 16) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 16) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        limitBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
     */
    public org.blaze.protobuf.LimitExecNode.Builder getLimitBuilder() {
      return getLimitFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.LimitExecNodeOrBuilder getLimitOrBuilder() {
      if ((physicalPlanTypeCase_ == 16) && (limitBuilder_ != null)) {
        return limitBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 16) {
          return (org.blaze.protobuf.LimitExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.LimitExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.LimitExecNode limit = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.LimitExecNode, org.blaze.protobuf.LimitExecNode.Builder, org.blaze.protobuf.LimitExecNodeOrBuilder> 
        getLimitFieldBuilder() {
      if (limitBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 16)) {
          physicalPlanType_ = org.blaze.protobuf.LimitExecNode.getDefaultInstance();
        }
        limitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.LimitExecNode, org.blaze.protobuf.LimitExecNode.Builder, org.blaze.protobuf.LimitExecNodeOrBuilder>(
                (org.blaze.protobuf.LimitExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 16;
      onChanged();;
      return limitBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.FFIReaderExecNode, org.blaze.protobuf.FFIReaderExecNode.Builder, org.blaze.protobuf.FFIReaderExecNodeOrBuilder> ffiReaderBuilder_;
    /**
     * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
     * @return Whether the ffiReader field is set.
     */
    @java.lang.Override
    public boolean hasFfiReader() {
      return physicalPlanTypeCase_ == 17;
    }
    /**
     * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
     * @return The ffiReader.
     */
    @java.lang.Override
    public org.blaze.protobuf.FFIReaderExecNode getFfiReader() {
      if (ffiReaderBuilder_ == null) {
        if (physicalPlanTypeCase_ == 17) {
          return (org.blaze.protobuf.FFIReaderExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.FFIReaderExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 17) {
          return ffiReaderBuilder_.getMessage();
        }
        return org.blaze.protobuf.FFIReaderExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
     */
    public Builder setFfiReader(org.blaze.protobuf.FFIReaderExecNode value) {
      if (ffiReaderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        ffiReaderBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
     */
    public Builder setFfiReader(
        org.blaze.protobuf.FFIReaderExecNode.Builder builderForValue) {
      if (ffiReaderBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        ffiReaderBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
     */
    public Builder mergeFfiReader(org.blaze.protobuf.FFIReaderExecNode value) {
      if (ffiReaderBuilder_ == null) {
        if (physicalPlanTypeCase_ == 17 &&
            physicalPlanType_ != org.blaze.protobuf.FFIReaderExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.FFIReaderExecNode.newBuilder((org.blaze.protobuf.FFIReaderExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 17) {
          ffiReaderBuilder_.mergeFrom(value);
        } else {
          ffiReaderBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
     */
    public Builder clearFfiReader() {
      if (ffiReaderBuilder_ == null) {
        if (physicalPlanTypeCase_ == 17) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 17) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        ffiReaderBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
     */
    public org.blaze.protobuf.FFIReaderExecNode.Builder getFfiReaderBuilder() {
      return getFfiReaderFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.FFIReaderExecNodeOrBuilder getFfiReaderOrBuilder() {
      if ((physicalPlanTypeCase_ == 17) && (ffiReaderBuilder_ != null)) {
        return ffiReaderBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 17) {
          return (org.blaze.protobuf.FFIReaderExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.FFIReaderExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.FFIReaderExecNode ffi_reader = 17;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.FFIReaderExecNode, org.blaze.protobuf.FFIReaderExecNode.Builder, org.blaze.protobuf.FFIReaderExecNodeOrBuilder> 
        getFfiReaderFieldBuilder() {
      if (ffiReaderBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 17)) {
          physicalPlanType_ = org.blaze.protobuf.FFIReaderExecNode.getDefaultInstance();
        }
        ffiReaderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.FFIReaderExecNode, org.blaze.protobuf.FFIReaderExecNode.Builder, org.blaze.protobuf.FFIReaderExecNodeOrBuilder>(
                (org.blaze.protobuf.FFIReaderExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 17;
      onChanged();;
      return ffiReaderBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CoalesceBatchesExecNode, org.blaze.protobuf.CoalesceBatchesExecNode.Builder, org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder> coalesceBatchesBuilder_;
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
     * @return Whether the coalesceBatches field is set.
     */
    @java.lang.Override
    public boolean hasCoalesceBatches() {
      return physicalPlanTypeCase_ == 18;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
     * @return The coalesceBatches.
     */
    @java.lang.Override
    public org.blaze.protobuf.CoalesceBatchesExecNode getCoalesceBatches() {
      if (coalesceBatchesBuilder_ == null) {
        if (physicalPlanTypeCase_ == 18) {
          return (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 18) {
          return coalesceBatchesBuilder_.getMessage();
        }
        return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
     */
    public Builder setCoalesceBatches(org.blaze.protobuf.CoalesceBatchesExecNode value) {
      if (coalesceBatchesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        coalesceBatchesBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
     */
    public Builder setCoalesceBatches(
        org.blaze.protobuf.CoalesceBatchesExecNode.Builder builderForValue) {
      if (coalesceBatchesBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        coalesceBatchesBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
     */
    public Builder mergeCoalesceBatches(org.blaze.protobuf.CoalesceBatchesExecNode value) {
      if (coalesceBatchesBuilder_ == null) {
        if (physicalPlanTypeCase_ == 18 &&
            physicalPlanType_ != org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.CoalesceBatchesExecNode.newBuilder((org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 18) {
          coalesceBatchesBuilder_.mergeFrom(value);
        } else {
          coalesceBatchesBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 18;
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
     */
    public Builder clearCoalesceBatches() {
      if (coalesceBatchesBuilder_ == null) {
        if (physicalPlanTypeCase_ == 18) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 18) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        coalesceBatchesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
     */
    public org.blaze.protobuf.CoalesceBatchesExecNode.Builder getCoalesceBatchesBuilder() {
      return getCoalesceBatchesFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder getCoalesceBatchesOrBuilder() {
      if ((physicalPlanTypeCase_ == 18) && (coalesceBatchesBuilder_ != null)) {
        return coalesceBatchesBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 18) {
          return (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.CoalesceBatchesExecNode coalesce_batches = 18;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.CoalesceBatchesExecNode, org.blaze.protobuf.CoalesceBatchesExecNode.Builder, org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder> 
        getCoalesceBatchesFieldBuilder() {
      if (coalesceBatchesBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 18)) {
          physicalPlanType_ = org.blaze.protobuf.CoalesceBatchesExecNode.getDefaultInstance();
        }
        coalesceBatchesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.CoalesceBatchesExecNode, org.blaze.protobuf.CoalesceBatchesExecNode.Builder, org.blaze.protobuf.CoalesceBatchesExecNodeOrBuilder>(
                (org.blaze.protobuf.CoalesceBatchesExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 18;
      onChanged();;
      return coalesceBatchesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ExpandExecNode, org.blaze.protobuf.ExpandExecNode.Builder, org.blaze.protobuf.ExpandExecNodeOrBuilder> expandBuilder_;
    /**
     * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
     * @return Whether the expand field is set.
     */
    @java.lang.Override
    public boolean hasExpand() {
      return physicalPlanTypeCase_ == 19;
    }
    /**
     * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
     * @return The expand.
     */
    @java.lang.Override
    public org.blaze.protobuf.ExpandExecNode getExpand() {
      if (expandBuilder_ == null) {
        if (physicalPlanTypeCase_ == 19) {
          return (org.blaze.protobuf.ExpandExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ExpandExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 19) {
          return expandBuilder_.getMessage();
        }
        return org.blaze.protobuf.ExpandExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
     */
    public Builder setExpand(org.blaze.protobuf.ExpandExecNode value) {
      if (expandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        expandBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
     */
    public Builder setExpand(
        org.blaze.protobuf.ExpandExecNode.Builder builderForValue) {
      if (expandBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        expandBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
     */
    public Builder mergeExpand(org.blaze.protobuf.ExpandExecNode value) {
      if (expandBuilder_ == null) {
        if (physicalPlanTypeCase_ == 19 &&
            physicalPlanType_ != org.blaze.protobuf.ExpandExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.ExpandExecNode.newBuilder((org.blaze.protobuf.ExpandExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 19) {
          expandBuilder_.mergeFrom(value);
        } else {
          expandBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 19;
      return this;
    }
    /**
     * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
     */
    public Builder clearExpand() {
      if (expandBuilder_ == null) {
        if (physicalPlanTypeCase_ == 19) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 19) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        expandBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
     */
    public org.blaze.protobuf.ExpandExecNode.Builder getExpandBuilder() {
      return getExpandFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ExpandExecNodeOrBuilder getExpandOrBuilder() {
      if ((physicalPlanTypeCase_ == 19) && (expandBuilder_ != null)) {
        return expandBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 19) {
          return (org.blaze.protobuf.ExpandExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ExpandExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ExpandExecNode expand = 19;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ExpandExecNode, org.blaze.protobuf.ExpandExecNode.Builder, org.blaze.protobuf.ExpandExecNodeOrBuilder> 
        getExpandFieldBuilder() {
      if (expandBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 19)) {
          physicalPlanType_ = org.blaze.protobuf.ExpandExecNode.getDefaultInstance();
        }
        expandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ExpandExecNode, org.blaze.protobuf.ExpandExecNode.Builder, org.blaze.protobuf.ExpandExecNodeOrBuilder>(
                (org.blaze.protobuf.ExpandExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 19;
      onChanged();;
      return expandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.RssShuffleWriterExecNode, org.blaze.protobuf.RssShuffleWriterExecNode.Builder, org.blaze.protobuf.RssShuffleWriterExecNodeOrBuilder> rssShuffleWriterBuilder_;
    /**
     * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
     * @return Whether the rssShuffleWriter field is set.
     */
    @java.lang.Override
    public boolean hasRssShuffleWriter() {
      return physicalPlanTypeCase_ == 20;
    }
    /**
     * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
     * @return The rssShuffleWriter.
     */
    @java.lang.Override
    public org.blaze.protobuf.RssShuffleWriterExecNode getRssShuffleWriter() {
      if (rssShuffleWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 20) {
          return (org.blaze.protobuf.RssShuffleWriterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.RssShuffleWriterExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 20) {
          return rssShuffleWriterBuilder_.getMessage();
        }
        return org.blaze.protobuf.RssShuffleWriterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
     */
    public Builder setRssShuffleWriter(org.blaze.protobuf.RssShuffleWriterExecNode value) {
      if (rssShuffleWriterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        rssShuffleWriterBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
     */
    public Builder setRssShuffleWriter(
        org.blaze.protobuf.RssShuffleWriterExecNode.Builder builderForValue) {
      if (rssShuffleWriterBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        rssShuffleWriterBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
     */
    public Builder mergeRssShuffleWriter(org.blaze.protobuf.RssShuffleWriterExecNode value) {
      if (rssShuffleWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 20 &&
            physicalPlanType_ != org.blaze.protobuf.RssShuffleWriterExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.RssShuffleWriterExecNode.newBuilder((org.blaze.protobuf.RssShuffleWriterExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 20) {
          rssShuffleWriterBuilder_.mergeFrom(value);
        } else {
          rssShuffleWriterBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 20;
      return this;
    }
    /**
     * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
     */
    public Builder clearRssShuffleWriter() {
      if (rssShuffleWriterBuilder_ == null) {
        if (physicalPlanTypeCase_ == 20) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 20) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        rssShuffleWriterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
     */
    public org.blaze.protobuf.RssShuffleWriterExecNode.Builder getRssShuffleWriterBuilder() {
      return getRssShuffleWriterFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.RssShuffleWriterExecNodeOrBuilder getRssShuffleWriterOrBuilder() {
      if ((physicalPlanTypeCase_ == 20) && (rssShuffleWriterBuilder_ != null)) {
        return rssShuffleWriterBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 20) {
          return (org.blaze.protobuf.RssShuffleWriterExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.RssShuffleWriterExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.RssShuffleWriterExecNode rss_shuffle_writer = 20;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.RssShuffleWriterExecNode, org.blaze.protobuf.RssShuffleWriterExecNode.Builder, org.blaze.protobuf.RssShuffleWriterExecNodeOrBuilder> 
        getRssShuffleWriterFieldBuilder() {
      if (rssShuffleWriterBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 20)) {
          physicalPlanType_ = org.blaze.protobuf.RssShuffleWriterExecNode.getDefaultInstance();
        }
        rssShuffleWriterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.RssShuffleWriterExecNode, org.blaze.protobuf.RssShuffleWriterExecNode.Builder, org.blaze.protobuf.RssShuffleWriterExecNodeOrBuilder>(
                (org.blaze.protobuf.RssShuffleWriterExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 20;
      onChanged();;
      return rssShuffleWriterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.WindowExecNode, org.blaze.protobuf.WindowExecNode.Builder, org.blaze.protobuf.WindowExecNodeOrBuilder> windowBuilder_;
    /**
     * <code>.plan.protobuf.WindowExecNode window = 21;</code>
     * @return Whether the window field is set.
     */
    @java.lang.Override
    public boolean hasWindow() {
      return physicalPlanTypeCase_ == 21;
    }
    /**
     * <code>.plan.protobuf.WindowExecNode window = 21;</code>
     * @return The window.
     */
    @java.lang.Override
    public org.blaze.protobuf.WindowExecNode getWindow() {
      if (windowBuilder_ == null) {
        if (physicalPlanTypeCase_ == 21) {
          return (org.blaze.protobuf.WindowExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.WindowExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 21) {
          return windowBuilder_.getMessage();
        }
        return org.blaze.protobuf.WindowExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.WindowExecNode window = 21;</code>
     */
    public Builder setWindow(org.blaze.protobuf.WindowExecNode value) {
      if (windowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        windowBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.plan.protobuf.WindowExecNode window = 21;</code>
     */
    public Builder setWindow(
        org.blaze.protobuf.WindowExecNode.Builder builderForValue) {
      if (windowBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        windowBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.plan.protobuf.WindowExecNode window = 21;</code>
     */
    public Builder mergeWindow(org.blaze.protobuf.WindowExecNode value) {
      if (windowBuilder_ == null) {
        if (physicalPlanTypeCase_ == 21 &&
            physicalPlanType_ != org.blaze.protobuf.WindowExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.WindowExecNode.newBuilder((org.blaze.protobuf.WindowExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 21) {
          windowBuilder_.mergeFrom(value);
        } else {
          windowBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.plan.protobuf.WindowExecNode window = 21;</code>
     */
    public Builder clearWindow() {
      if (windowBuilder_ == null) {
        if (physicalPlanTypeCase_ == 21) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 21) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        windowBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.WindowExecNode window = 21;</code>
     */
    public org.blaze.protobuf.WindowExecNode.Builder getWindowBuilder() {
      return getWindowFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.WindowExecNode window = 21;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.WindowExecNodeOrBuilder getWindowOrBuilder() {
      if ((physicalPlanTypeCase_ == 21) && (windowBuilder_ != null)) {
        return windowBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 21) {
          return (org.blaze.protobuf.WindowExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.WindowExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.WindowExecNode window = 21;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.WindowExecNode, org.blaze.protobuf.WindowExecNode.Builder, org.blaze.protobuf.WindowExecNodeOrBuilder> 
        getWindowFieldBuilder() {
      if (windowBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 21)) {
          physicalPlanType_ = org.blaze.protobuf.WindowExecNode.getDefaultInstance();
        }
        windowBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.WindowExecNode, org.blaze.protobuf.WindowExecNode.Builder, org.blaze.protobuf.WindowExecNodeOrBuilder>(
                (org.blaze.protobuf.WindowExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 21;
      onChanged();;
      return windowBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.GenerateExecNode, org.blaze.protobuf.GenerateExecNode.Builder, org.blaze.protobuf.GenerateExecNodeOrBuilder> generateBuilder_;
    /**
     * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
     * @return Whether the generate field is set.
     */
    @java.lang.Override
    public boolean hasGenerate() {
      return physicalPlanTypeCase_ == 22;
    }
    /**
     * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
     * @return The generate.
     */
    @java.lang.Override
    public org.blaze.protobuf.GenerateExecNode getGenerate() {
      if (generateBuilder_ == null) {
        if (physicalPlanTypeCase_ == 22) {
          return (org.blaze.protobuf.GenerateExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.GenerateExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 22) {
          return generateBuilder_.getMessage();
        }
        return org.blaze.protobuf.GenerateExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
     */
    public Builder setGenerate(org.blaze.protobuf.GenerateExecNode value) {
      if (generateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        generateBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
     */
    public Builder setGenerate(
        org.blaze.protobuf.GenerateExecNode.Builder builderForValue) {
      if (generateBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        generateBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
     */
    public Builder mergeGenerate(org.blaze.protobuf.GenerateExecNode value) {
      if (generateBuilder_ == null) {
        if (physicalPlanTypeCase_ == 22 &&
            physicalPlanType_ != org.blaze.protobuf.GenerateExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.GenerateExecNode.newBuilder((org.blaze.protobuf.GenerateExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 22) {
          generateBuilder_.mergeFrom(value);
        } else {
          generateBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
     */
    public Builder clearGenerate() {
      if (generateBuilder_ == null) {
        if (physicalPlanTypeCase_ == 22) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 22) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        generateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
     */
    public org.blaze.protobuf.GenerateExecNode.Builder getGenerateBuilder() {
      return getGenerateFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.GenerateExecNodeOrBuilder getGenerateOrBuilder() {
      if ((physicalPlanTypeCase_ == 22) && (generateBuilder_ != null)) {
        return generateBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 22) {
          return (org.blaze.protobuf.GenerateExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.GenerateExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.GenerateExecNode generate = 22;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.GenerateExecNode, org.blaze.protobuf.GenerateExecNode.Builder, org.blaze.protobuf.GenerateExecNodeOrBuilder> 
        getGenerateFieldBuilder() {
      if (generateBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 22)) {
          physicalPlanType_ = org.blaze.protobuf.GenerateExecNode.getDefaultInstance();
        }
        generateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.GenerateExecNode, org.blaze.protobuf.GenerateExecNode.Builder, org.blaze.protobuf.GenerateExecNodeOrBuilder>(
                (org.blaze.protobuf.GenerateExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 22;
      onChanged();;
      return generateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ParquetSinkExecNode, org.blaze.protobuf.ParquetSinkExecNode.Builder, org.blaze.protobuf.ParquetSinkExecNodeOrBuilder> parquetSinkBuilder_;
    /**
     * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
     * @return Whether the parquetSink field is set.
     */
    @java.lang.Override
    public boolean hasParquetSink() {
      return physicalPlanTypeCase_ == 23;
    }
    /**
     * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
     * @return The parquetSink.
     */
    @java.lang.Override
    public org.blaze.protobuf.ParquetSinkExecNode getParquetSink() {
      if (parquetSinkBuilder_ == null) {
        if (physicalPlanTypeCase_ == 23) {
          return (org.blaze.protobuf.ParquetSinkExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ParquetSinkExecNode.getDefaultInstance();
      } else {
        if (physicalPlanTypeCase_ == 23) {
          return parquetSinkBuilder_.getMessage();
        }
        return org.blaze.protobuf.ParquetSinkExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
     */
    public Builder setParquetSink(org.blaze.protobuf.ParquetSinkExecNode value) {
      if (parquetSinkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        physicalPlanType_ = value;
        onChanged();
      } else {
        parquetSinkBuilder_.setMessage(value);
      }
      physicalPlanTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
     */
    public Builder setParquetSink(
        org.blaze.protobuf.ParquetSinkExecNode.Builder builderForValue) {
      if (parquetSinkBuilder_ == null) {
        physicalPlanType_ = builderForValue.build();
        onChanged();
      } else {
        parquetSinkBuilder_.setMessage(builderForValue.build());
      }
      physicalPlanTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
     */
    public Builder mergeParquetSink(org.blaze.protobuf.ParquetSinkExecNode value) {
      if (parquetSinkBuilder_ == null) {
        if (physicalPlanTypeCase_ == 23 &&
            physicalPlanType_ != org.blaze.protobuf.ParquetSinkExecNode.getDefaultInstance()) {
          physicalPlanType_ = org.blaze.protobuf.ParquetSinkExecNode.newBuilder((org.blaze.protobuf.ParquetSinkExecNode) physicalPlanType_)
              .mergeFrom(value).buildPartial();
        } else {
          physicalPlanType_ = value;
        }
        onChanged();
      } else {
        if (physicalPlanTypeCase_ == 23) {
          parquetSinkBuilder_.mergeFrom(value);
        } else {
          parquetSinkBuilder_.setMessage(value);
        }
      }
      physicalPlanTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
     */
    public Builder clearParquetSink() {
      if (parquetSinkBuilder_ == null) {
        if (physicalPlanTypeCase_ == 23) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
          onChanged();
        }
      } else {
        if (physicalPlanTypeCase_ == 23) {
          physicalPlanTypeCase_ = 0;
          physicalPlanType_ = null;
        }
        parquetSinkBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
     */
    public org.blaze.protobuf.ParquetSinkExecNode.Builder getParquetSinkBuilder() {
      return getParquetSinkFieldBuilder().getBuilder();
    }
    /**
     * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
     */
    @java.lang.Override
    public org.blaze.protobuf.ParquetSinkExecNodeOrBuilder getParquetSinkOrBuilder() {
      if ((physicalPlanTypeCase_ == 23) && (parquetSinkBuilder_ != null)) {
        return parquetSinkBuilder_.getMessageOrBuilder();
      } else {
        if (physicalPlanTypeCase_ == 23) {
          return (org.blaze.protobuf.ParquetSinkExecNode) physicalPlanType_;
        }
        return org.blaze.protobuf.ParquetSinkExecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.plan.protobuf.ParquetSinkExecNode parquet_sink = 23;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.blaze.protobuf.ParquetSinkExecNode, org.blaze.protobuf.ParquetSinkExecNode.Builder, org.blaze.protobuf.ParquetSinkExecNodeOrBuilder> 
        getParquetSinkFieldBuilder() {
      if (parquetSinkBuilder_ == null) {
        if (!(physicalPlanTypeCase_ == 23)) {
          physicalPlanType_ = org.blaze.protobuf.ParquetSinkExecNode.getDefaultInstance();
        }
        parquetSinkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.blaze.protobuf.ParquetSinkExecNode, org.blaze.protobuf.ParquetSinkExecNode.Builder, org.blaze.protobuf.ParquetSinkExecNodeOrBuilder>(
                (org.blaze.protobuf.ParquetSinkExecNode) physicalPlanType_,
                getParentForChildren(),
                isClean());
        physicalPlanType_ = null;
      }
      physicalPlanTypeCase_ = 23;
      onChanged();;
      return parquetSinkBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:plan.protobuf.PhysicalPlanNode)
  }

  // @@protoc_insertion_point(class_scope:plan.protobuf.PhysicalPlanNode)
  private static final org.blaze.protobuf.PhysicalPlanNode DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.blaze.protobuf.PhysicalPlanNode();
  }

  public static org.blaze.protobuf.PhysicalPlanNode getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PhysicalPlanNode>
      PARSER = new com.google.protobuf.AbstractParser<PhysicalPlanNode>() {
    @java.lang.Override
    public PhysicalPlanNode parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<PhysicalPlanNode> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PhysicalPlanNode> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.blaze.protobuf.PhysicalPlanNode getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

